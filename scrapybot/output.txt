[{'_index': 'bitcoin-search-scrapy-23', '_id': 'sDfMBokBCZBMBhpp-BMl', '_score': 1.0, '_ignored': ['body.keyword', 'body_formatted.keyword'], '_source': {'title': 'BOLT #3: Bitcoin Transaction and Script Formats', 'id': 'bolts-bolt-3-bitcoin-transaction-and-script-formats', 'body_formatted': '<article><h1><a><svg><path></path></svg></a>BOLT #3: Bitcoin Transaction and Script Formats</h1>\n<p>This details the exact format of on-chain transactions, which both sides need to agree on to ensure signatures are valid. This consists of the funding transaction output script, the commitment transactions, and the HTLC transactions.</p>\n<h1><a><svg><path></path></svg></a>Table of Contents</h1>\n<ul>\n<li><a>Transactions</a>\n<ul>\n<li><a>Transaction Output Ordering</a></li>\n<li><a>Use of Segwit</a></li>\n<li><a>Funding Transaction Output</a></li>\n<li><a>Commitment Transaction</a>\n<ul>\n<li><a>Commitment Transaction Outputs</a>\n<ul>\n<li><a><code>to_local</code> Output</a></li>\n<li><a><code>to_remote</code> Output</a></li>\n<li><a><code>to_local_anchor</code> and <code>to_remote_anchor</code></a></li>\n<li><a>Offered HTLC Outputs</a></li>\n<li><a>Received HTLC Outputs</a></li>\n</ul>\n</li>\n<li><a>Trimmed Outputs</a></li>\n</ul>\n</li>\n<li><a>HTLC-timeout and HTLC-success Transactions</a></li>\n<li><a>Closing Transaction</a></li>\n<li><a>Fees</a>\n<ul>\n<li><a>Fee Calculation</a></li>\n<li><a>Fee Payment</a></li>\n</ul>\n</li>\n<li><a>Dust Limits</a></li>\n<li><a>Commitment Transaction Construction</a></li>\n</ul>\n</li>\n<li><a>Keys</a>\n<ul>\n<li><a>Key Derivation</a>\n<ul>\n<li><a><code>localpubkey</code>, <code>remotepubkey</code>, <code>local_htlcpubkey</code>, <code>remote_htlcpubkey</code>, <code>local_delayedpubkey</code>, and <code>remote_delayedpubkey</code> Derivation</a></li>\n<li><a><code>revocationpubkey</code> Derivation</a></li>\n<li><a>Per-commitment Secret Requirements</a></li>\n</ul>\n</li>\n<li><a>Efficient Per-commitment Secret Storage</a></li>\n</ul>\n</li>\n<li><a>Appendix A: Expected Weights</a>\n<ul>\n<li><a>Expected Weight of the Commitment Transaction</a></li>\n<li><a>Expected Weight of HTLC-timeout and HTLC-success Transactions</a></li>\n</ul>\n</li>\n<li><a>Appendix B: Funding Transaction Test Vectors</a></li>\n<li><a>Appendix C: Commitment and HTLC Transaction Test Vectors</a></li>\n<li><a>Appendix D: Per-commitment Secret Generation Test Vectors</a>\n<ul>\n<li><a>Generation Tests</a></li>\n<li><a>Storage Tests</a></li>\n</ul>\n</li>\n<li><a>Appendix E: Key Derivation Test Vectors</a></li>\n<li><a>Appendix F: Commitment and HTLC Transaction Test Vectors (anchors)</a></li>\n<li><a>Appendix G: Commitment and HTLC Transaction Test Vectors (anchors-zero-fee-htlc-tx)</a></li>\n<li><a>References</a></li>\n<li><a>Authors</a></li>\n</ul>\n<h1><a><svg><path></path></svg></a>Transactions</h1>\n<h2><a><svg><path></path></svg></a>Transaction Output Ordering</h2>\n<p>Outputs in transactions are always sorted according to:</p>\n<ul>\n<li>first according to their value, smallest first (in whole satoshis, note that for HTLC outputs, the millisatoshi part must be ignored)</li>\n<li>followed by <code>scriptpubkey</code>, comparing the common-length prefix lexicographically as if by <code>memcmp</code>, then selecting the shorter script (if they differ in length),</li>\n<li>finally, for HTLC outputs, in increasing <code>cltv_expiry</code> order.</li>\n</ul>\n<h2><a><svg><path></path></svg></a>Rationale</h2>\n<p>Two offered HTLCs which have the same <code>amount</code> (rounded from <code>amount_msat</code>) and\n<code>payment_hash</code> will have identical outputs, even if their <code>cltv_expiry</code>\ndiffers.  This only matters because the same ordering is used to send\n<code>htlc_signatures</code> and the HTLC transactions themselves are different, thus the\ntwo peers must agree on the canonical ordering for this case.</p>\n<h2><a><svg><path></path></svg></a>Use of Segwit</h2>\n<p>Most transaction outputs used here are pay-to-witness-script-hash<sup><a>BIP141</a></sup> (P2WSH) outputs: the Segwit version of P2SH. To spend such outputs, the last item on the witness stack must be the actual script that was used to generate the P2WSH output that is being spent. This last item has been omitted for brevity in the rest of this document.</p>\n<p>A <code>&lt;&gt;</code> designates an empty vector as required for compliance with MINIMALIF-standard rule.<sup><a>MINIMALIF</a></sup></p>\n<h2><a><svg><path></path></svg></a>Funding Transaction Output</h2>\n<ul>\n<li>The funding output script is a P2WSH to:</li>\n</ul>\n<p><code>2 &lt;pubkey1&gt; &lt;pubkey2&gt; 2 OP_CHECKMULTISIG</code></p>\n<ul>\n<li>Where <code>pubkey1</code> is the lexicographically lesser of the two <code>funding_pubkey</code> in compressed format, and where <code>pubkey2</code> is the lexicographically greater of the two.</li>\n</ul>\n<h2><a><svg><path></path></svg></a>Commitment Transaction</h2>\n<ul>\n<li>version: 2</li>\n<li>locktime: upper 8 bits are 0x20, lower 24 bits are the lower 24 bits of the obscured commitment number</li>\n<li>txin count: 1\n<ul>\n<li><code>txin[0]</code> outpoint: <code>txid</code> and <code>output_index</code> from <code>funding_created</code> message</li>\n<li><code>txin[0]</code> sequence: upper 8 bits are 0x80, lower 24 bits are upper 24 bits of the obscured commitment number</li>\n<li><code>txin[0]</code> script bytes: 0</li>\n<li><code>txin[0]</code> witness: <code>0 &lt;signature_for_pubkey1&gt; &lt;signature_for_pubkey2&gt;</code></li>\n</ul>\n</li>\n</ul>\n<p>The 48-bit commitment number is obscured by <code>XOR</code> with the lower 48 bits of:</p>\n<div><pre><code>SHA256(payment_basepoint from open_channel || payment_basepoint from accept_channel)\n</code></pre></div>\n<p>This obscures the number of commitments made on the channel in the\ncase of unilateral close, yet still provides a useful index for both\nnodes (who know the <code>payment_basepoint</code>s) to quickly find a revoked\ncommitment transaction.</p>\n<h3><a><svg><path></path></svg></a>Commitment Transaction Outputs</h3>\n<p>To allow an opportunity for penalty transactions, in case of a revoked commitment transaction, all outputs that return funds to the owner of the commitment transaction (a.k.a. the "local node") must be delayed for <code>to_self_delay</code> blocks. For HTLCs this delay is done in a second-stage HTLC transaction (HTLC-success for HTLCs accepted by the local node, HTLC-timeout for HTLCs offered by the local node).</p>\n<p>The reason for the separate transaction stage for HTLC outputs is so that HTLCs can timeout or be fulfilled even though they are within the <code>to_self_delay</code> delay.\nOtherwise, the required minimum timeout on HTLCs is lengthened by this delay, causing longer timeouts for HTLCs traversing the network.</p>\n<p>The amounts for each output MUST be rounded down to whole satoshis. If this amount, minus the fees for the HTLC transaction, is less than the <code>dust_limit_satoshis</code> set by the owner of the commitment transaction, the output MUST NOT be produced (thus the funds add to fees).</p>\n<h4><a><svg><path></path></svg></a><code>to_local</code> Output</h4>\n<p>This output sends funds back to the owner of this commitment transaction and thus must be timelocked using <code>OP_CHECKSEQUENCEVERIFY</code>. It can be claimed, without delay, by the other party if they know the revocation private key. The output is a version-0 P2WSH, with a witness script:</p>\n<div><pre><code>OP_IF\n    # Penalty transaction\n    &lt;revocationpubkey&gt;\nOP_ELSE\n    `to_self_delay`\n    OP_CHECKSEQUENCEVERIFY\n    OP_DROP\n    &lt;local_delayedpubkey&gt;\nOP_ENDIF\nOP_CHECKSIG\n</code></pre></div>\n<p>The output is spent by an input with <code>nSequence</code> field set to <code>to_self_delay</code> (which can only be valid after that duration has passed) and witness:</p>\n<div><pre><code>&lt;local_delayedsig&gt; &lt;&gt;\n</code></pre></div>\n<p>If a revoked commitment transaction is published, the other party can spend this output immediately with the following witness:</p>\n<div><pre><code>&lt;revocation_sig&gt; 1\n</code></pre></div>\n<h4><a><svg><path></path></svg></a><code>to_remote</code> Output</h4>\n<p>If <code>option_anchors</code> applies to the commitment transaction, the <code>to_remote</code> output is encumbered by a one block csv lock.</p>\n<div><pre><code>&lt;remotepubkey&gt; OP_CHECKSIGVERIFY 1 OP_CHECKSEQUENCEVERIFY\n</code></pre></div>\n<p>The output is spent by an input with <code>nSequence</code> field set to <code>1</code> and witness:</p>\n<div><pre><code>&lt;remote_sig&gt;\n</code></pre></div>\n<p>Otherwise, this output is a simple P2WPKH to <code>remotepubkey</code>. Note: the remote\'s commitment transaction uses your <code>localpubkey</code> for their\n<code>to_remote</code> output to yourself.</p>\n<h4><a><svg><path></path></svg></a><code>to_local_anchor</code> and <code>to_remote_anchor</code> Output (option_anchors)</h4>\n<p>This output can be spent by the local and remote nodes respectively to provide incentive to mine the transaction, using child-pays-for-parent. Both\nanchor outputs are always added, except for the case where there are no htlcs and one of the parties has a commitment output that is below the dust limit.\nIn that case only an anchor is added for the commitment output that does materialize. This typically happens if the initiator closes right after opening\n(no <code>to_remote</code> output).</p>\n<div><pre><code>&lt;local_funding_pubkey/remote_funding_pubkey&gt; OP_CHECKSIG OP_IFDUP\nOP_NOTIF\n    OP_16 OP_CHECKSEQUENCEVERIFY\nOP_ENDIF\n</code></pre></div>\n<p>Each party has its own anchor output that locks to their funding key. This is to prevent a malicious peer from attaching child transactions with a low fee\ndensity to an anchor and thereby blocking the victim from getting the commit tx confirmed in time. This defense is supported by a change in Bitcoin core 0.19:\n<a>bitcoin/bitcoin#15681</a>. This is also the reason that every non-anchor output on the commit tx is CSV locked.</p>\n<p>To prevent utxo set pollution, any anchor that remains unspent can be spent by anyone after the commitment tx confirms. This is also the reason to lock\nthe anchor outputs to the funding key. Third parties can observe this key and reconstruct the spend script, even if none of the commitment outputs would\nbe spent. This does assume that at some point the fee market goes down to a level where sweeping the anchors is economical.</p>\n<p>The amount of the output is fixed at 330 sats, the default dust limit for P2WSH.</p>\n<p>Spending of the output requires the following witness:</p>\n<div><pre><code>&lt;local_sig/remote_sig&gt;\n</code></pre></div>\n<p>After 16 blocks, anyone can sweep the anchor with witness:</p>\n<div><pre><code>&lt;&gt;\n</code></pre></div>\n<h4><a><svg><path></path></svg></a>Offered HTLC Outputs</h4>\n<p>This output sends funds to either an HTLC-timeout transaction after the HTLC-timeout or to the remote node using the payment preimage or the revocation key. The output is a P2WSH, with a witness script (no option_anchors):</p>\n<div><pre><code># To remote node with revocation key\nOP_DUP OP_HASH160 &lt;RIPEMD160(SHA256(revocationpubkey))&gt; OP_EQUAL\nOP_IF\n    OP_CHECKSIG\nOP_ELSE\n    &lt;remote_htlcpubkey&gt; OP_SWAP OP_SIZE 32 OP_EQUAL\n    OP_NOTIF\n        # To local node via HTLC-timeout transaction (timelocked).\n        OP_DROP 2 OP_SWAP &lt;local_htlcpubkey&gt; 2 OP_CHECKMULTISIG\n    OP_ELSE\n        # To remote node with preimage.\n        OP_HASH160 &lt;RIPEMD160(payment_hash)&gt; OP_EQUALVERIFY\n        OP_CHECKSIG\n    OP_ENDIF\nOP_ENDIF\n</code></pre></div>\n<p>Or, with <code>option_anchors</code>:</p>\n<div><pre><code># To remote node with revocation key\nOP_DUP OP_HASH160 &lt;RIPEMD160(SHA256(revocationpubkey))&gt; OP_EQUAL\nOP_IF\n    OP_CHECKSIG\nOP_ELSE\n    &lt;remote_htlcpubkey&gt; OP_SWAP OP_SIZE 32 OP_EQUAL\n    OP_NOTIF\n        # To local node via HTLC-timeout transaction (timelocked).\n        OP_DROP 2 OP_SWAP &lt;local_htlcpubkey&gt; 2 OP_CHECKMULTISIG\n    OP_ELSE\n        # To remote node with preimage.\n        OP_HASH160 &lt;RIPEMD160(payment_hash)&gt; OP_EQUALVERIFY\n        OP_CHECKSIG\n    OP_ENDIF\n    1 OP_CHECKSEQUENCEVERIFY OP_DROP\nOP_ENDIF\n</code></pre></div>\n<p>The remote node can redeem the HTLC with the witness:</p>\n<div><pre><code>&lt;remotehtlcsig&gt; &lt;payment_preimage&gt;\n</code></pre></div>\n<p>Note that if <code>option_anchors</code> applies, the nSequence field of\nthe spending input must be <code>1</code>.</p>\n<p>If a revoked commitment transaction is published, the remote node can spend this output immediately with the following witness:</p>\n<div><pre><code>&lt;revocation_sig&gt; &lt;revocationpubkey&gt;\n</code></pre></div>\n<p>The sending node can use the HTLC-timeout transaction to timeout the HTLC once the HTLC is expired, as shown below. This is the only way that the local node can timeout the HTLC, and this branch requires <code>&lt;remotehtlcsig&gt;</code>, which ensures that the local node cannot prematurely timeout the HTLC since the HTLC-timeout transaction has <code>cltv_expiry</code> as its specified <code>locktime</code>. The local node must also wait <code>to_self_delay</code> before accessing these funds, allowing for the remote node to claim these funds if the transaction has been revoked.</p>\n<h4><a><svg><path></path></svg></a>Received HTLC Outputs</h4>\n<p>This output sends funds to either the remote node after the HTLC-timeout or using the revocation key, or to an HTLC-success transaction with a successful payment preimage. The output is a P2WSH, with a witness script (no <code>option_anchors</code>):</p>\n<div><pre><code># To remote node with revocation key\nOP_DUP OP_HASH160 &lt;RIPEMD160(SHA256(revocationpubkey))&gt; OP_EQUAL\nOP_IF\n    OP_CHECKSIG\nOP_ELSE\n    &lt;remote_htlcpubkey&gt; OP_SWAP OP_SIZE 32 OP_EQUAL\n    OP_IF\n        # To local node via HTLC-success transaction.\n        OP_HASH160 &lt;RIPEMD160(payment_hash)&gt; OP_EQUALVERIFY\n        2 OP_SWAP &lt;local_htlcpubkey&gt; 2 OP_CHECKMULTISIG\n    OP_ELSE\n        # To remote node after timeout.\n        OP_DROP &lt;cltv_expiry&gt; OP_CHECKLOCKTIMEVERIFY OP_DROP\n        OP_CHECKSIG\n    OP_ENDIF\nOP_ENDIF\n</code></pre></div>\n<p>Or, with <code>option_anchors</code>:</p>\n<div><pre><code># To remote node with revocation key\nOP_DUP OP_HASH160 &lt;RIPEMD160(SHA256(revocationpubkey))&gt; OP_EQUAL\nOP_IF\n    OP_CHECKSIG\nOP_ELSE\n    &lt;remote_htlcpubkey&gt; OP_SWAP OP_SIZE 32 OP_EQUAL\n    OP_IF\n        # To local node via HTLC-success transaction.\n        OP_HASH160 &lt;RIPEMD160(payment_hash)&gt; OP_EQUALVERIFY\n        2 OP_SWAP &lt;local_htlcpubkey&gt; 2 OP_CHECKMULTISIG\n    OP_ELSE\n        # To remote node after timeout.\n        OP_DROP &lt;cltv_expiry&gt; OP_CHECKLOCKTIMEVERIFY OP_DROP\n        OP_CHECKSIG\n    OP_ENDIF\n    1 OP_CHECKSEQUENCEVERIFY OP_DROP\nOP_ENDIF\n</code></pre></div>\n<p>To timeout the HTLC, the remote node spends it with the witness:</p>\n<div><pre><code>&lt;remotehtlcsig&gt; &lt;&gt;\n</code></pre></div>\n<p>Note that if <code>option_anchors</code> applies, the nSequence field of\nthe spending input must be <code>1</code>.</p>\n<p>If a revoked commitment transaction is published, the remote node can spend this output immediately with the following witness:</p>\n<div><pre><code>&lt;revocation_sig&gt; &lt;revocationpubkey&gt;\n</code></pre></div>\n<p>To redeem the HTLC, the HTLC-success transaction is used as detailed below. This is the only way that the local node can spend the HTLC, since this branch requires <code>&lt;remotehtlcsig&gt;</code>, which ensures that the local node must wait <code>to_self_delay</code> before accessing these funds allowing for the remote node to claim these funds if the transaction has been revoked.</p>\n<h3><a><svg><path></path></svg></a>Trimmed Outputs</h3>\n<p>Each peer specifies a <code>dust_limit_satoshis</code> below which outputs should\nnot be produced; these outputs that are not produced are termed "trimmed". A trimmed output is\nconsidered too small to be worth creating and is instead added\nto the commitment transaction fee. For HTLCs, it needs to be taken into\naccount that the second-stage HTLC transaction may also be below the\nlimit.</p>\n<h4><a><svg><path></path></svg></a>Requirements</h4>\n<p>The base fee and anchor output values:</p>\n<ul>\n<li>before the commitment transaction outputs are determined:\n<ul>\n<li>MUST be subtracted from the <code>to_local</code> or <code>to_remote</code>\noutputs, as specified in <a>Fee Calculation</a>.</li>\n</ul>\n</li>\n</ul>\n<p>The commitment transaction:</p>\n<ul>\n<li>if the amount of the commitment transaction <code>to_local</code> output would be\nless than <code>dust_limit_satoshis</code> set by the transaction owner:\n<ul>\n<li>MUST NOT contain that output.</li>\n</ul>\n</li>\n<li>otherwise:\n<ul>\n<li>MUST be generated as specified in <a><code>to_local</code> Output</a>.</li>\n</ul>\n</li>\n<li>if the amount of the commitment transaction <code>to_remote</code> output would be\nless than <code>dust_limit_satoshis</code> set by the transaction owner:\n<ul>\n<li>MUST NOT contain that output.</li>\n</ul>\n</li>\n<li>otherwise:\n<ul>\n<li>MUST be generated as specified in <a><code>to_remote</code> Output</a>.</li>\n</ul>\n</li>\n<li>for every offered HTLC:\n<ul>\n<li>if the HTLC amount minus the HTLC-timeout fee would be less than\n<code>dust_limit_satoshis</code> set by the transaction owner:\n<ul>\n<li>MUST NOT contain that output.</li>\n</ul>\n</li>\n<li>otherwise:\n<ul>\n<li>MUST be generated as specified in\n<a>Offered HTLC Outputs</a>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>for every received HTLC:\n<ul>\n<li>if the HTLC amount minus the HTLC-success fee would be less than\n<code>dust_limit_satoshis</code> set by the transaction owner:\n<ul>\n<li>MUST NOT contain that output.</li>\n</ul>\n</li>\n<li>otherwise:\n<ul>\n<li>MUST be generated as specified in\n<a>Received HTLC Outputs</a>.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2><a><svg><path></path></svg></a>HTLC-Timeout and HTLC-Success Transactions</h2>\n<p>These HTLC transactions are almost identical, except the HTLC-timeout transaction is timelocked. Both HTLC-timeout/HTLC-success transactions can be spent by a valid penalty transaction.</p>\n<ul>\n<li>version: 2</li>\n<li>locktime: <code>0</code> for HTLC-success, <code>cltv_expiry</code> for HTLC-timeout</li>\n<li>txin count: 1\n<ul>\n<li><code>txin[0]</code> outpoint: <code>txid</code> of the commitment transaction and <code>output_index</code> of the matching HTLC output for the HTLC transaction</li>\n<li><code>txin[0]</code> sequence: <code>0</code> (set to <code>1</code> for <code>option_anchors</code>)</li>\n<li><code>txin[0]</code> script bytes: <code>0</code></li>\n<li><code>txin[0]</code> witness stack: <code>0 &lt;remotehtlcsig&gt; &lt;localhtlcsig&gt;  &lt;payment_preimage&gt;</code> for HTLC-success, <code>0 &lt;remotehtlcsig&gt; &lt;localhtlcsig&gt; &lt;&gt;</code> for HTLC-timeout</li>\n</ul>\n</li>\n<li>txout count: 1\n<ul>\n<li><code>txout[0]</code> amount: the HTLC <code>amount_msat</code> divided by 1000 (rounding down) minus fees in satoshis (see <a>Fee Calculation</a>)</li>\n<li><code>txout[0]</code> script: version-0 P2WSH with witness script as shown below</li>\n</ul>\n</li>\n<li>if <code>option_anchors</code> applies to this commitment transaction, <code>SIGHASH_SINGLE|SIGHASH_ANYONECANPAY</code> is used as described in <a>BOLT #5</a>.</li>\n</ul>\n<p>The witness script for the output is:</p>\n<div><pre><code>OP_IF\n    # Penalty transaction\n    &lt;revocationpubkey&gt;\nOP_ELSE\n    `to_self_delay`\n    OP_CHECKSEQUENCEVERIFY\n    OP_DROP\n    &lt;local_delayedpubkey&gt;\nOP_ENDIF\nOP_CHECKSIG\n</code></pre></div>\n<p>To spend this via penalty, the remote node uses a witness stack <code>&lt;revocationsig&gt; 1</code>, and to collect the output, the local node uses an input with nSequence <code>to_self_delay</code> and a witness stack <code>&lt;local_delayedsig&gt; 0</code>.</p>\n<h2><a><svg><path></path></svg></a>Closing Transaction</h2>\n<p>Note that there are two possible variants for each node.</p>\n<ul>\n<li>version: 2</li>\n<li>locktime: 0</li>\n<li>txin count: 1\n<ul>\n<li><code>txin[0]</code> outpoint: <code>txid</code> and <code>output_index</code> from <code>funding_created</code> message</li>\n<li><code>txin[0]</code> sequence: 0xFFFFFFFF</li>\n<li><code>txin[0]</code> script bytes: 0</li>\n<li><code>txin[0]</code> witness: <code>0 &lt;signature_for_pubkey1&gt; &lt;signature_for_pubkey2&gt;</code></li>\n</ul>\n</li>\n<li>txout count: 0, 1 or 2\n<ul>\n<li><code>txout</code> amount: final balance to be paid to one node (minus <code>fee_satoshis</code> from <code>closing_signed</code>, if this peer funded the channel)</li>\n<li><code>txout</code> script: as specified in that node\'s <code>scriptpubkey</code> in its <code>shutdown</code> message</li>\n</ul>\n</li>\n</ul>\n<h3><a><svg><path></path></svg></a>Requirements</h3>\n<p>Each node offering a signature:</p>\n<ul>\n<li>MUST round each output down to whole satoshis.</li>\n<li>MUST subtract the fee given by <code>fee_satoshis</code> from the output to the funder.</li>\n<li>MUST remove any output below its own <code>dust_limit_satoshis</code>.</li>\n<li>MAY eliminate its own output.</li>\n</ul>\n<h3><a><svg><path></path></svg></a>Rationale</h3>\n<p>There is a possibility of irreparable differences on closing if one\nnode considers the other\'s output too small to allow propagation on\nthe Bitcoin network (a.k.a. "dust"), and that other node instead\nconsiders that output too valuable to discard. This is why each\nside uses its own <code>dust_limit_satoshis</code>, and the result can be a\nsignature validation failure, if they disagree on what the closing\ntransaction should look like.</p>\n<p>However, if one side chooses to eliminate its own output, there\'s no\nreason for the other side to fail the closing protocol; so this is\nexplicitly allowed. The signature indicates which variant\nhas been used.</p>\n<p>There will be at least one output, if the funding amount is greater\nthan twice <code>dust_limit_satoshis</code>.</p>\n<h2><a><svg><path></path></svg></a>Fees</h2>\n<h3><a><svg><path></path></svg></a>Fee Calculation</h3>\n<p>The fee calculation for both commitment transactions and HTLC\ntransactions is based on the current <code>feerate_per_kw</code> and the\n<em>expected weight</em> of the transaction.</p>\n<p>The actual and expected weights vary for several reasons:</p>\n<ul>\n<li>Bitcoin uses DER-encoded signatures, which vary in size.</li>\n<li>Bitcoin also uses variable-length integers, so a large number of outputs will take 3 bytes to encode rather than 1.</li>\n<li>The <code>to_remote</code> output may be below the dust limit.</li>\n<li>The <code>to_local</code> output may be below the dust limit once fees are extracted.</li>\n</ul>\n<p>Thus, a simplified formula for <em>expected weight</em> is used, which assumes:</p>\n<ul>\n<li>Signatures are 73 bytes long (the maximum length).</li>\n<li>There are a small number of outputs (thus 1 byte to count them).</li>\n<li>There are always both a <code>to_local</code> output and a <code>to_remote</code> output.</li>\n<li>(if <code>option_anchors</code>) there are always both a <code>to_local_anchor</code> and <code>to_remote_anchor</code> output.</li>\n</ul>\n<p>This yields the following <em>expected weights</em> (details of the computation in <a>Appendix A</a>):</p>\n<div><pre><code>Commitment weight (no option_anchors):   724 + 172 * num-untrimmed-htlc-outputs\nCommitment weight (option_anchors):     1124 + 172 * num-untrimmed-htlc-outputs\nHTLC-timeout weight (no option_anchors): 663\nHTLC-timeout weight (option_anchors): 666\nHTLC-success weight (no option_anchors): 703\nHTLC-success weight (option_anchors): 706\n</code></pre></div>\n<p>Note the reference to the "base fee" for a commitment transaction in the requirements below, which is what the funder pays. The actual fee may be higher than the amount calculated here, due to rounding and trimmed outputs.</p>\n<h4><a><svg><path></path></svg></a>Requirements</h4>\n<p>The fee for an HTLC-timeout transaction:</p>\n<ul>\n<li>If <code>option_anchors_zero_fee_htlc_tx</code> applies:\n<ol>\n<li>MUST be 0.</li>\n</ol>\n</li>\n<li>Otherwise, MUST be calculated to match:\n<ol>\n<li>Multiply <code>feerate_per_kw</code> by 663 (666 if <code>option_anchor_outputs</code> applies) and divide by 1000 (rounding down).</li>\n</ol>\n</li>\n</ul>\n<p>The fee for an HTLC-success transaction:</p>\n<ul>\n<li>If <code>option_anchors_zero_fee_htlc_tx</code> applies:\n<ol>\n<li>MUST be 0.</li>\n</ol>\n</li>\n<li>Otherwise, MUST be calculated to match:\n<ol>\n<li>Multiply <code>feerate_per_kw</code> by 703 (706 if <code>option_anchor_outputs</code> applies) and divide by 1000 (rounding down).</li>\n</ol>\n</li>\n</ul>\n<p>The base fee for a commitment transaction:</p>\n<ul>\n<li>MUST be calculated to match:\n<ol>\n<li>Start with <code>weight</code> = 724 (1124 if <code>option_anchors</code> applies).</li>\n<li>For each committed HTLC, if that output is not trimmed as specified in\n<a>Trimmed Outputs</a>, add 172 to <code>weight</code>.</li>\n<li>Multiply <code>feerate_per_kw</code> by <code>weight</code>, divide by 1000 (rounding down).</li>\n</ol>\n</li>\n</ul>\n<h4><a><svg><path></path></svg></a>Example</h4>\n<p>For example, suppose there is a <code>feerate_per_kw</code> of 5000, a <code>dust_limit_satoshis</code> of 546 satoshis, and a commitment transaction with:</p>\n<ul>\n<li>two offered HTLCs of 5000000 and 1000000 millisatoshis (5000 and 1000 satoshis)</li>\n<li>two received HTLCs of 7000000 and 800000 millisatoshis (7000 and 800 satoshis)</li>\n</ul>\n<p>The HTLC-timeout transaction <code>weight</code> is 663, and thus the fee is 3315 satoshis.\nThe HTLC-success transaction <code>weight</code> is 703, and thus the fee is 3515 satoshis</p>\n<p>The commitment transaction <code>weight</code> is calculated as follows:</p>\n<ul>\n<li>\n<p><code>weight</code> starts at 724.</p>\n</li>\n<li>\n<p>The offered HTLC of 5000 satoshis is above 546 + 3315 and results in:</p>\n<ul>\n<li>an output of 5000 satoshi in the commitment transaction</li>\n<li>an HTLC-timeout transaction of 5000 - 3315 satoshis that spends this output</li>\n<li><code>weight</code> increases to 896</li>\n</ul>\n</li>\n<li>\n<p>The offered HTLC of 1000 satoshis is below 546 + 3315 so it is trimmed.</p>\n</li>\n<li>\n<p>The received HTLC of 7000 satoshis is above 546 + 3515 and results in:</p>\n<ul>\n<li>an output of 7000 satoshi in the commitment transaction</li>\n<li>an HTLC-success transaction of 7000 - 3515 satoshis that spends this output</li>\n<li><code>weight</code> increases to 1068</li>\n</ul>\n</li>\n<li>\n<p>The received HTLC of 800 satoshis is below 546 + 3515 so it is trimmed.</p>\n</li>\n</ul>\n<p>The base commitment transaction fee is 5340 satoshi; the actual\nfee (which adds the 1000 and 800 satoshi HTLCs that would make dust\noutputs) is 7140 satoshi. The final fee may be even higher if the\n<code>to_local</code> or <code>to_remote</code> outputs fall below <code>dust_limit_satoshis</code>.</p>\n<h3><a><svg><path></path></svg></a>Fee Payment</h3>\n<p>Base commitment transaction fees and amounts for <code>to_local_anchor</code> and <code>to_remote_anchor</code> outputs are extracted from the funder\'s amount;\nRestrictions to the commitment tx output for the funder in relation to the\nchannel reserve apply as described in <a>BOLT #2</a>.</p>\n<p>Note that after the fee amount is subtracted from the to-funder output,\nthat output may be below <code>dust_limit_satoshis</code>, and thus will also\ncontribute to fees.</p>\n<p>A node:</p>\n<ul>\n<li>if the resulting fee rate is too low:\n<ul>\n<li>MAY send a <code>warning</code> and close the connection, or send an\n<code>error</code> and fail the channel.</li>\n</ul>\n</li>\n</ul>\n<h2><a><svg><path></path></svg></a>Dust Limits</h2>\n<p>The <code>dust_limit_satoshis</code> parameter is used to configure the threshold below\nwhich nodes will not produce on-chain transaction outputs.</p>\n<p>There is no consensus rule in Bitcoin that makes outputs below dust thresholds\ninvalid or unspendable, but policy rules in popular implementations will prevent\nrelaying transactions that contain such outputs.</p>\n<p>Bitcoin Core defines the following dust thresholds:</p>\n<ul>\n<li>pay to pubkey hash (p2pkh): 546 satoshis</li>\n<li>pay to script hash (p2sh): 540 satoshis</li>\n<li>pay to witness pubkey hash (p2wpkh): 294 satoshis</li>\n<li>pay to witness script hash (p2wsh): 330 satoshis</li>\n<li>unknown segwit versions: 354 satoshis</li>\n</ul>\n<p>The rationale of this calculation (implemented <a>here</a>)\nis explained in the following sections.</p>\n<p>In all these sections, the calculations are done with a feerate of 3000 sat/kB\nas per Bitcoin Core\'s implementation.</p>\n<h3><a><svg><path></path></svg></a>Pay to pubkey hash (p2pkh)</h3>\n<p>A p2pkh output is 34 bytes:</p>\n<ul>\n<li>8 bytes for the output amount</li>\n<li>1 byte for the script length</li>\n<li>25 bytes for the script (<code>OP_DUP</code> <code>OP_HASH160</code> <code>20</code> 20-bytes <code>OP_EQUALVERIFY</code> <code>OP_CHECKSIG</code>)</li>\n</ul>\n<p>A p2pkh input is at least 148 bytes:</p>\n<ul>\n<li>36 bytes for the previous output (32 bytes hash + 4 bytes index)</li>\n<li>4 bytes for the sequence</li>\n<li>1 byte for the script sig length</li>\n<li>107 bytes for the script sig:\n<ul>\n<li>1 byte for the items count</li>\n<li>1 byte for the signature length</li>\n<li>71 bytes for the signature</li>\n<li>1 byte for the public key length</li>\n<li>33 bytes for the public key</li>\n</ul>\n</li>\n</ul>\n<p>The p2pkh dust threshold is then <code>(34 + 148) * 3000 / 1000 = 546 satoshis</code></p>\n<h3><a><svg><path></path></svg></a>Pay to script hash (p2sh)</h3>\n<p>A p2sh output is 32 bytes:</p>\n<ul>\n<li>8 bytes for the output amount</li>\n<li>1 byte for the script length</li>\n<li>23 bytes for the script (<code>OP_HASH160</code> <code>20</code> 20-bytes <code>OP_EQUAL</code>)</li>\n</ul>\n<p>A p2sh input doesn\'t have a fixed size, since it depends on the underlying\nscript, so we use 148 bytes as a lower bound.</p>\n<p>The p2sh dust threshold is then <code>(32 + 148) * 3000 / 1000 = 540 satoshis</code></p>\n<h3><a><svg><path></path></svg></a>Pay to witness pubkey hash (p2wpkh)</h3>\n<p>A p2wpkh output is 31 bytes:</p>\n<ul>\n<li>8 bytes for the output amount</li>\n<li>1 byte for the script length</li>\n<li>22 bytes for the script (<code>OP_0</code> <code>20</code> 20-bytes)</li>\n</ul>\n<p>A p2wpkh input is at least 67 bytes (depending on the signature length):</p>\n<ul>\n<li>36 bytes for the previous output (32 bytes hash + 4 bytes index)</li>\n<li>4 bytes for the sequence</li>\n<li>1 byte for the script sig length</li>\n<li>26 bytes for the witness (rounded down from 26.75, with the 75% segwit discount applied):\n<ul>\n<li>1 byte for the items count</li>\n<li>1 byte for the signature length</li>\n<li>71 bytes for the signature</li>\n<li>1 byte for the public key length</li>\n<li>33 bytes for the public key</li>\n</ul>\n</li>\n</ul>\n<p>The p2wpkh dust threshold is then <code>(31 + 67) * 3000 / 1000 = 294 satoshis</code></p>\n<h3><a><svg><path></path></svg></a>Pay to witness script hash (p2wsh)</h3>\n<p>A p2wsh output is 43 bytes:</p>\n<ul>\n<li>8 bytes for the output amount</li>\n<li>1 byte for the script length</li>\n<li>34 bytes for the script (<code>OP_0</code> <code>32</code> 32-bytes)</li>\n</ul>\n<p>A p2wsh input doesn\'t have a fixed size, since it depends on the underlying\nscript, so we use 67 bytes as a lower bound.</p>\n<p>The p2wsh dust threshold is then <code>(43 + 67) * 3000 / 1000 = 330 satoshis</code></p>\n<h3><a><svg><path></path></svg></a>Unknown segwit versions</h3>\n<p>Unknown segwit outputs are at most 51 bytes:</p>\n<ul>\n<li>8 bytes for the output amount</li>\n<li>1 byte for the script length</li>\n<li>42 bytes for the script (<code>OP_1</code> through <code>OP_16</code> inclusive, followed by a single push of 2 to 40 bytes)</li>\n</ul>\n<p>The input doesn\'t have a fixed size, since it depends on the underlying\nscript, so we use 67 bytes as a lower bound.</p>\n<p>The unknown segwit version dust threshold is then <code>(51 + 67) * 3000 / 1000 = 354 satoshis</code></p>\n<h2><a><svg><path></path></svg></a>Commitment Transaction Construction</h2>\n<p>This section ties the previous sections together to detail the\nalgorithm for constructing the commitment transaction for one peer:\ngiven that peer\'s <code>dust_limit_satoshis</code>, the current <code>feerate_per_kw</code>,\nthe amounts due to each peer (<code>to_local</code> and <code>to_remote</code>), and all\ncommitted HTLCs:</p>\n<ol>\n<li>Initialize the commitment transaction input and locktime, as specified\nin <a>Commitment Transaction</a>.</li>\n<li>Calculate which committed HTLCs need to be trimmed (see <a>Trimmed Outputs</a>).</li>\n<li>Calculate the base <a>commitment transaction fee</a>.</li>\n<li>Subtract this base fee from the funder (either <code>to_local</code> or <code>to_remote</code>).\nIf <code>option_anchors</code> applies to the commitment transaction,\nalso subtract two times the fixed anchor size of 330 sats from the funder\n(either <code>to_local</code> or <code>to_remote</code>).</li>\n<li>For every offered HTLC, if it is not trimmed, add an\n<a>offered HTLC output</a>.</li>\n<li>For every received HTLC, if it is not trimmed, add an\n<a>received HTLC output</a>.</li>\n<li>If the <code>to_local</code> amount is greater or equal to <code>dust_limit_satoshis</code>,\nadd a <a><code>to_local</code> output</a>.</li>\n<li>If the <code>to_remote</code> amount is greater or equal to <code>dust_limit_satoshis</code>,\nadd a <a><code>to_remote</code> output</a>.</li>\n<li>If <code>option_anchors</code> applies to the commitment transaction:\n<ul>\n<li>if <code>to_local</code> exists or there are untrimmed HTLCs, add a <a><code>to_local_anchor</code> output</a></li>\n<li>if <code>to_remote</code> exists or there are untrimmed HTLCs, add a <a><code>to_remote_anchor</code> output</a></li>\n</ul>\n</li>\n<li>Sort the outputs into <a>BIP 69+CLTV order</a>.</li>\n</ol>\n<h1><a><svg><path></path></svg></a>Keys</h1>\n<h2><a><svg><path></path></svg></a>Key Derivation</h2>\n<p>Each commitment transaction uses a unique <code>localpubkey</code>, and a <code>remotepubkey</code>.\nThe HTLC-success and HTLC-timeout transactions use <code>local_delayedpubkey</code> and <code>revocationpubkey</code>.\nThese are changed for every transaction based on the <code>per_commitment_point</code>.\nFor <code>option_static_remotekey</code> and <code>option_anchors</code>, no key rotation\nis applied to <code>remotepubkey</code>.</p>\n<p>The reason for key change is so that trustless watching for revoked\ntransactions can be outsourced. Such a <em>watcher</em> should not be able to\ndetermine the contents of a commitment transaction — even if the <em>watcher</em> knows\nwhich transaction ID to watch for and can make a reasonable guess\nas to which HTLCs and balances may be included. Nonetheless, to\navoid storage of every commitment transaction, a <em>watcher</em> can be given the\n<code>per_commitment_secret</code> values (which can be stored compactly) and the\n<code>revocation_basepoint</code> and <code>delayed_payment_basepoint</code> used to regenerate\nthe scripts required for the penalty transaction; thus, a <em>watcher</em> need only be\ngiven (and store) the signatures for each penalty input.</p>\n<p>Changing the <code>localpubkey</code> every time ensures that commitment\ntransaction ID cannot be guessed except in the trivial case where there is no\n<code>to_local</code> output, as every commitment transaction uses an ID\nin its output script. Splitting the <code>local_delayedpubkey</code>, which is required for\nthe penalty transaction, allows it to be shared with the <em>watcher</em> without\nrevealing <code>localpubkey</code>; even if both peers use the same <em>watcher</em>, nothing is revealed.</p>\n<p>Finally, even in the case of normal unilateral close, the HTLC-success\nand/or HTLC-timeout transactions do not reveal anything to the\n<em>watcher</em>, as it does not know the corresponding <code>per_commitment_secret</code> and\ncannot relate the <code>local_delayedpubkey</code> or <code>revocationpubkey</code> with their bases.</p>\n<p>For efficiency, keys are generated from a series of per-commitment secrets\nthat are generated from a single seed, which allows the receiver to compactly\nstore them (see <a>below</a>).</p>\n<h3><a><svg><path></path></svg></a><code>localpubkey</code>, <code>local_htlcpubkey</code>, <code>remote_htlcpubkey</code>, <code>local_delayedpubkey</code>, and <code>remote_delayedpubkey</code> Derivation</h3>\n<p>These pubkeys are simply generated by addition from their base points:</p>\n<div><pre><code>pubkey = basepoint + SHA256(per_commitment_point || basepoint) * G\n</code></pre></div>\n<p>The <code>localpubkey</code> uses the local node\'s <code>payment_basepoint</code>;\nThe <code>remotepubkey</code> uses the remote node\'s <code>payment_basepoint</code>;\nthe <code>local_htlcpubkey</code> uses the local node\'s <code>htlc_basepoint</code>;\nthe <code>remote_htlcpubkey</code> uses the remote node\'s <code>htlc_basepoint</code>;\nthe <code>local_delayedpubkey</code> uses the local node\'s <code>delayed_payment_basepoint</code>;\nand the <code>remote_delayedpubkey</code> uses the remote node\'s <code>delayed_payment_basepoint</code>.</p>\n<p>The corresponding private keys can be similarly derived, if the basepoint\nsecrets are known (i.e. the private keys corresponding to <code>localpubkey</code>, <code>local_htlcpubkey</code>, and <code>local_delayedpubkey</code> only):</p>\n<div><pre><code>privkey = basepoint_secret + SHA256(per_commitment_point || basepoint)\n</code></pre></div>\n<h3><a><svg><path></path></svg></a><code>remotepubkey</code> Derivation</h3>\n<p>If <code>option_static_remotekey</code> or <code>option_anchors</code> is negotiated, the <code>remotepubkey</code> is simply the\nremote node\'s <code>payment_basepoint</code>, otherwise it is calculated as above using\nthe remote node\'s <code>payment_basepoint</code>.</p>\n<p>The simplified derivation means that a node can spend a commitment\ntransaction even if it has lost data and doesn\'t know the\ncorresponding <code>per_commitment_point</code>.  A watchtower could correlate\ntransactions given to it which only have a <code>to_remote</code> output if it\nsees one of them onchain, but such transactions do not need any\nenforcement and should not be handed to a watchtower.</p>\n<h3><a><svg><path></path></svg></a><code>revocationpubkey</code> Derivation</h3>\n<p>The <code>revocationpubkey</code> is a blinded key: when the local node wishes to create a new\ncommitment for the remote node, it uses its own <code>revocation_basepoint</code> and the remote\nnode\'s <code>per_commitment_point</code> to derive a new <code>revocationpubkey</code> for the\ncommitment. After the remote node reveals the\n<code>per_commitment_secret</code> used (thereby revoking that commitment), the local node\ncan then derive the <code>revocationprivkey</code>, as it now knows the two secrets\nnecessary to derive the key (<code>revocation_basepoint_secret</code> and\n<code>per_commitment_secret</code>).</p>\n<p>The <code>per_commitment_point</code> is generated using elliptic-curve multiplication:</p>\n<div><pre><code>per_commitment_point = per_commitment_secret * G\n</code></pre></div>\n<p>And this is used to derive the revocation pubkey from the remote node\'s\n<code>revocation_basepoint</code>:</p>\n<div><pre><code>revocationpubkey = revocation_basepoint * SHA256(revocation_basepoint || per_commitment_point) + per_commitment_point * SHA256(per_commitment_point || revocation_basepoint)\n</code></pre></div>\n<p>This construction ensures that neither the node providing the\nbasepoint nor the node providing the <code>per_commitment_point</code> can know the\nprivate key without the other node\'s secret.</p>\n<p>The corresponding private key can be derived once the <code>per_commitment_secret</code>\nis known:</p>\n<div><pre><code>revocationprivkey = revocation_basepoint_secret * SHA256(revocation_basepoint || per_commitment_point) + per_commitment_secret * SHA256(per_commitment_point || revocation_basepoint)\n</code></pre></div>\n<h3><a><svg><path></path></svg></a>Per-commitment Secret Requirements</h3>\n<p>A node:</p>\n<ul>\n<li>MUST select an unguessable 256-bit seed for each connection,</li>\n<li>MUST NOT reveal the seed.</li>\n</ul>\n<p>Up to (2^48 - 1) per-commitment secrets can be generated.</p>\n<p>The first secret used:</p>\n<ul>\n<li>MUST be index 281474976710655,\n<ul>\n<li>and from there, the index is decremented.</li>\n</ul>\n</li>\n</ul>\n<p>The I\'th secret P:</p>\n<ul>\n<li>MUST match the output of this algorithm:</li>\n</ul>\n<div><pre><code>generate_from_seed(seed, I):\n    P = seed\n    for B in 47 down to 0:\n        if B set in I:\n            flip(B) in P\n            P = SHA256(P)\n    return P\n</code></pre></div>\n<p>Where "flip(B)" alternates the (B mod 8) bit of the (B div 8)\nbyte of the value.  So, "flip(0) in e3b0..." is "e2b0...", and\n"flip(10) in "e3b0..." is "e3b4...".</p>\n<p>The receiving node:</p>\n<ul>\n<li>MAY store all previous per-commitment secrets.</li>\n<li>MAY calculate them from a compact representation, as described below.</li>\n</ul>\n<h2><a><svg><path></path></svg></a>Efficient Per-commitment Secret Storage</h2>\n<p>The receiver of a series of secrets can store them compactly in an\narray of 49 (value,index) pairs. Because, for a given secret on a\n2^X boundary, all secrets up to the next 2^X boundary can be derived;\nand secrets are always received in descending order starting at\n<code>0xFFFFFFFFFFFF</code>.</p>\n<p>In binary, it\'s helpful to think of any index in terms of a <em>prefix</em>,\nfollowed by some trailing 0s. You can derive the secret for any\nindex that matches this <em>prefix</em>.</p>\n<p>For example, secret <code>0xFFFFFFFFFFF0</code> allows the secrets to be derived for\n<code>0xFFFFFFFFFFF1</code> through <code>0xFFFFFFFFFFFF</code>, inclusive; and secret <code>0xFFFFFFFFFF08</code>\nallows the secrets to be derived for <code>0xFFFFFFFFFF09</code> through <code>0xFFFFFFFFFF0F</code>,\ninclusive.</p>\n<p>This is done using a slight generalization of <code>generate_from_seed</code> above:</p>\n<div><pre><code># Return I\'th secret given base secret whose index has bits..47 the same.\nderive_secret(base, bits, I):\n    P = base\n    for B in bits - 1 down to 0:\n        if B set in I:\n            flip(B) in P\n            P = SHA256(P)\n    return P\n</code></pre></div>\n<p>Only one secret for each unique prefix need be saved; in effect, the number of\ntrailing 0s is counted, and this determines where in the storage array the\nsecret is stored:</p>\n<div><pre><code># a.k.a. count trailing 0s\nwhere_to_put_secret(I):\n    for B in 0 to 47:\n        if testbit(I) in B == 1:\n            return B\n    # I = 0, this is the seed.\n    return 48\n</code></pre></div>\n<p>A double-check, that all previous secrets derive correctly, is needed;\nif this check fails, the secrets were not generated from the same seed:</p>\n<div><pre><code>insert_secret(secret, I):\n    B = where_to_put_secret(I)\n\n    # This tracks the index of the secret in each bucket across the traversal.\n    for b in 0 to B:\n        if derive_secret(secret, B, known[b].index) != known[b].secret:\n            error The secret for I is incorrect\n            return\n\n    # Assuming this automatically extends known[] as required.\n    known[B].index = I\n    known[B].secret = secret\n</code></pre></div>\n<p>Finally, if an unknown secret at index <code>I</code> needs be derived, it must be\ndiscovered which known secret can be used to derive it. The simplest\nmethod is iterating over all the known secrets, and testing if each\ncan be used to derive the unknown secret:</p>\n<div><pre><code>derive_old_secret(I):\n    for b in 0 to len(secrets):\n        # Mask off the non-zero prefix of the index.\n        MASK = ~((1 &lt;&lt; b) - 1)\n        if (I &amp; MASK) == secrets[b].index:\n            return derive_secret(known, i, I)\n    error Index \'I\' hasn\'t been received yet.\n</code></pre></div>\n<p>This looks complicated, but remember that the index in entry <code>b</code> has\n<code>b</code> trailing 0s; the mask and compare simply checks if the index\nat each bucket is a prefix of the desired index.</p>\n<h1><a><svg><path></path></svg></a>Appendix A: Expected Weights</h1>\n<h2><a><svg><path></path></svg></a>Expected Weight of the Commitment Transaction</h2>\n<p>The <em>expected weight</em> of a commitment transaction is calculated as follows:</p>\n<div><pre><code>p2wsh: 34 bytes\n\t- OP_0: 1 byte\n\t- OP_DATA: 1 byte (witness_script_SHA256 length)\n\t- witness_script_SHA256: 32 bytes\n\np2wpkh: 22 bytes\n\t- OP_0: 1 byte\n\t- OP_DATA: 1 byte (public_key_HASH160 length)\n\t- public_key_HASH160: 20 bytes\n\nmulti_sig: 71 bytes\n\t- OP_2: 1 byte\n\t- OP_DATA: 1 byte (pub_key_alice length)\n\t- pub_key_alice: 33 bytes\n\t- OP_DATA: 1 byte (pub_key_bob length)\n\t- pub_key_bob: 33 bytes\n\t- OP_2: 1 byte\n\t- OP_CHECKMULTISIG: 1 byte\n\nwitness: 222 bytes\n\t- number_of_witness_elements: 1 byte\n\t- nil_length: 1 byte\n\t- sig_alice_length: 1 byte\n\t- sig_alice: 73 bytes\n\t- sig_bob_length: 1 byte\n\t- sig_bob: 73 bytes\n\t- witness_script_length: 1 byte\n\t- witness_script (multi_sig)\n\nfunding_input: 41 bytes\n\t- previous_out_point: 36 bytes\n\t\t- hash: 32 bytes\n\t\t- index: 4 bytes\n\t- var_int: 1 byte (script_sig length)\n\t- script_sig: 0 bytes\n\t- witness &lt;----\t"witness" is used instead of "script_sig" for\n \t\t\ttransaction validation; however, "witness" is stored\n \t\t\tseparately, and the cost for its size is smaller. So,\n \t\t    the calculation of ordinary data is separated\n \t\t\tfrom the witness data.\n\t- sequence: 4 bytes\n\noutput_paying_to_local: 43 bytes\n\t- value: 8 bytes\n\t- var_int: 1 byte (pk_script length)\n\t- pk_script (p2wsh): 34 bytes\n\noutput_paying_to_remote (no option_anchors): 31 bytes\n\t- value: 8 bytes\n\t- var_int: 1 byte (pk_script length)\n\t- pk_script (p2wpkh): 22 bytes\n\noutput_paying_to_remote (option_anchors): 43 bytes\n\t- value: 8 bytes\n\t- var_int: 1 byte (pk_script length)\n\t- pk_script (p2wsh): 34 bytes\n\noutput_anchor (option_anchors): 43 bytes\n\t- value: 8 bytes\n\t- var_int: 1 byte (pk_script length)\n\t- pk_script (p2wsh): 34 bytes\n\nhtlc_output: 43 bytes\n\t- value: 8 bytes\n\t- var_int: 1 byte (pk_script length)\n\t- pk_script (p2wsh): 34 bytes\n\n witness_header: 2 bytes\n\t- flag: 1 byte\n\t- marker: 1 byte\n\n commitment_transaction (no option_anchors): 125 + 43 * num-htlc-outputs bytes\n\t- version: 4 bytes\n\t- witness_header &lt;---- part of the witness data\n\t- count_tx_in: 1 byte\n\t- tx_in: 41 bytes\n\t\tfunding_input\n\t- count_tx_out: 1 byte\n\t- tx_out: 74 + 43 * num-htlc-outputs bytes\n\t\toutput_paying_to_remote,\n\t\toutput_paying_to_local,\n\t\t....htlc_output\'s...\n\t- lock_time: 4 bytes\n\n commitment_transaction (option_anchors): 225 + 43 * num-htlc-outputs bytes\n\t- version: 4 bytes\n\t- witness_header &lt;---- part of the witness data\n\t- count_tx_in: 1 byte\n\t- tx_in: 41 bytes\n\t\tfunding_input\n\t- count_tx_out: 3 byte\n\t- tx_out: 172 + 43 * num-htlc-outputs bytes\n\t\toutput_paying_to_remote,\n\t\toutput_paying_to_local,\n\t\toutput_anchor,\n\t\toutput_anchor,\n\t\t....htlc_output\'s...\n\t- lock_time: 4 bytes\n</code></pre></div>\n<p>Multiplying non-witness data by 4 results in a weight of:</p>\n<div><pre><code>// 500 + 172 * num-htlc-outputs weight (no option_anchors)\n// 900 + 172 * num-htlc-outputs weight (option_anchors)\ncommitment_transaction_weight = 4 * commitment_transaction\n\n// 224 weight\nwitness_weight = witness_header + witness\n\noverall_weight (no option_anchors) = 500 + 172 * num-htlc-outputs + 224 weight\noverall_weight (option_anchors) = 900 + 172 * num-htlc-outputs + 224 weight\n</code></pre></div>\n<h2><a><svg><path></path></svg></a>Expected Weight of HTLC-timeout and HTLC-success Transactions</h2>\n<p>The <em>expected weight</em> of an HTLC transaction is calculated as follows:</p>\n<div><pre><code>accepted_htlc_script: 140 bytes (143 bytes with option_anchors)\n    - OP_DUP: 1 byte\n    - OP_HASH160: 1 byte\n    - OP_DATA: 1 byte (RIPEMD160(SHA256(revocationpubkey)) length)\n    - RIPEMD160(SHA256(revocationpubkey)): 20 bytes\n    - OP_EQUAL: 1 byte\n    - OP_IF: 1 byte\n    - OP_CHECKSIG: 1 byte\n    - OP_ELSE: 1 byte\n    - OP_DATA: 1 byte (remotepubkey length)\n    - remotepubkey: 33 bytes\n    - OP_SWAP: 1 byte\n    - OP_SIZE: 1 byte\n    - OP_DATA: 1 byte (32 length)\n    - 32: 1 byte\n    - OP_EQUAL: 1 byte\n    - OP_IF: 1 byte\n    - OP_HASH160: 1 byte\n\t- OP_DATA: 1 byte (RIPEMD160(payment_hash) length)\n\t- RIPEMD160(payment_hash): 20 bytes\n    - OP_EQUALVERIFY: 1 byte\n    - 2: 1 byte\n    - OP_SWAP: 1 byte\n\t- OP_DATA: 1 byte (localpubkey length)\n\t- localpubkey: 33 bytes\n    - 2: 1 byte\n    - OP_CHECKMULTISIG: 1 byte\n    - OP_ELSE: 1 byte\n    - OP_DROP: 1 byte\n\t- OP_DATA: 1 byte (cltv_expiry length)\n\t- cltv_expiry: 4 bytes\n    - OP_CHECKLOCKTIMEVERIFY: 1 byte\n    - OP_DROP: 1 byte\n    - OP_CHECKSIG: 1 byte\n    - OP_ENDIF: 1 byte\n    - OP_1: 1 byte (option_anchors)\n    - OP_CHECKSEQUENCEVERIFY: 1 byte (option_anchors)\n    - OP_DROP: 1 byte (option_anchors)\n    - OP_ENDIF: 1 byte\n\noffered_htlc_script: 133 bytes (136 bytes with option_anchors)\n    - OP_DUP: 1 byte\n    - OP_HASH160: 1 byte\n    - OP_DATA: 1 byte (RIPEMD160(SHA256(revocationpubkey)) length)\n    - RIPEMD160(SHA256(revocationpubkey)): 20 bytes\n    - OP_EQUAL: 1 byte\n    - OP_IF: 1 byte\n    - OP_CHECKSIG: 1 byte\n    - OP_ELSE: 1 byte\n\t- OP_DATA: 1 byte (remotepubkey length)\n\t- remotepubkey: 33 bytes\n\t- OP_SWAP: 1 byte\n\t- OP_SIZE: 1 byte\n\t- OP_DATA: 1 byte (32 length)\n\t- 32: 1 byte\n\t- OP_EQUAL: 1 byte\n\t- OP_NOTIF: 1 byte\n\t- OP_DROP: 1 byte\n\t- 2: 1 byte\n\t- OP_SWAP: 1 byte\n\t- OP_DATA: 1 byte (localpubkey length)\n\t- localpubkey: 33 bytes\n\t- 2: 1 byte\n\t- OP_CHECKMULTISIG: 1 byte\n\t- OP_ELSE: 1 byte\n\t- OP_HASH160: 1 byte\n\t- OP_DATA: 1 byte (RIPEMD160(payment_hash) length)\n\t- RIPEMD160(payment_hash): 20 bytes\n\t- OP_EQUALVERIFY: 1 byte\n\t- OP_CHECKSIG: 1 byte\n\t- OP_ENDIF: 1 byte\n    - OP_1: 1 byte (option_anchors)\n    - OP_CHECKSEQUENCEVERIFY: 1 byte (option_anchors)\n    - OP_DROP: 1 byte (option_anchors)\n    - OP_ENDIF: 1 byte\n\ntimeout_witness: 285 bytes (288 bytes with option_anchors)\n\t- number_of_witness_elements: 1 byte\n\t- nil_length: 1 byte\n\t- sig_alice_length: 1 byte\n\t- sig_alice: 73 bytes\n\t- sig_bob_length: 1 byte\n\t- sig_bob: 73 bytes\n\t- nil_length: 1 byte\n\t- witness_script_length: 1 byte\n\t- witness_script (offered_htlc_script)\n\nsuccess_witness: 324 bytes (327 bytes with option_anchors)\n\t- number_of_witness_elements: 1 byte\n\t- nil_length: 1 byte\n\t- sig_alice_length: 1 byte\n\t- sig_alice: 73 bytes\n\t- sig_bob_length: 1 byte\n\t- sig_bob: 73 bytes\n\t- preimage_length: 1 byte\n\t- preimage: 32 bytes\n\t- witness_script_length: 1 byte\n\t- witness_script (accepted_htlc_script)\n\ncommitment_input: 41 bytes\n\t- previous_out_point: 36 bytes\n\t\t- hash: 32 bytes\n\t\t- index: 4 bytes\n\t- var_int: 1 byte (script_sig length)\n\t- script_sig: 0 bytes\n\t- witness (success_witness or timeout_witness)\n\t- sequence: 4 bytes\n\nhtlc_output: 43 bytes\n\t- value: 8 bytes\n\t- var_int: 1 byte (pk_script length)\n\t- pk_script (p2wsh): 34 bytes\n\nhtlc_transaction:\n\t- version: 4 bytes\n\t- witness_header &lt;---- part of the witness data\n\t- count_tx_in: 1 byte\n\t- tx_in: 41 bytes\n\t\tcommitment_input\n\t- count_tx_out: 1 byte\n\t- tx_out: 43\n\t\thtlc_output\n\t- lock_time: 4 bytes\n</code></pre></div>\n<p>Multiplying non-witness data by 4 results in a weight of 376. Adding\nthe witness data for each case (285 or 288 + 2 for HTLC-timeout, 324 or 327 + 2 for\nHTLC-success) results in weights of:</p>\n<div><pre><code>663 (HTLC-timeout) (666 with option_anchors))\n703 (HTLC-success) (706 with option_anchors))\n            - (really 702 and 705, but we use these numbers for historical reasons)\n</code></pre></div>\n<h1><a><svg><path></path></svg></a>Appendix B: Funding Transaction Test Vectors</h1>\n<p>In the following:</p>\n<ul>\n<li>It\'s assumed that <em>local</em> is the funder.</li>\n<li>Private keys are displayed as 32 bytes plus a trailing 1 (Bitcoin\'s convention for "compressed" private keys, i.e. keys for which the public key is compressed).</li>\n<li>Transaction signatures are all deterministic, using RFC6979 (using HMAC-SHA256). A valid signature MUST sign all inputs and outputs of the relevant transaction (i.e. MUST be created with a <code>SIGHASH_ALL</code> <a>signature hash</a>), unless explicitly stated otherwise. Note that clients MUST send the signature in compact encoding and not in Bitcoin-script format, thus the signature hash byte is not transmitted.</li>\n</ul>\n<p>The input for the funding transaction was created using a test chain\nwith the following first two blocks; the second block contains a spendable\ncoinbase (note that such a P2PKH input is inadvisable, as detailed in <a>BOLT #2</a>, but provides the simplest example):</p>\n<div><pre><code>Block 0 (genesis): 0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4adae5494dffff7f20020000000101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\nBlock 1: 0000002006226e46111a0b59caaf126043eb5bbf28c34f3a5e332a1fc7b2b73cf188910fadbb20ea41a8423ea937e76e8151636bf6093b70eaff942930d20576600521fdc30f9858ffff7f20000000000101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff0100f2052a010000001976a9143ca33c2e4446f4a305f23c80df8ad1afdcf652f988ac00000000\nBlock 1 coinbase transaction: 01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff0100f2052a010000001976a9143ca33c2e4446f4a305f23c80df8ad1afdcf652f988ac00000000\nBlock 1 coinbase privkey: 6bd078650fcee8444e4e09825227b801a1ca928debb750eb36e6d56124bb20e801\n# privkey in base58: cRCH7YNcarfvaiY1GWUKQrRGmoezvfAiqHtdRvxe16shzbd7LDMz\n# pubkey in base68: mm3aPLSv9fBrbS68JzurAMp4xGoddJ6pSf\n</code></pre></div>\n<p>The funding transaction is paid to the following pubkeys:</p>\n<div><pre><code>local_funding_pubkey: 023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb\nremote_funding_pubkey: 030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c1\n# funding witness script = 5221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae\n</code></pre></div>\n<p>The funding transaction has a single input and a change output (order\ndetermined by BIP69 in this case):</p>\n<div><pre><code>input txid: fd2105607605d2302994ffea703b09f66b6351816ee737a93e42a841ea20bbad\ninput index: 0\ninput satoshis: 5000000000\nfunding satoshis: 10000000\n# funding witness script = 5221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae\n# feerate_per_kw: 15000\nchange satoshis: 4989986080\nfunding output: 0\n</code></pre></div>\n<p>The resulting funding transaction is:</p>\n<div><pre><code>funding tx: 0200000001adbb20ea41a8423ea937e76e8151636bf6093b70eaff942930d20576600521fd000000006b48304502210090587b6201e166ad6af0227d3036a9454223d49a1f11839c1a362184340ef0240220577f7cd5cca78719405cbf1de7414ac027f0239ef6e214c90fcaab0454d84b3b012103535b32d5eb0a6ed0982a0479bbadc9868d9836f6ba94dd5a63be16d875069184ffffffff028096980000000000220020c015c4a6be010e21657068fc2e6a9d02b27ebe4d490a25846f7237f104d1a3cd20256d29010000001600143ca33c2e4446f4a305f23c80df8ad1afdcf652f900000000\n# txid: 8984484a580b825b9972d7adb15050b3ab624ccd731946b3eeddb92f4e7ef6be\n</code></pre></div>\n<h1><a><svg><path></path></svg></a>Appendix C: Commitment and HTLC Transaction Test Vectors</h1>\n<p>In the following:</p>\n<ul>\n<li><em>local</em> transactions are considered, which implies that all payments to <em>local</em> are delayed.</li>\n<li>It\'s assumed that <em>local</em> is the funder.</li>\n<li>Private keys are displayed as 32 bytes plus a trailing 1 (Bitcoin\'s convention for "compressed" private keys, i.e. keys for which the public key is compressed).</li>\n<li>Transaction signatures are all deterministic, using RFC6979 (using HMAC-SHA256).</li>\n</ul>\n<p>To start, common basic parameters for each test vector are defined: the\nHTLCs are not used for the first "simple commitment tx with no HTLCs" test,\nand HTLCs 5 and 6 are only used in the "same amount and preimage" test.</p>\n<div><pre><code>funding_tx_id: 8984484a580b825b9972d7adb15050b3ab624ccd731946b3eeddb92f4e7ef6be\nfunding_output_index: 0\nfunding_amount_satoshi: 10000000\ncommitment_number: 42\nlocal_delay: 144\nlocal_dust_limit_satoshi: 546\nhtlc 0 direction: remote-&gt;local\nhtlc 0 amount_msat: 1000000\nhtlc 0 expiry: 500\nhtlc 0 payment_preimage: 0000000000000000000000000000000000000000000000000000000000000000\nhtlc 1 direction: remote-&gt;local\nhtlc 1 amount_msat: 2000000\nhtlc 1 expiry: 501\nhtlc 1 payment_preimage: 0101010101010101010101010101010101010101010101010101010101010101\nhtlc 2 direction: local-&gt;remote\nhtlc 2 amount_msat: 2000000\nhtlc 2 expiry: 502\nhtlc 2 payment_preimage: 0202020202020202020202020202020202020202020202020202020202020202\nhtlc 3 direction: local-&gt;remote\nhtlc 3 amount_msat: 3000000\nhtlc 3 expiry: 503\nhtlc 3 payment_preimage: 0303030303030303030303030303030303030303030303030303030303030303\nhtlc 4 direction: remote-&gt;local\nhtlc 4 amount_msat: 4000000\nhtlc 4 expiry: 504\nhtlc 4 payment_preimage: 0404040404040404040404040404040404040404040404040404040404040404\nhtlc 5 direction: local-&gt;remote\nhtlc 5 amount_msat: 5000000\nhtlc 5 expiry: 506\nhtlc 5 payment_preimage: 0505050505050505050505050505050505050505050505050505050505050505\nhtlc 6 direction: local-&gt;remote\nhtlc 6 amount_msat: 5000001\nhtlc 6 expiry: 505\nhtlc 6 payment_preimage: 0505050505050505050505050505050505050505050505050505050505050505\n</code></pre></div>\n<p>Here are the points used to derive the obscuring factor for the commitment number:</p>\n<div><pre><code>local_payment_basepoint: 034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa\nremote_payment_basepoint: 032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991\n# obscured commitment number = 0x2bb038521914 ^ 42\n</code></pre></div>\n<p>And, here are the keys needed to create the transactions:</p>\n<div><pre><code>local_funding_privkey: 30ff4956bbdd3222d44cc5e8a1261dab1e07957bdac5ae88fe3261ef321f374901\nlocal_funding_pubkey: 023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb\nremote_funding_pubkey: 030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c1\nlocal_privkey: bb13b121cdc357cd2e608b0aea294afca36e2b34cf958e2e6451a2f27469449101\nlocalpubkey: 030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e7\nremotepubkey: 0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b\nlocal_delayedpubkey: 03fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c\nlocal_revocation_pubkey: 0212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b19\n# funding wscript = 5221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae\n</code></pre></div>\n<p>And, here are the test vectors themselves:</p>\n<div><pre><code>name: simple commitment tx with no HTLCs\nto_local_msat: 7000000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 15000\n# base commitment transaction fee = 10860\n# actual commitment transaction fee = 10860\n# to_local amount 6989140 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3045022100f51d2e566a70ba740fc5d8c0f07b9b93d2ed741c3c0860c613173de7d39e7968022041376d520e9c0e1ad52248ddf4b22e12be8763007df977253ef45a4ca3bdb7c0\n# local_signature = 3044022051b75c73198c6deee1a875871c3961832909acd297c6b908d59e3319e5185a46022055c419379c5051a78d00dbbce11b5b664a0c22815fbcc6fcef6b1937c3836939\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8002c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de84311054a56a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022051b75c73198c6deee1a875871c3961832909acd297c6b908d59e3319e5185a46022055c419379c5051a78d00dbbce11b5b664a0c22815fbcc6fcef6b1937c383693901483045022100f51d2e566a70ba740fc5d8c0f07b9b93d2ed741c3c0860c613173de7d39e7968022041376d520e9c0e1ad52248ddf4b22e12be8763007df977253ef45a4ca3bdb7c001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with all five HTLCs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 0\n# base commitment transaction fee = 0\n# actual commitment transaction fee = 0\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #0 received amount 1000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6988000 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 304402204fd4928835db1ccdfc40f5c78ce9bd65249b16348df81f0c44328dcdefc97d630220194d3869c38bc732dd87d13d2958015e2fc16829e74cd4377f84d215c0b70606\n# local_signature = 30440220275b0c325a5e9355650dc30c0eccfbc7efb23987c24b556b9dfdd40effca18d202206caceb2c067836c51f296740c7ae807ffcbfbf1dd3a0d56b6de9a5b247985f06\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8007e80300000000000022002052bfef0479d7b293c27e0f1eb294bea154c63a3294ef092c19af51409bce0e2ad007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110e0a06a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004730440220275b0c325a5e9355650dc30c0eccfbc7efb23987c24b556b9dfdd40effca18d202206caceb2c067836c51f296740c7ae807ffcbfbf1dd3a0d56b6de9a5b247985f060147304402204fd4928835db1ccdfc40f5c78ce9bd65249b16348df81f0c44328dcdefc97d630220194d3869c38bc732dd87d13d2958015e2fc16829e74cd4377f84d215c0b7060601475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 5\n# signature for output #0 (htlc-success for htlc #0)\nremote_htlc_signature = 304402206a6e59f18764a5bf8d4fa45eebc591566689441229c918b480fb2af8cc6a4aeb02205248f273be447684b33e3c8d1d85a8e0ca9fa0bae9ae33f0527ada9c162919a6\n# local_htlc_signature = 304402207cb324fa0de88f452ffa9389678127ebcf4cabe1dd848b8e076c1a1962bf34720220116ed922b12311bd602d67e60d2529917f21c5b82f25ff6506c0f87886b4dfd5\nhtlc_success_tx (htlc #0): 020000000001018154ecccf11a5fb56c39654c4deb4d2296f83c69268280b94d021370c94e219700000000000000000001e8030000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402206a6e59f18764a5bf8d4fa45eebc591566689441229c918b480fb2af8cc6a4aeb02205248f273be447684b33e3c8d1d85a8e0ca9fa0bae9ae33f0527ada9c162919a60147304402207cb324fa0de88f452ffa9389678127ebcf4cabe1dd848b8e076c1a1962bf34720220116ed922b12311bd602d67e60d2529917f21c5b82f25ff6506c0f87886b4dfd5012000000000000000000000000000000000000000000000000000000000000000008a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac686800000000\n# signature for output #1 (htlc-timeout for htlc #2)\nremote_htlc_signature = 3045022100d5275b3619953cb0c3b5aa577f04bc512380e60fa551762ce3d7a1bb7401cff9022037237ab0dac3fe100cde094e82e2bed9ba0ed1bb40154b48e56aa70f259e608b\n# local_htlc_signature = 3045022100c89172099507ff50f4c925e6c5150e871fb6e83dd73ff9fbb72f6ce829a9633f02203a63821d9162e99f9be712a68f9e589483994feae2661e4546cd5b6cec007be5\nhtlc_timeout_tx (htlc #2): 020000000001018154ecccf11a5fb56c39654c4deb4d2296f83c69268280b94d021370c94e219701000000000000000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100d5275b3619953cb0c3b5aa577f04bc512380e60fa551762ce3d7a1bb7401cff9022037237ab0dac3fe100cde094e82e2bed9ba0ed1bb40154b48e56aa70f259e608b01483045022100c89172099507ff50f4c925e6c5150e871fb6e83dd73ff9fbb72f6ce829a9633f02203a63821d9162e99f9be712a68f9e589483994feae2661e4546cd5b6cec007be501008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #2 (htlc-success for htlc #1)\nremote_htlc_signature = 304402201b63ec807771baf4fdff523c644080de17f1da478989308ad13a58b51db91d360220568939d38c9ce295adba15665fa68f51d967e8ed14a007b751540a80b325f202\n# local_htlc_signature = 3045022100def389deab09cee69eaa1ec14d9428770e45bcbe9feb46468ecf481371165c2f022015d2e3c46600b2ebba8dcc899768874cc6851fd1ecb3fffd15db1cc3de7e10da\nhtlc_success_tx (htlc #1): 020000000001018154ecccf11a5fb56c39654c4deb4d2296f83c69268280b94d021370c94e219702000000000000000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402201b63ec807771baf4fdff523c644080de17f1da478989308ad13a58b51db91d360220568939d38c9ce295adba15665fa68f51d967e8ed14a007b751540a80b325f20201483045022100def389deab09cee69eaa1ec14d9428770e45bcbe9feb46468ecf481371165c2f022015d2e3c46600b2ebba8dcc899768874cc6851fd1ecb3fffd15db1cc3de7e10da012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #3 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100daee1808f9861b6c3ecd14f7b707eca02dd6bdfc714ba2f33bc8cdba507bb182022026654bf8863af77d74f51f4e0b62d461a019561bb12acb120d3f7195d148a554\n# local_htlc_signature = 30440220643aacb19bbb72bd2b635bc3f7375481f5981bace78cdd8319b2988ffcc6704202203d27784ec8ad51ed3bd517a05525a5139bb0b755dd719e0054332d186ac08727\nhtlc_timeout_tx (htlc #3): 020000000001018154ecccf11a5fb56c39654c4deb4d2296f83c69268280b94d021370c94e219703000000000000000001b80b0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100daee1808f9861b6c3ecd14f7b707eca02dd6bdfc714ba2f33bc8cdba507bb182022026654bf8863af77d74f51f4e0b62d461a019561bb12acb120d3f7195d148a554014730440220643aacb19bbb72bd2b635bc3f7375481f5981bace78cdd8319b2988ffcc6704202203d27784ec8ad51ed3bd517a05525a5139bb0b755dd719e0054332d186ac0872701008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #4 (htlc-success for htlc #4)\nremote_htlc_signature = 304402207e0410e45454b0978a623f36a10626ef17b27d9ad44e2760f98cfa3efb37924f0220220bd8acd43ecaa916a80bd4f919c495a2c58982ce7c8625153f8596692a801d\n# local_htlc_signature = 30440220549e80b4496803cbc4a1d09d46df50109f546d43fbbf86cd90b174b1484acd5402205f12a4f995cb9bded597eabfee195a285986aa6d93ae5bb72507ebc6a4e2349e\nhtlc_success_tx (htlc #4): 020000000001018154ecccf11a5fb56c39654c4deb4d2296f83c69268280b94d021370c94e219704000000000000000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207e0410e45454b0978a623f36a10626ef17b27d9ad44e2760f98cfa3efb37924f0220220bd8acd43ecaa916a80bd4f919c495a2c58982ce7c8625153f8596692a801d014730440220549e80b4496803cbc4a1d09d46df50109f546d43fbbf86cd90b174b1484acd5402205f12a4f995cb9bded597eabfee195a285986aa6d93ae5bb72507ebc6a4e2349e012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with seven outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 647\n# base commitment transaction fee = 1024\n# actual commitment transaction fee = 1024\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #0 received amount 1000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6986976 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3045022100a5c01383d3ec646d97e40f44318d49def817fcd61a0ef18008a665b3e151785502203e648efddd5838981ef55ec954be69c4a652d021e6081a100d034de366815e9b\n# local_signature = 304502210094bfd8f5572ac0157ec76a9551b6c5216a4538c07cd13a51af4a54cb26fa14320220768efce8ce6f4a5efac875142ff19237c011343670adf9c7ac69704a120d1163\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8007e80300000000000022002052bfef0479d7b293c27e0f1eb294bea154c63a3294ef092c19af51409bce0e2ad007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110e09c6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040048304502210094bfd8f5572ac0157ec76a9551b6c5216a4538c07cd13a51af4a54cb26fa14320220768efce8ce6f4a5efac875142ff19237c011343670adf9c7ac69704a120d116301483045022100a5c01383d3ec646d97e40f44318d49def817fcd61a0ef18008a665b3e151785502203e648efddd5838981ef55ec954be69c4a652d021e6081a100d034de366815e9b01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 5\n# signature for output #0 (htlc-success for htlc #0)\nremote_htlc_signature = 30440220385a5afe75632f50128cbb029ee95c80156b5b4744beddc729ad339c9ca432c802202ba5f48550cad3379ac75b9b4fedb86a35baa6947f16ba5037fb8b11ab343740\n# local_htlc_signature = 304402205999590b8a79fa346e003a68fd40366397119b2b0cdf37b149968d6bc6fbcc4702202b1e1fb5ab7864931caed4e732c359e0fe3d86a548b557be2246efb1708d579a\nhtlc_success_tx (htlc #0): 020000000001018323148ce2419f21ca3d6780053747715832e18ac780931a514b187768882bb60000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220385a5afe75632f50128cbb029ee95c80156b5b4744beddc729ad339c9ca432c802202ba5f48550cad3379ac75b9b4fedb86a35baa6947f16ba5037fb8b11ab3437400147304402205999590b8a79fa346e003a68fd40366397119b2b0cdf37b149968d6bc6fbcc4702202b1e1fb5ab7864931caed4e732c359e0fe3d86a548b557be2246efb1708d579a012000000000000000000000000000000000000000000000000000000000000000008a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac686800000000\n# signature for output #1 (htlc-timeout for htlc #2)\nremote_htlc_signature = 304402207ceb6678d4db33d2401fdc409959e57c16a6cb97a30261d9c61f29b8c58d34b90220084b4a17b4ca0e86f2d798b3698ca52de5621f2ce86f80bed79afa66874511b0\n# local_htlc_signature = 304402207ff03eb0127fc7c6cae49cc29e2a586b98d1e8969cf4a17dfa50b9c2647720b902205e2ecfda2252956c0ca32f175080e75e4e390e433feb1f8ce9f2ba55648a1dac\nhtlc_timeout_tx (htlc #2): 020000000001018323148ce2419f21ca3d6780053747715832e18ac780931a514b187768882bb60100000000000000000124060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207ceb6678d4db33d2401fdc409959e57c16a6cb97a30261d9c61f29b8c58d34b90220084b4a17b4ca0e86f2d798b3698ca52de5621f2ce86f80bed79afa66874511b00147304402207ff03eb0127fc7c6cae49cc29e2a586b98d1e8969cf4a17dfa50b9c2647720b902205e2ecfda2252956c0ca32f175080e75e4e390e433feb1f8ce9f2ba55648a1dac01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #2 (htlc-success for htlc #1)\nremote_htlc_signature = 304402206a401b29a0dff0d18ec903502c13d83e7ec019450113f4a7655a4ce40d1f65ba0220217723a084e727b6ca0cc8b6c69c014a7e4a01fcdcba3e3993f462a3c574d833\n# local_htlc_signature = 3045022100d50d067ca625d54e62df533a8f9291736678d0b86c28a61bb2a80cf42e702d6e02202373dde7e00218eacdafb9415fe0e1071beec1857d1af3c6a201a44cbc47c877\nhtlc_success_tx (htlc #1): 020000000001018323148ce2419f21ca3d6780053747715832e18ac780931a514b187768882bb6020000000000000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402206a401b29a0dff0d18ec903502c13d83e7ec019450113f4a7655a4ce40d1f65ba0220217723a084e727b6ca0cc8b6c69c014a7e4a01fcdcba3e3993f462a3c574d83301483045022100d50d067ca625d54e62df533a8f9291736678d0b86c28a61bb2a80cf42e702d6e02202373dde7e00218eacdafb9415fe0e1071beec1857d1af3c6a201a44cbc47c877012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #3 (htlc-timeout for htlc #3)\nremote_htlc_signature = 30450221009b1c987ba599ee3bde1dbca776b85481d70a78b681a8d84206723e2795c7cac002207aac84ad910f8598c4d1c0ea2e3399cf6627a4e3e90131315bc9f038451ce39d\n# local_htlc_signature = 3045022100db9dc65291077a52728c622987e9895b7241d4394d6dcb916d7600a3e8728c22022036ee3ee717ba0bb5c45ee84bc7bbf85c0f90f26ae4e4a25a6b4241afa8a3f1cb\nhtlc_timeout_tx (htlc #3): 020000000001018323148ce2419f21ca3d6780053747715832e18ac780931a514b187768882bb6030000000000000000010c0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221009b1c987ba599ee3bde1dbca776b85481d70a78b681a8d84206723e2795c7cac002207aac84ad910f8598c4d1c0ea2e3399cf6627a4e3e90131315bc9f038451ce39d01483045022100db9dc65291077a52728c622987e9895b7241d4394d6dcb916d7600a3e8728c22022036ee3ee717ba0bb5c45ee84bc7bbf85c0f90f26ae4e4a25a6b4241afa8a3f1cb01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #4 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100cc28030b59f0914f45b84caa983b6f8effa900c952310708c2b5b00781117022022027ba2ccdf94d03c6d48b327f183f6e28c8a214d089b9227f94ac4f85315274f0\n# local_htlc_signature = 304402202d1a3c0d31200265d2a2def2753ead4959ae20b4083e19553acfffa5dfab60bf022020ede134149504e15b88ab261a066de49848411e15e70f9e6a5462aec2949f8f\nhtlc_success_tx (htlc #4): 020000000001018323148ce2419f21ca3d6780053747715832e18ac780931a514b187768882bb604000000000000000001da0d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100cc28030b59f0914f45b84caa983b6f8effa900c952310708c2b5b00781117022022027ba2ccdf94d03c6d48b327f183f6e28c8a214d089b9227f94ac4f85315274f00147304402202d1a3c0d31200265d2a2def2753ead4959ae20b4083e19553acfffa5dfab60bf022020ede134149504e15b88ab261a066de49848411e15e70f9e6a5462aec2949f8f012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with six outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 648\n# base commitment transaction fee = 914\n# actual commitment transaction fee = 1914\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6987086 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3044022072714e2fbb93cdd1c42eb0828b4f2eff143f717d8f26e79d6ada4f0dcb681bbe02200911be4e5161dd6ebe59ff1c58e1997c4aea804f81db6b698821db6093d7b057\n# local_signature = 3045022100a2270d5950c89ae0841233f6efea9c951898b301b2e89e0adbd2c687b9f32efa02207943d90f95b9610458e7c65a576e149750ff3accaacad004cd85e70b235e27de\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8006d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de8431104e9d6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100a2270d5950c89ae0841233f6efea9c951898b301b2e89e0adbd2c687b9f32efa02207943d90f95b9610458e7c65a576e149750ff3accaacad004cd85e70b235e27de01473044022072714e2fbb93cdd1c42eb0828b4f2eff143f717d8f26e79d6ada4f0dcb681bbe02200911be4e5161dd6ebe59ff1c58e1997c4aea804f81db6b698821db6093d7b05701475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 4\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 3044022062ef2e77591409d60d7817d9bb1e71d3c4a2931d1a6c7c8307422c84f001a251022022dad9726b0ae3fe92bda745a06f2c00f92342a186d84518588cf65f4dfaada8\n# local_htlc_signature = 3045022100a4c574f00411dd2f978ca5cdc1b848c311cd7849c087ad2f21a5bce5e8cc5ae90220090ae39a9bce2fb8bc879d7e9f9022df249f41e25e51f1a9bf6447a9eeffc098\nhtlc_timeout_tx (htlc #2): 02000000000101579c183eca9e8236a5d7f5dcd79cfec32c497fdc0ec61533cde99ecd436cadd10000000000000000000123060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022062ef2e77591409d60d7817d9bb1e71d3c4a2931d1a6c7c8307422c84f001a251022022dad9726b0ae3fe92bda745a06f2c00f92342a186d84518588cf65f4dfaada801483045022100a4c574f00411dd2f978ca5cdc1b848c311cd7849c087ad2f21a5bce5e8cc5ae90220090ae39a9bce2fb8bc879d7e9f9022df249f41e25e51f1a9bf6447a9eeffc09801008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-success for htlc #1)\nremote_htlc_signature = 3045022100e968cbbb5f402ed389fdc7f6cd2a80ed650bb42c79aeb2a5678444af94f6c78502204b47a1cb24ab5b0b6fe69fe9cfc7dba07b9dd0d8b95f372c1d9435146a88f8d4\n# local_htlc_signature = 304402207679cf19790bea76a733d2fa0672bd43ab455687a068f815a3d237581f57139a0220683a1a799e102071c206b207735ca80f627ab83d6616b4bcd017c5d79ef3e7d0\nhtlc_success_tx (htlc #1): 02000000000101579c183eca9e8236a5d7f5dcd79cfec32c497fdc0ec61533cde99ecd436cadd10100000000000000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e968cbbb5f402ed389fdc7f6cd2a80ed650bb42c79aeb2a5678444af94f6c78502204b47a1cb24ab5b0b6fe69fe9cfc7dba07b9dd0d8b95f372c1d9435146a88f8d40147304402207679cf19790bea76a733d2fa0672bd43ab455687a068f815a3d237581f57139a0220683a1a799e102071c206b207735ca80f627ab83d6616b4bcd017c5d79ef3e7d0012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #2 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100aa91932e305292cf9969cc23502bbf6cef83a5df39c95ad04a707c4f4fed5c7702207099fc0f3a9bfe1e7683c0e9aa5e76c5432eb20693bf4cb182f04d383dc9c8c2\n# local_htlc_signature = 304402200df76fea718745f3c529bac7fd37923e7309ce38b25c0781e4cf514dd9ef8dc802204172295739dbae9fe0474dcee3608e3433b4b2af3a2e6787108b02f894dcdda3\nhtlc_timeout_tx (htlc #3): 02000000000101579c183eca9e8236a5d7f5dcd79cfec32c497fdc0ec61533cde99ecd436cadd1020000000000000000010b0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100aa91932e305292cf9969cc23502bbf6cef83a5df39c95ad04a707c4f4fed5c7702207099fc0f3a9bfe1e7683c0e9aa5e76c5432eb20693bf4cb182f04d383dc9c8c20147304402200df76fea718745f3c529bac7fd37923e7309ce38b25c0781e4cf514dd9ef8dc802204172295739dbae9fe0474dcee3608e3433b4b2af3a2e6787108b02f894dcdda301008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #3 (htlc-success for htlc #4)\nremote_htlc_signature = 3044022035cac88040a5bba420b1c4257235d5015309113460bc33f2853cd81ca36e632402202fc94fd3e81e9d34a9d01782a0284f3044370d03d60f3fc041e2da088d2de58f\n# local_htlc_signature = 304402200daf2eb7afd355b4caf6fb08387b5f031940ea29d1a9f35071288a839c9039e4022067201b562456e7948616c13acb876b386b511599b58ac1d94d127f91c50463a6\nhtlc_success_tx (htlc #4): 02000000000101579c183eca9e8236a5d7f5dcd79cfec32c497fdc0ec61533cde99ecd436cadd103000000000000000001d90d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022035cac88040a5bba420b1c4257235d5015309113460bc33f2853cd81ca36e632402202fc94fd3e81e9d34a9d01782a0284f3044370d03d60f3fc041e2da088d2de58f0147304402200daf2eb7afd355b4caf6fb08387b5f031940ea29d1a9f35071288a839c9039e4022067201b562456e7948616c13acb876b386b511599b58ac1d94d127f91c50463a6012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with six outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2069\n# base commitment transaction fee = 2921\n# actual commitment transaction fee = 3921\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985079 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3044022001d55e488b8b035b2dd29d50b65b530923a416d47f377284145bc8767b1b6a75022019bb53ddfe1cefaf156f924777eaaf8fdca1810695a7d0a247ad2afba8232eb4\n# local_signature = 304402203ca8f31c6a47519f83255dc69f1894d9a6d7476a19f498d31eaf0cd3a85eeb63022026fd92dc752b33905c4c838c528b692a8ad4ced959990b5d5ee2ff940fa90eea\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8006d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de84311077956a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402203ca8f31c6a47519f83255dc69f1894d9a6d7476a19f498d31eaf0cd3a85eeb63022026fd92dc752b33905c4c838c528b692a8ad4ced959990b5d5ee2ff940fa90eea01473044022001d55e488b8b035b2dd29d50b65b530923a416d47f377284145bc8767b1b6a75022019bb53ddfe1cefaf156f924777eaaf8fdca1810695a7d0a247ad2afba8232eb401475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 4\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 3045022100d1cf354de41c1369336cf85b225ed033f1f8982a01be503668df756a7e668b66022001254144fb4d0eecc61908fccc3388891ba17c5d7a1a8c62bdd307e5a513f992\n# local_htlc_signature = 3044022056eb1af429660e45a1b0b66568cb8c4a3aa7e4c9c292d5d6c47f86ebf2c8838f022065c3ac4ebe980ca7a41148569be4ad8751b0a724a41405697ec55035dae66402\nhtlc_timeout_tx (htlc #2): 02000000000101ca94a9ad516ebc0c4bdd7b6254871babfa978d5accafb554214137d398bfcf6a0000000000000000000175020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100d1cf354de41c1369336cf85b225ed033f1f8982a01be503668df756a7e668b66022001254144fb4d0eecc61908fccc3388891ba17c5d7a1a8c62bdd307e5a513f99201473044022056eb1af429660e45a1b0b66568cb8c4a3aa7e4c9c292d5d6c47f86ebf2c8838f022065c3ac4ebe980ca7a41148569be4ad8751b0a724a41405697ec55035dae6640201008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-success for htlc #1)\nremote_htlc_signature = 3045022100d065569dcb94f090345402736385efeb8ea265131804beac06dd84d15dd2d6880220664feb0b4b2eb985fadb6ec7dc58c9334ea88ce599a9be760554a2d4b3b5d9f4\n# local_htlc_signature = 3045022100914bb232cd4b2690ee3d6cb8c3713c4ac9c4fb925323068d8b07f67c8541f8d9022057152f5f1615b793d2d45aac7518989ae4fe970f28b9b5c77504799d25433f7f\nhtlc_success_tx (htlc #1): 02000000000101ca94a9ad516ebc0c4bdd7b6254871babfa978d5accafb554214137d398bfcf6a0100000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100d065569dcb94f090345402736385efeb8ea265131804beac06dd84d15dd2d6880220664feb0b4b2eb985fadb6ec7dc58c9334ea88ce599a9be760554a2d4b3b5d9f401483045022100914bb232cd4b2690ee3d6cb8c3713c4ac9c4fb925323068d8b07f67c8541f8d9022057152f5f1615b793d2d45aac7518989ae4fe970f28b9b5c77504799d25433f7f012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #2 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100d4e69d363de993684eae7b37853c40722a4c1b4a7b588ad7b5d8a9b5006137a102207a069c628170ee34be5612747051bdcc087466dbaa68d5756ea81c10155aef18\n# local_htlc_signature = 304402200e362443f7af830b419771e8e1614fc391db3a4eb799989abfc5ab26d6fcd032022039ab0cad1c14dfbe9446bf847965e56fe016e0cbcf719fd18c1bfbf53ecbd9f9\nhtlc_timeout_tx (htlc #3): 02000000000101ca94a9ad516ebc0c4bdd7b6254871babfa978d5accafb554214137d398bfcf6a020000000000000000015d060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100d4e69d363de993684eae7b37853c40722a4c1b4a7b588ad7b5d8a9b5006137a102207a069c628170ee34be5612747051bdcc087466dbaa68d5756ea81c10155aef180147304402200e362443f7af830b419771e8e1614fc391db3a4eb799989abfc5ab26d6fcd032022039ab0cad1c14dfbe9446bf847965e56fe016e0cbcf719fd18c1bfbf53ecbd9f901008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #3 (htlc-success for htlc #4)\nremote_htlc_signature = 30450221008ec888e36e4a4b3dc2ed6b823319855b2ae03006ca6ae0d9aa7e24bfc1d6f07102203b0f78885472a67ff4fe5916c0bb669487d659527509516fc3a08e87a2cc0a7c\n# local_htlc_signature = 304402202c3e14282b84b02705dfd00a6da396c9fe8a8bcb1d3fdb4b20a4feba09440e8b02202b058b39aa9b0c865b22095edcd9ff1f71bbfe20aa4993755e54d042755ed0d5\nhtlc_success_tx (htlc #4): 02000000000101ca94a9ad516ebc0c4bdd7b6254871babfa978d5accafb554214137d398bfcf6a03000000000000000001f2090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221008ec888e36e4a4b3dc2ed6b823319855b2ae03006ca6ae0d9aa7e24bfc1d6f07102203b0f78885472a67ff4fe5916c0bb669487d659527509516fc3a08e87a2cc0a7c0147304402202c3e14282b84b02705dfd00a6da396c9fe8a8bcb1d3fdb4b20a4feba09440e8b02202b058b39aa9b0c865b22095edcd9ff1f71bbfe20aa4993755e54d042755ed0d5012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with five outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2070\n# base commitment transaction fee = 2566\n# actual commitment transaction fee = 5566\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985434 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3045022100f2377f7a67b7fc7f4e2c0c9e3a7de935c32417f5668eda31ea1db401b7dc53030220415fdbc8e91d0f735e70c21952342742e25249b0d062d43efbfc564499f37526\n# local_signature = 30440220443cb07f650aebbba14b8bc8d81e096712590f524c5991ac0ed3bbc8fd3bd0c7022028a635f548e3ca64b19b69b1ea00f05b22752f91daf0b6dab78e62ba52eb7fd0\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110da966a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004730440220443cb07f650aebbba14b8bc8d81e096712590f524c5991ac0ed3bbc8fd3bd0c7022028a635f548e3ca64b19b69b1ea00f05b22752f91daf0b6dab78e62ba52eb7fd001483045022100f2377f7a67b7fc7f4e2c0c9e3a7de935c32417f5668eda31ea1db401b7dc53030220415fdbc8e91d0f735e70c21952342742e25249b0d062d43efbfc564499f3752601475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 3\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 3045022100eed143b1ee4bed5dc3cde40afa5db3e7354cbf9c44054b5f713f729356f08cf7022077161d171c2bbd9badf3c9934de65a4918de03bbac1450f715275f75b103f891\n# local_htlc_signature = 3045022100a0d043ed533e7fb1911e0553d31a8e2f3e6de19dbc035257f29d747c5e02f1f5022030cd38d8e84282175d49c1ebe0470db3ebd59768cf40780a784e248a43904fb8\nhtlc_timeout_tx (htlc #2): 0200000000010140a83ce364747ff277f4d7595d8d15f708418798922c40bc2b056aca5485a2180000000000000000000174020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100eed143b1ee4bed5dc3cde40afa5db3e7354cbf9c44054b5f713f729356f08cf7022077161d171c2bbd9badf3c9934de65a4918de03bbac1450f715275f75b103f89101483045022100a0d043ed533e7fb1911e0553d31a8e2f3e6de19dbc035257f29d747c5e02f1f5022030cd38d8e84282175d49c1ebe0470db3ebd59768cf40780a784e248a43904fb801008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3044022071e9357619fd8d29a411dc053b326a5224c5d11268070e88ecb981b174747c7a02202b763ae29a9d0732fa8836dd8597439460b50472183f420021b768981b4f7cf6\n# local_htlc_signature = 3045022100adb1d679f65f96178b59f23ed37d3b70443118f345224a07ecb043eee2acc157022034d24524fe857144a3bcfff3065a9994d0a6ec5f11c681e49431d573e242612d\nhtlc_timeout_tx (htlc #3): 0200000000010140a83ce364747ff277f4d7595d8d15f708418798922c40bc2b056aca5485a218010000000000000000015c060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022071e9357619fd8d29a411dc053b326a5224c5d11268070e88ecb981b174747c7a02202b763ae29a9d0732fa8836dd8597439460b50472183f420021b768981b4f7cf601483045022100adb1d679f65f96178b59f23ed37d3b70443118f345224a07ecb043eee2acc157022034d24524fe857144a3bcfff3065a9994d0a6ec5f11c681e49431d573e242612d01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #2 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100c9458a4d2cbb741705577deb0a890e5cb90ee141be0400d3162e533727c9cb2102206edcf765c5dc5e5f9b976ea8149bf8607b5a0efb30691138e1231302b640d2a4\n# local_htlc_signature = 304402200831422aa4e1ee6d55e0b894201770a8f8817a189356f2d70be76633ffa6a6f602200dd1b84a4855dc6727dd46c98daae43dfc70889d1ba7ef0087529a57c06e5e04\nhtlc_success_tx (htlc #4): 0200000000010140a83ce364747ff277f4d7595d8d15f708418798922c40bc2b056aca5485a21802000000000000000001f1090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100c9458a4d2cbb741705577deb0a890e5cb90ee141be0400d3162e533727c9cb2102206edcf765c5dc5e5f9b976ea8149bf8607b5a0efb30691138e1231302b640d2a40147304402200831422aa4e1ee6d55e0b894201770a8f8817a189356f2d70be76633ffa6a6f602200dd1b84a4855dc6727dd46c98daae43dfc70889d1ba7ef0087529a57c06e5e04012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with five outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2194\n# base commitment transaction fee = 2720\n# actual commitment transaction fee = 5720\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985280 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3045022100d33c4e541aa1d255d41ea9a3b443b3b822ad8f7f86862638aac1f69f8f760577022007e2a18e6931ce3d3a804b1c78eda1de17dbe1fb7a95488c9a4ec86203953348\n# local_signature = 304402203b1b010c109c2ecbe7feb2d259b9c4126bd5dc99ee693c422ec0a5781fe161ba0220571fe4e2c649dea9c7aaf7e49b382962f6a3494963c97d80fef9a430ca3f7061\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de84311040966a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402203b1b010c109c2ecbe7feb2d259b9c4126bd5dc99ee693c422ec0a5781fe161ba0220571fe4e2c649dea9c7aaf7e49b382962f6a3494963c97d80fef9a430ca3f706101483045022100d33c4e541aa1d255d41ea9a3b443b3b822ad8f7f86862638aac1f69f8f760577022007e2a18e6931ce3d3a804b1c78eda1de17dbe1fb7a95488c9a4ec8620395334801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 3\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 30450221009ed2f0a67f99e29c3c8cf45c08207b765980697781bb727fe0b1416de0e7622902206052684229bc171419ed290f4b615c943f819c0262414e43c5b91dcf72ddcf44\n# local_htlc_signature = 3044022004ad5f04ae69c71b3b141d4db9d0d4c38d84009fb3cfeeae6efdad414487a9a0022042d3fe1388c1ff517d1da7fb4025663d372c14728ed52dc88608363450ff6a2f\nhtlc_timeout_tx (htlc #2): 02000000000101fb824d4e4dafc0f567789dee3a6bce8d411fe80f5563d8cdfdcc7d7e4447d43a0000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221009ed2f0a67f99e29c3c8cf45c08207b765980697781bb727fe0b1416de0e7622902206052684229bc171419ed290f4b615c943f819c0262414e43c5b91dcf72ddcf4401473044022004ad5f04ae69c71b3b141d4db9d0d4c38d84009fb3cfeeae6efdad414487a9a0022042d3fe1388c1ff517d1da7fb4025663d372c14728ed52dc88608363450ff6a2f01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-timeout for htlc #3)\nremote_htlc_signature = 30440220155d3b90c67c33a8321996a9be5b82431b0c126613be751d400669da9d5c696702204318448bcd48824439d2c6a70be6e5747446be47ff45977cf41672bdc9b6b12d\n# local_htlc_signature = 304402201707050c870c1f77cc3ed58d6d71bf281de239e9eabd8ef0955bad0d7fe38dcc02204d36d80d0019b3a71e646a08fa4a5607761d341ae8be371946ebe437c289c915\nhtlc_timeout_tx (htlc #3): 02000000000101fb824d4e4dafc0f567789dee3a6bce8d411fe80f5563d8cdfdcc7d7e4447d43a010000000000000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220155d3b90c67c33a8321996a9be5b82431b0c126613be751d400669da9d5c696702204318448bcd48824439d2c6a70be6e5747446be47ff45977cf41672bdc9b6b12d0147304402201707050c870c1f77cc3ed58d6d71bf281de239e9eabd8ef0955bad0d7fe38dcc02204d36d80d0019b3a71e646a08fa4a5607761d341ae8be371946ebe437c289c91501008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #2 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100a12a9a473ece548584aabdd051779025a5ed4077c4b7aa376ec7a0b1645e5a48022039490b333f53b5b3e2ddde1d809e492cba2b3e5fc3a436cd3ffb4cd3d500fa5a\n# local_htlc_signature = 3045022100ff200bc934ab26ce9a559e998ceb0aee53bc40368e114ab9d3054d9960546e2802202496856ca163ac12c143110b6b3ac9d598df7254f2e17b3b94c3ab5301f4c3b0\nhtlc_success_tx (htlc #4): 02000000000101fb824d4e4dafc0f567789dee3a6bce8d411fe80f5563d8cdfdcc7d7e4447d43a020000000000000000019a090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100a12a9a473ece548584aabdd051779025a5ed4077c4b7aa376ec7a0b1645e5a48022039490b333f53b5b3e2ddde1d809e492cba2b3e5fc3a436cd3ffb4cd3d500fa5a01483045022100ff200bc934ab26ce9a559e998ceb0aee53bc40368e114ab9d3054d9960546e2802202496856ca163ac12c143110b6b3ac9d598df7254f2e17b3b94c3ab5301f4c3b0012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with four outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2195\n# base commitment transaction fee = 2344\n# actual commitment transaction fee = 7344\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985656 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 304402205e2f76d4657fb732c0dfc820a18a7301e368f5799e06b7828007633741bda6df0220458009ae59d0c6246065c419359e05eb2a4b4ef4a1b310cc912db44eb7924298\n# local_signature = 304402203b12d44254244b8ff3bb4129b0920fd45120ab42f553d9976394b099d500c99e02205e95bb7a3164852ef0c48f9e0eaf145218f8e2c41251b231f03cbdc4f29a5429\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8004b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110b8976a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402203b12d44254244b8ff3bb4129b0920fd45120ab42f553d9976394b099d500c99e02205e95bb7a3164852ef0c48f9e0eaf145218f8e2c41251b231f03cbdc4f29a54290147304402205e2f76d4657fb732c0dfc820a18a7301e368f5799e06b7828007633741bda6df0220458009ae59d0c6246065c419359e05eb2a4b4ef4a1b310cc912db44eb792429801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 2\n# signature for output #0 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100a8a78fa1016a5c5c3704f2e8908715a3cef66723fb95f3132ec4d2d05cd84fb4022025ac49287b0861ec21932405f5600cbce94313dbde0e6c5d5af1b3366d8afbfc\n# local_htlc_signature = 3045022100be6ae1977fd7b630a53623f3f25c542317ccfc2b971782802a4f1ef538eb22b402207edc4d0408f8f38fd3c7365d1cfc26511b7cd2d4fecd8b005fba3cd5bc704390\nhtlc_timeout_tx (htlc #3): 020000000001014e16c488fa158431c1a82e8f661240ec0a71ba0ce92f2721a6538c510226ad5c0000000000000000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100a8a78fa1016a5c5c3704f2e8908715a3cef66723fb95f3132ec4d2d05cd84fb4022025ac49287b0861ec21932405f5600cbce94313dbde0e6c5d5af1b3366d8afbfc01483045022100be6ae1977fd7b630a53623f3f25c542317ccfc2b971782802a4f1ef538eb22b402207edc4d0408f8f38fd3c7365d1cfc26511b7cd2d4fecd8b005fba3cd5bc70439001008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #1 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100e769cb156aa2f7515d126cef7a69968629620ce82afcaa9e210969de6850df4602200b16b3f3486a229a48aadde520dbee31ae340dbadaffae74fbb56681fef27b92\n# local_htlc_signature = 30440220665b9cb4a978c09d1ca8977a534999bc8a49da624d0c5439451dd69cde1a003d022070eae0620f01f3c1bd029cc1488da13fb40fdab76f396ccd335479a11c5276d8\nhtlc_success_tx (htlc #4): 020000000001014e16c488fa158431c1a82e8f661240ec0a71ba0ce92f2721a6538c510226ad5c0100000000000000000199090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e769cb156aa2f7515d126cef7a69968629620ce82afcaa9e210969de6850df4602200b16b3f3486a229a48aadde520dbee31ae340dbadaffae74fbb56681fef27b92014730440220665b9cb4a978c09d1ca8977a534999bc8a49da624d0c5439451dd69cde1a003d022070eae0620f01f3c1bd029cc1488da13fb40fdab76f396ccd335479a11c5276d8012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with four outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 3702\n# base commitment transaction fee = 3953\n# actual commitment transaction fee = 8953\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6984047 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3045022100c1a3b0b60ca092ed5080121f26a74a20cec6bdee3f8e47bae973fcdceb3eda5502207d467a9873c939bf3aa758014ae67295fedbca52412633f7e5b2670fc7c381c1\n# local_signature = 304402200e930a43c7951162dc15a2b7344f48091c74c70f7024e7116e900d8bcfba861c022066fa6cbda3929e21daa2e7e16a4b948db7e8919ef978402360d1095ffdaff7b0\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8004b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de8431106f916a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402200e930a43c7951162dc15a2b7344f48091c74c70f7024e7116e900d8bcfba861c022066fa6cbda3929e21daa2e7e16a4b948db7e8919ef978402360d1095ffdaff7b001483045022100c1a3b0b60ca092ed5080121f26a74a20cec6bdee3f8e47bae973fcdceb3eda5502207d467a9873c939bf3aa758014ae67295fedbca52412633f7e5b2670fc7c381c101475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 2\n# signature for output #0 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100dfb73b4fe961b31a859b2bb1f4f15cabab9265016dd0272323dc6a9e85885c54022059a7b87c02861ee70662907f25ce11597d7b68d3399443a831ae40e777b76bdb\n# local_htlc_signature = 304402202765b9c9ece4f127fa5407faf66da4c5ce2719cdbe47cd3175fc7d48b482e43d02205605125925e07bad1e41c618a4b434d72c88a164981c4b8af5eaf4ee9142ec3a\nhtlc_timeout_tx (htlc #3): 02000000000101b8de11eb51c22498fe39722c7227b6e55ff1a94146cf638458cb9bc6a060d3a30000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100dfb73b4fe961b31a859b2bb1f4f15cabab9265016dd0272323dc6a9e85885c54022059a7b87c02861ee70662907f25ce11597d7b68d3399443a831ae40e777b76bdb0147304402202765b9c9ece4f127fa5407faf66da4c5ce2719cdbe47cd3175fc7d48b482e43d02205605125925e07bad1e41c618a4b434d72c88a164981c4b8af5eaf4ee9142ec3a01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #1 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100ea9dc2a7c3c3640334dab733bb4e036e32a3106dc707b24227874fa4f7da746802204d672f7ac0fe765931a8df10b81e53a3242dd32bd9dc9331eb4a596da87954e9\n# local_htlc_signature = 30440220048a41c660c4841693de037d00a407810389f4574b3286afb7bc392a438fa3f802200401d71fa87c64fe621b49ac07e3bf85157ac680acb977124da28652cc7f1a5c\nhtlc_success_tx (htlc #4): 02000000000101b8de11eb51c22498fe39722c7227b6e55ff1a94146cf638458cb9bc6a060d3a30100000000000000000176050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100ea9dc2a7c3c3640334dab733bb4e036e32a3106dc707b24227874fa4f7da746802204d672f7ac0fe765931a8df10b81e53a3242dd32bd9dc9331eb4a596da87954e9014730440220048a41c660c4841693de037d00a407810389f4574b3286afb7bc392a438fa3f802200401d71fa87c64fe621b49ac07e3bf85157ac680acb977124da28652cc7f1a5c012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with three outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 3703\n# base commitment transaction fee = 3317\n# actual commitment transaction fee = 11317\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6984683 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 30450221008b7c191dd46893b67b628e618d2dc8e81169d38bade310181ab77d7c94c6675e02203b4dd131fd7c9deb299560983dcdc485545c98f989f7ae8180c28289f9e6bdb0\n# local_signature = 3044022047305531dd44391dce03ae20f8735005c615eb077a974edb0059ea1a311857d602202e0ed6972fbdd1e8cb542b06e0929bc41b2ddf236e04cb75edd56151f4197506\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8003a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110eb936a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022047305531dd44391dce03ae20f8735005c615eb077a974edb0059ea1a311857d602202e0ed6972fbdd1e8cb542b06e0929bc41b2ddf236e04cb75edd56151f4197506014830450221008b7c191dd46893b67b628e618d2dc8e81169d38bade310181ab77d7c94c6675e02203b4dd131fd7c9deb299560983dcdc485545c98f989f7ae8180c28289f9e6bdb001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 1\n# signature for output #0 (htlc-success for htlc #4)\nremote_htlc_signature = 3044022044f65cf833afdcb9d18795ca93f7230005777662539815b8a601eeb3e57129a902206a4bf3e53392affbba52640627defa8dc8af61c958c9e827b2798ab45828abdd\n# local_htlc_signature = 3045022100b94d931a811b32eeb885c28ddcf999ae1981893b21dd1329929543fe87ce793002206370107fdd151c5f2384f9ceb71b3107c69c74c8ed5a28a94a4ab2d27d3b0724\nhtlc_success_tx (htlc #4): 020000000001011c076aa7fb3d7460d10df69432c904227ea84bbf3134d4ceee5fb0f135ef206d0000000000000000000175050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022044f65cf833afdcb9d18795ca93f7230005777662539815b8a601eeb3e57129a902206a4bf3e53392affbba52640627defa8dc8af61c958c9e827b2798ab45828abdd01483045022100b94d931a811b32eeb885c28ddcf999ae1981893b21dd1329929543fe87ce793002206370107fdd151c5f2384f9ceb71b3107c69c74c8ed5a28a94a4ab2d27d3b0724012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with three outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 4914\n# base commitment transaction fee = 4402\n# actual commitment transaction fee = 12402\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6983598 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 304402206d6cb93969d39177a09d5d45b583f34966195b77c7e585cf47ac5cce0c90cefb022031d71ae4e33a4e80df7f981d696fbdee517337806a3c7138b7491e2cbb077a0e\n# local_signature = 304402206a2679efa3c7aaffd2a447fd0df7aba8792858b589750f6a1203f9259173198a022008d52a0e77a99ab533c36206cb15ad7aeb2aa72b93d4b571e728cb5ec2f6fe26\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8003a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110ae8f6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402206a2679efa3c7aaffd2a447fd0df7aba8792858b589750f6a1203f9259173198a022008d52a0e77a99ab533c36206cb15ad7aeb2aa72b93d4b571e728cb5ec2f6fe260147304402206d6cb93969d39177a09d5d45b583f34966195b77c7e585cf47ac5cce0c90cefb022031d71ae4e33a4e80df7f981d696fbdee517337806a3c7138b7491e2cbb077a0e01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 1\n# signature for output #0 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100fcb38506bfa11c02874092a843d0cc0a8613c23b639832564a5f69020cb0f6ba02206508b9e91eaa001425c190c68ee5f887e1ad5b1b314002e74db9dbd9e42dbecf\n# local_htlc_signature = 304502210086e76b460ddd3cea10525fba298405d3fe11383e56966a5091811368362f689a02200f72ee75657915e0ede89c28709acd113ede9e1b7be520e3bc5cda425ecd6e68\nhtlc_success_tx (htlc #4): 0200000000010110a3fdcbcd5db477cd3ad465e7f501ffa8c437e8301f00a6061138590add757f0000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100fcb38506bfa11c02874092a843d0cc0a8613c23b639832564a5f69020cb0f6ba02206508b9e91eaa001425c190c68ee5f887e1ad5b1b314002e74db9dbd9e42dbecf0148304502210086e76b460ddd3cea10525fba298405d3fe11383e56966a5091811368362f689a02200f72ee75657915e0ede89c28709acd113ede9e1b7be520e3bc5cda425ecd6e68012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with two outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 4915\n# base commitment transaction fee = 3558\n# actual commitment transaction fee = 15558\n# to_local amount 6984442 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 304402200769ba89c7330dfa4feba447b6e322305f12ac7dac70ec6ba997ed7c1b598d0802204fe8d337e7fee781f9b7b1a06e580b22f4f79d740059560191d7db53f8765552\n# local_signature = 3045022100a012691ba6cea2f73fa8bac37750477e66363c6d28813b0bb6da77c8eb3fb0270220365e99c51304b0b1a6ab9ea1c8500db186693e39ec1ad5743ee231b0138384b9\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8002c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110fa926a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100a012691ba6cea2f73fa8bac37750477e66363c6d28813b0bb6da77c8eb3fb0270220365e99c51304b0b1a6ab9ea1c8500db186693e39ec1ad5743ee231b0138384b90147304402200769ba89c7330dfa4feba447b6e322305f12ac7dac70ec6ba997ed7c1b598d0802204fe8d337e7fee781f9b7b1a06e580b22f4f79d740059560191d7db53f876555201475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with two outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 9651180\n# base commitment transaction fee = 6987454\n# actual commitment transaction fee = 6999454\n# to_local amount 546 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3044022037f83ff00c8e5fb18ae1f918ffc24e54581775a20ff1ae719297ef066c71caa9022039c529cccd89ff6c5ed1db799614533844bd6d101da503761c45c713996e3bbd\n# local_signature = 30440220514f977bf7edc442de8ce43ace9686e5ebdc0f893033f13e40fb46c8b8c6e1f90220188006227d175f5c35da0b092c57bea82537aed89f7778204dc5bacf4f29f2b9\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b800222020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80ec0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de84311004004730440220514f977bf7edc442de8ce43ace9686e5ebdc0f893033f13e40fb46c8b8c6e1f90220188006227d175f5c35da0b092c57bea82537aed89f7778204dc5bacf4f29f2b901473044022037f83ff00c8e5fb18ae1f918ffc24e54581775a20ff1ae719297ef066c71caa9022039c529cccd89ff6c5ed1db799614533844bd6d101da503761c45c713996e3bbd01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with one output untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 9651181\n# base commitment transaction fee = 6987455\n# actual commitment transaction fee = 7000000\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3044022064901950be922e62cbe3f2ab93de2b99f37cff9fc473e73e394b27f88ef0731d02206d1dfa227527b4df44a07599289e207d6fd9cca60c0365682dcd3deaf739567e\n# local_signature = 3044022031a82b51bd014915fe68928d1abf4b9885353fb896cac10c3fdd88d7f9c7f2e00220716bda819641d2c63e65d3549b6120112e1aeaf1742eed94a471488e79e206b1\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8001c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de8431100400473044022031a82b51bd014915fe68928d1abf4b9885353fb896cac10c3fdd88d7f9c7f2e00220716bda819641d2c63e65d3549b6120112e1aeaf1742eed94a471488e79e206b101473044022064901950be922e62cbe3f2ab93de2b99f37cff9fc473e73e394b27f88ef0731d02206d1dfa227527b4df44a07599289e207d6fd9cca60c0365682dcd3deaf739567e01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with fee greater than funder amount\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 9651936\n# base commitment transaction fee = 6988001\n# actual commitment transaction fee = 7000000\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3044022064901950be922e62cbe3f2ab93de2b99f37cff9fc473e73e394b27f88ef0731d02206d1dfa227527b4df44a07599289e207d6fd9cca60c0365682dcd3deaf739567e\n# local_signature = 3044022031a82b51bd014915fe68928d1abf4b9885353fb896cac10c3fdd88d7f9c7f2e00220716bda819641d2c63e65d3549b6120112e1aeaf1742eed94a471488e79e206b1\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8001c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de8431100400473044022031a82b51bd014915fe68928d1abf4b9885353fb896cac10c3fdd88d7f9c7f2e00220716bda819641d2c63e65d3549b6120112e1aeaf1742eed94a471488e79e206b101473044022064901950be922e62cbe3f2ab93de2b99f37cff9fc473e73e394b27f88ef0731d02206d1dfa227527b4df44a07599289e207d6fd9cca60c0365682dcd3deaf739567e01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with 3 htlc outputs, 2 offered having the same amount and preimage\nto_local_msat: 6987999999\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 253\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #5 offered amount 5000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868\n# HTLC #6 offered amount 5000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868\n# HTLC #5 and 6 have CLTV 506 and 505, respectively, and preimage 0505050505050505050505050505050505050505050505050505050505050505\nremote_signature = 304402206cda85b2811a211aa70fb74abf23303d87c4355ccf2c2c7954d4137c4fb26a830220719402ab3fef1cbaf42ba42fe437e9bed1e45f84547d603bf7af3fb88f501933\n# local_signature = 3045022100d25455151be075bae8b3400d0825341a3c25a1a5258b84ad2546c09539a83bc602203c1a4ac19c3ac415af7f6a98348f8d7e94fc0ab82dbed54c3c40134f465d027f\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2d8813000000000000220020305c12e1a0bc21e283c131cea1c66d68857d28b7b2fce0a6fbc40c164852121b8813000000000000220020305c12e1a0bc21e283c131cea1c66d68857d28b7b2fce0a6fbc40c164852121bc0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110a69f6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100d25455151be075bae8b3400d0825341a3c25a1a5258b84ad2546c09539a83bc602203c1a4ac19c3ac415af7f6a98348f8d7e94fc0ab82dbed54c3c40134f465d027f0147304402206cda85b2811a211aa70fb74abf23303d87c4355ccf2c2c7954d4137c4fb26a830220719402ab3fef1cbaf42ba42fe437e9bed1e45f84547d603bf7af3fb88f50193301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 3\n# signature for output #0 (htlc-success for htlc #1)\nremote_htlc_signature = 30450221008117770f1d750a8af7a23f27c51a22f66386ea8f074115d0feeac7fe0f077f6102203d4d8dab53ef695b634786224ae5138c81d223b0493fd4637a448e31f734bb30\n# local_htlc_signature = 3045022100f2868e4380ac389960b96a8d01bd0d7ae845d24ad67993f1680e207864d5d3ae0220779ad0a943f73951d628a4f931c3044c51d393de1ab6f8283df41b68485f2b1b\nhtlc_success_tx (htlc #1): 0200000000010129253160416b9b2a2ecc303421b7fd1dee52d2e0b08d1a697f3979608334dbb9000000000000000000011f070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221008117770f1d750a8af7a23f27c51a22f66386ea8f074115d0feeac7fe0f077f6102203d4d8dab53ef695b634786224ae5138c81d223b0493fd4637a448e31f734bb3001483045022100f2868e4380ac389960b96a8d01bd0d7ae845d24ad67993f1680e207864d5d3ae0220779ad0a943f73951d628a4f931c3044c51d393de1ab6f8283df41b68485f2b1b012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #1 (htlc-timeout for htlc #6)\nremote_htlc_signature = 30440220620b37379e587447e7ee9c8eed9e71b2d2ec29cadc89a4b5411ee6f9b013ca1b02201aaf26d1a03d901425fc44562bff77d5645cb54498e4d9a56c39456825974a3d\n# local_htlc_signature = 304402204db4a1266aa8f0df66d35cd8b4269feef47f1cccebf7fdbb2b64cef35d72d79f022021b6d270a6d623cfec4cd0186096596d8deb17505d8c1c9785c719e0dbfa7e84\nhtlc_timeout_tx (htlc #6): 0200000000010129253160416b9b2a2ecc303421b7fd1dee52d2e0b08d1a697f3979608334dbb901000000000000000001e1120000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220620b37379e587447e7ee9c8eed9e71b2d2ec29cadc89a4b5411ee6f9b013ca1b02201aaf26d1a03d901425fc44562bff77d5645cb54498e4d9a56c39456825974a3d0147304402204db4a1266aa8f0df66d35cd8b4269feef47f1cccebf7fdbb2b64cef35d72d79f022021b6d270a6d623cfec4cd0186096596d8deb17505d8c1c9785c719e0dbfa7e8401008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868f9010000\n# signature for output #2 (htlc-timeout for htlc #5)\nremote_htlc_signature = 30450221009353b1d7e6313dc57a3781671b7ed9dde668b30e6f438ff08b13580937264de202200654599d2b9839fe9c88553f7c164a517fc8f0892e942b615460325fee7e0747\n# local_htlc_signature = 3045022100c11a3f26356524b556bdfaeeae80f3cdef2cdb1c42c49047014a56af6916e2cb0220230d0667dc5b86015056a2ae5158ff29cbaf9cde419677e058d23c59a0a07d31\nhtlc_timeout_tx (htlc #5): 0200000000010129253160416b9b2a2ecc303421b7fd1dee52d2e0b08d1a697f3979608334dbb902000000000000000001e1120000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221009353b1d7e6313dc57a3781671b7ed9dde668b30e6f438ff08b13580937264de202200654599d2b9839fe9c88553f7c164a517fc8f0892e942b615460325fee7e074701483045022100c11a3f26356524b556bdfaeeae80f3cdef2cdb1c42c49047014a56af6916e2cb0220230d0667dc5b86015056a2ae5158ff29cbaf9cde419677e058d23c59a0a07d3101008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868fa010000\n</code></pre></div>\n<p>Here are the same test vectors, but when <code>option_static_remotekey</code> is used:</p>\n<div><pre><code>name: simple commitment tx with no HTLCs\nto_local_msat: 7000000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 15000\n# base commitment transaction fee = 10860\n# actual commitment transaction fee = 10860\n# to_local amount 6989140 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 3045022100c3127b33dcc741dd6b05b1e63cbd1a9a7d816f37af9b6756fa2376b056f032370220408b96279808fe57eb7e463710804cdf4f108388bc5cf722d8c848d2c7f9f3b0\n# local_signature = 30440220616210b2cc4d3afb601013c373bbd8aac54febd9f15400379a8cb65ce7deca60022034236c010991beb7ff770510561ae8dc885b8d38d1947248c38f2ae055647142\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8002c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e48454a56a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004730440220616210b2cc4d3afb601013c373bbd8aac54febd9f15400379a8cb65ce7deca60022034236c010991beb7ff770510561ae8dc885b8d38d1947248c38f2ae05564714201483045022100c3127b33dcc741dd6b05b1e63cbd1a9a7d816f37af9b6756fa2376b056f032370220408b96279808fe57eb7e463710804cdf4f108388bc5cf722d8c848d2c7f9f3b001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with all five HTLCs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 0\n# base commitment transaction fee = 0\n# actual commitment transaction fee = 0\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #0 received amount 1000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6988000 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 3044022009b048187705a8cbc9ad73adbe5af148c3d012e1f067961486c822c7af08158c022006d66f3704cfab3eb2dc49dae24e4aa22a6910fc9b424007583204e3621af2e5\n# local_signature = 304402206fc2d1f10ea59951eefac0b4b7c396a3c3d87b71ff0b019796ef4535beaf36f902201765b0181e514d04f4c8ad75659d7037be26cdb3f8bb6f78fe61decef484c3ea\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8007e80300000000000022002052bfef0479d7b293c27e0f1eb294bea154c63a3294ef092c19af51409bce0e2ad007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484e0a06a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402206fc2d1f10ea59951eefac0b4b7c396a3c3d87b71ff0b019796ef4535beaf36f902201765b0181e514d04f4c8ad75659d7037be26cdb3f8bb6f78fe61decef484c3ea01473044022009b048187705a8cbc9ad73adbe5af148c3d012e1f067961486c822c7af08158c022006d66f3704cfab3eb2dc49dae24e4aa22a6910fc9b424007583204e3621af2e501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 5\n# signature for output #0 (htlc-success for htlc #0)\nremote_htlc_signature = 3045022100d9e29616b8f3959f1d3d7f7ce893ffedcdc407717d0de8e37d808c91d3a7c50d022078c3033f6d00095c8720a4bc943c1b45727818c082e4e3ddbc6d3116435b624b\n# local_htlc_signature = 30440220636de5682ef0c5b61f124ec74e8aa2461a69777521d6998295dcea36bc3338110220165285594b23c50b28b82df200234566628a27bcd17f7f14404bd865354eb3ce\nhtlc_success_tx (htlc #0): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b00000000000000000001e8030000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100d9e29616b8f3959f1d3d7f7ce893ffedcdc407717d0de8e37d808c91d3a7c50d022078c3033f6d00095c8720a4bc943c1b45727818c082e4e3ddbc6d3116435b624b014730440220636de5682ef0c5b61f124ec74e8aa2461a69777521d6998295dcea36bc3338110220165285594b23c50b28b82df200234566628a27bcd17f7f14404bd865354eb3ce012000000000000000000000000000000000000000000000000000000000000000008a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac686800000000\n# signature for output #1 (htlc-timeout for htlc #2)\nremote_htlc_signature = 30440220649fe8b20e67e46cbb0d09b4acea87dbec001b39b08dee7bdd0b1f03922a8640022037c462dff79df501cecfdb12ea7f4de91f99230bb544726f6e04527b1f896004\n# local_htlc_signature = 3045022100803159dee7935dba4a1d36a61055ce8fd62caa528573cc221ae288515405a252022029c59e7cffce374fe860100a4a63787e105c3cf5156d40b12dd53ff55ac8cf3f\nhtlc_timeout_tx (htlc #2): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b01000000000000000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220649fe8b20e67e46cbb0d09b4acea87dbec001b39b08dee7bdd0b1f03922a8640022037c462dff79df501cecfdb12ea7f4de91f99230bb544726f6e04527b1f89600401483045022100803159dee7935dba4a1d36a61055ce8fd62caa528573cc221ae288515405a252022029c59e7cffce374fe860100a4a63787e105c3cf5156d40b12dd53ff55ac8cf3f01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #2 (htlc-success for htlc #1)\nremote_htlc_signature = 30440220770fc321e97a19f38985f2e7732dd9fe08d16a2efa4bcbc0429400a447faf49102204d40b417f3113e1b0944ae0986f517564ab4acd3d190503faf97a6e420d43352\n# local_htlc_signature = 3045022100a437cc2ce77400ecde441b3398fea3c3ad8bdad8132be818227fe3c5b8345989022069d45e7fa0ae551ec37240845e2c561ceb2567eacf3076a6a43a502d05865faa\nhtlc_success_tx (htlc #1): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b02000000000000000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220770fc321e97a19f38985f2e7732dd9fe08d16a2efa4bcbc0429400a447faf49102204d40b417f3113e1b0944ae0986f517564ab4acd3d190503faf97a6e420d4335201483045022100a437cc2ce77400ecde441b3398fea3c3ad8bdad8132be818227fe3c5b8345989022069d45e7fa0ae551ec37240845e2c561ceb2567eacf3076a6a43a502d05865faa012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #3 (htlc-timeout for htlc #3)\nremote_htlc_signature = 304402207bcbf4f60a9829b05d2dbab84ed593e0291836be715dc7db6b72a64caf646af802201e489a5a84f7c5cc130398b841d138d031a5137ac8f4c49c770a4959dc3c1363\n# local_htlc_signature = 304402203121d9b9c055f354304b016a36662ee99e1110d9501cb271b087ddb6f382c2c80220549882f3f3b78d9c492de47543cb9a697cecc493174726146536c5954dac7487\nhtlc_timeout_tx (htlc #3): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b03000000000000000001b80b0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207bcbf4f60a9829b05d2dbab84ed593e0291836be715dc7db6b72a64caf646af802201e489a5a84f7c5cc130398b841d138d031a5137ac8f4c49c770a4959dc3c13630147304402203121d9b9c055f354304b016a36662ee99e1110d9501cb271b087ddb6f382c2c80220549882f3f3b78d9c492de47543cb9a697cecc493174726146536c5954dac748701008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #4 (htlc-success for htlc #4)\nremote_htlc_signature = 3044022076dca5cb81ba7e466e349b7128cdba216d4d01659e29b96025b9524aaf0d1899022060de85697b88b21c749702b7d2cfa7dfeaa1f472c8f1d7d9c23f2bf968464b87\n# local_htlc_signature = 3045022100d9080f103cc92bac15ec42464a95f070c7fb6925014e673ee2ea1374d36a7f7502200c65294d22eb20d48564954d5afe04a385551919d8b2ddb4ae2459daaeee1d95\nhtlc_success_tx (htlc #4): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b04000000000000000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022076dca5cb81ba7e466e349b7128cdba216d4d01659e29b96025b9524aaf0d1899022060de85697b88b21c749702b7d2cfa7dfeaa1f472c8f1d7d9c23f2bf968464b8701483045022100d9080f103cc92bac15ec42464a95f070c7fb6925014e673ee2ea1374d36a7f7502200c65294d22eb20d48564954d5afe04a385551919d8b2ddb4ae2459daaeee1d95012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with seven outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 647\n# base commitment transaction fee = 1024\n# actual commitment transaction fee = 1024\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #0 received amount 1000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6986976 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 3045022100a135f9e8a5ed25f7277446c67956b00ce6f610ead2bdec2c2f686155b7814772022059f1f6e1a8b336a68efcc1af3fe4d422d4827332b5b067501b099c47b7b5b5ee\n# local_signature = 30450221009ec15c687898bb4da8b3a833e5ab8bfc51ec6e9202aaa8e66611edfd4a85ed1102203d7183e45078b9735c93450bc3415d3e5a8c576141a711ec6ddcb4a893926bb7\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8007e80300000000000022002052bfef0479d7b293c27e0f1eb294bea154c63a3294ef092c19af51409bce0e2ad007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484e09c6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221009ec15c687898bb4da8b3a833e5ab8bfc51ec6e9202aaa8e66611edfd4a85ed1102203d7183e45078b9735c93450bc3415d3e5a8c576141a711ec6ddcb4a893926bb701483045022100a135f9e8a5ed25f7277446c67956b00ce6f610ead2bdec2c2f686155b7814772022059f1f6e1a8b336a68efcc1af3fe4d422d4827332b5b067501b099c47b7b5b5ee01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 5\n# signature for output #0 (htlc-success for htlc #0)\nremote_htlc_signature = 30450221008437627f9ad84ac67052e2a414a4367b8556fd1f94d8b02590f89f50525cd33502205b9c21ff6e7fc864f2352746ad8ba59182510819acb644e25b8a12fc37bbf24f\n# local_htlc_signature = 30440220344b0deb055230d01703e6c7acd45853c4af2328b49b5d8af4f88a060733406602202ea64f2a43d5751edfe75503cbc35a62e3141b5ed032fa03360faf4ca66f670b\nhtlc_success_tx (htlc #0): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe0000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221008437627f9ad84ac67052e2a414a4367b8556fd1f94d8b02590f89f50525cd33502205b9c21ff6e7fc864f2352746ad8ba59182510819acb644e25b8a12fc37bbf24f014730440220344b0deb055230d01703e6c7acd45853c4af2328b49b5d8af4f88a060733406602202ea64f2a43d5751edfe75503cbc35a62e3141b5ed032fa03360faf4ca66f670b012000000000000000000000000000000000000000000000000000000000000000008a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac686800000000\n# signature for output #1 (htlc-timeout for htlc #2)\nremote_htlc_signature = 304402205a67f92bf6845cf2892b48d874ac1daf88a36495cf8a06f93d83180d930a6f75022031da1621d95c3f335cc06a3056cf960199dae600b7cf89088f65fc53cdbef28c\n# local_htlc_signature = 30450221009e5e3822b0185c6799a95288c597b671d6cc69ab80f43740f00c6c3d0752bdda02206da947a74bd98f3175324dc56fdba86cc783703a120a6f0297537e60632f4c7f\nhtlc_timeout_tx (htlc #2): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe0100000000000000000124060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402205a67f92bf6845cf2892b48d874ac1daf88a36495cf8a06f93d83180d930a6f75022031da1621d95c3f335cc06a3056cf960199dae600b7cf89088f65fc53cdbef28c014830450221009e5e3822b0185c6799a95288c597b671d6cc69ab80f43740f00c6c3d0752bdda02206da947a74bd98f3175324dc56fdba86cc783703a120a6f0297537e60632f4c7f01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #2 (htlc-success for htlc #1)\nremote_htlc_signature = 30440220437e21766054a3eef7f65690c5bcfa9920babbc5af92b819f772f6ea96df6c7402207173622024bd97328cfb26c6665e25c2f5d67c319443ccdc60c903217005d8c8\n# local_htlc_signature = 3045022100fcfc47e36b712624677626cef3dc1d67f6583bd46926a6398fe6b00b0c9a37760220525788257b187fc775c6370d04eadf34d06f3650a63f8df851cee0ecb47a1673\nhtlc_success_tx (htlc #1): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe020000000000000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220437e21766054a3eef7f65690c5bcfa9920babbc5af92b819f772f6ea96df6c7402207173622024bd97328cfb26c6665e25c2f5d67c319443ccdc60c903217005d8c801483045022100fcfc47e36b712624677626cef3dc1d67f6583bd46926a6398fe6b00b0c9a37760220525788257b187fc775c6370d04eadf34d06f3650a63f8df851cee0ecb47a1673012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #3 (htlc-timeout for htlc #3)\nremote_htlc_signature = 304402207436e10737e4df499fc051686d3e11a5bb2310e4d1f1e691d287cef66514791202207cb58e71a6b7a42dd001b7e3ae672ea4f71ea3e1cd412b742e9124abb0739c64\n# local_htlc_signature = 3045022100e78211b8409afb7255ffe37337da87f38646f1faebbdd61bc1920d69e3ead67a02201a626305adfcd16bfb7e9340928d9b6305464eab4aa4c4a3af6646e9b9f69dee\nhtlc_timeout_tx (htlc #3): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe030000000000000000010c0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207436e10737e4df499fc051686d3e11a5bb2310e4d1f1e691d287cef66514791202207cb58e71a6b7a42dd001b7e3ae672ea4f71ea3e1cd412b742e9124abb0739c6401483045022100e78211b8409afb7255ffe37337da87f38646f1faebbdd61bc1920d69e3ead67a02201a626305adfcd16bfb7e9340928d9b6305464eab4aa4c4a3af6646e9b9f69dee01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #4 (htlc-success for htlc #4)\nremote_htlc_signature = 30450221009acd6a827a76bfee50806178dfe0495cd4e1d9c58279c194c7b01520fe68cb8d022024d439047c368883e570997a7d40f0b430cb5a742f507965e7d3063ae3feccca\n# local_htlc_signature = 3044022048762cf546bbfe474f1536365ea7c416e3c0389d60558bc9412cb148fb6ab68202207215d7083b75c96ff9d2b08c59c34e287b66820f530b486a9aa4cdd9c347d5b9\nhtlc_success_tx (htlc #4): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe04000000000000000001da0d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221009acd6a827a76bfee50806178dfe0495cd4e1d9c58279c194c7b01520fe68cb8d022024d439047c368883e570997a7d40f0b430cb5a742f507965e7d3063ae3feccca01473044022048762cf546bbfe474f1536365ea7c416e3c0389d60558bc9412cb148fb6ab68202207215d7083b75c96ff9d2b08c59c34e287b66820f530b486a9aa4cdd9c347d5b9012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with six outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 648\n# base commitment transaction fee = 914\n# actual commitment transaction fee = 1914\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6987086 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402203948f900a5506b8de36a4d8502f94f21dd84fd9c2314ab427d52feaa7a0a19f2022059b6a37a4adaa2c5419dc8aea63c6e2a2ec4c4bde46207f6dc1fcd22152fc6e5\n# local_signature = 3045022100b15f72908ba3382a34ca5b32519240a22300cc6015b6f9418635fb41f3d01d8802207adb331b9ed1575383dca0f2355e86c173802feecf8298fbea53b9d4610583e9\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8006d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e4844e9d6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100b15f72908ba3382a34ca5b32519240a22300cc6015b6f9418635fb41f3d01d8802207adb331b9ed1575383dca0f2355e86c173802feecf8298fbea53b9d4610583e90147304402203948f900a5506b8de36a4d8502f94f21dd84fd9c2314ab427d52feaa7a0a19f2022059b6a37a4adaa2c5419dc8aea63c6e2a2ec4c4bde46207f6dc1fcd22152fc6e501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 4\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 3045022100a031202f3be94678f0e998622ee95ebb6ada8da1e9a5110228b5e04a747351e4022010ca6a21e18314ed53cfaae3b1f51998552a61a468e596368829a50ce40110e0\n# local_htlc_signature = 304502210097e1873b57267730154595187a34949d3744f52933070c74757005e61ce2112e02204ecfba2aa42d4f14bdf8bad4206bb97217b702e6c433e0e1b0ce6587e6d46ec6\nhtlc_timeout_tx (htlc #2): 020000000001010f44041fdfba175987cf4e6135ba2a154e3b7fb96483dc0ed5efc0678e5b6bf10000000000000000000123060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100a031202f3be94678f0e998622ee95ebb6ada8da1e9a5110228b5e04a747351e4022010ca6a21e18314ed53cfaae3b1f51998552a61a468e596368829a50ce40110e00148304502210097e1873b57267730154595187a34949d3744f52933070c74757005e61ce2112e02204ecfba2aa42d4f14bdf8bad4206bb97217b702e6c433e0e1b0ce6587e6d46ec601008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-success for htlc #1)\nremote_htlc_signature = 304402202361012a634aee7835c5ecdd6413dcffa8f404b7e77364c792cff984e4ee71e90220715c5e90baa08daa45a7439b1ee4fa4843ed77b19c058240b69406606d384124\n# local_htlc_signature = 3044022019de73b00f1d818fb388e83b2c8c31f6bce35ac624e215bc12f88f9dc33edf48022006ff814bb9f700ee6abc3294e146fac3efd4f13f0005236b41c0a946ee00c9ae\nhtlc_success_tx (htlc #1): 020000000001010f44041fdfba175987cf4e6135ba2a154e3b7fb96483dc0ed5efc0678e5b6bf10100000000000000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202361012a634aee7835c5ecdd6413dcffa8f404b7e77364c792cff984e4ee71e90220715c5e90baa08daa45a7439b1ee4fa4843ed77b19c058240b69406606d38412401473044022019de73b00f1d818fb388e83b2c8c31f6bce35ac624e215bc12f88f9dc33edf48022006ff814bb9f700ee6abc3294e146fac3efd4f13f0005236b41c0a946ee00c9ae012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #2 (htlc-timeout for htlc #3)\nremote_htlc_signature = 304402207e8e82cd71ed4febeb593732c260456836e97d81896153ecd2b3cf320ca6861702202dd4a30f68f98ced7cc56a36369ac1fdd978248c5ff4ed204fc00cc625532989\n# local_htlc_signature = 3045022100bd0be6100c4fd8f102ec220e1b053e4c4e2ecca25615490150007b40d314dc3902201a1e0ea266965b43164d9e6576f58fa6726d42883dd1c3996d2925c2e2260796\nhtlc_timeout_tx (htlc #3): 020000000001010f44041fdfba175987cf4e6135ba2a154e3b7fb96483dc0ed5efc0678e5b6bf1020000000000000000010b0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207e8e82cd71ed4febeb593732c260456836e97d81896153ecd2b3cf320ca6861702202dd4a30f68f98ced7cc56a36369ac1fdd978248c5ff4ed204fc00cc62553298901483045022100bd0be6100c4fd8f102ec220e1b053e4c4e2ecca25615490150007b40d314dc3902201a1e0ea266965b43164d9e6576f58fa6726d42883dd1c3996d2925c2e226079601008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #3 (htlc-success for htlc #4)\nremote_htlc_signature = 3044022024cd52e4198c8ae0e414a86d86b5a65ea7450f2eb4e783096736d93395eca5ce022078f0094745b45be4d4b2b04dd5978c9e66ba49109e5704403e84aaf5f387d6be\n# local_htlc_signature = 3045022100bbfb9d0a946d420807c86e985d636cceb16e71c3694ed186316251a00cbd807202207773223f9a337e145f64673825be9b30d07ef1542c82188b264bedcf7cda78c6\nhtlc_success_tx (htlc #4): 020000000001010f44041fdfba175987cf4e6135ba2a154e3b7fb96483dc0ed5efc0678e5b6bf103000000000000000001d90d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022024cd52e4198c8ae0e414a86d86b5a65ea7450f2eb4e783096736d93395eca5ce022078f0094745b45be4d4b2b04dd5978c9e66ba49109e5704403e84aaf5f387d6be01483045022100bbfb9d0a946d420807c86e985d636cceb16e71c3694ed186316251a00cbd807202207773223f9a337e145f64673825be9b30d07ef1542c82188b264bedcf7cda78c6012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with six outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2069\n# base commitment transaction fee = 2921\n# actual commitment transaction fee = 3921\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985079 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304502210090b96a2498ce0c0f2fadbec2aab278fed54c1a7838df793ec4d2c78d96ec096202204fdd439c50f90d483baa7b68feeef4bd33bc277695405447bcd0bfb2ca34d7bc\n# local_signature = 3045022100ad9a9bbbb75d506ca3b716b336ee3cf975dd7834fcf129d7dd188146eb58a8b4022061a759ee417339f7fe2ea1e8deb83abb6a74db31a09b7648a932a639cda23e33\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8006d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e48477956a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100ad9a9bbbb75d506ca3b716b336ee3cf975dd7834fcf129d7dd188146eb58a8b4022061a759ee417339f7fe2ea1e8deb83abb6a74db31a09b7648a932a639cda23e330148304502210090b96a2498ce0c0f2fadbec2aab278fed54c1a7838df793ec4d2c78d96ec096202204fdd439c50f90d483baa7b68feeef4bd33bc277695405447bcd0bfb2ca34d7bc01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 4\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 3045022100f33513ee38abf1c582876f921f8fddc06acff48e04515532a32d3938de938ffd02203aa308a2c1863b7d6fdf53159a1465bf2e115c13152546cc5d74483ceaa7f699\n# local_htlc_signature = 3045022100a637902a5d4c9ba9e7c472a225337d5aac9e2e3f6744f76e237132e7619ba0400220035c60d784a031c0d9f6df66b7eab8726a5c25397399ee4aa960842059eb3f9d\nhtlc_timeout_tx (htlc #2): 02000000000101adbe717a63fb658add30ada1e6e12ed257637581898abe475c11d7bbcd65bd4d0000000000000000000175020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100f33513ee38abf1c582876f921f8fddc06acff48e04515532a32d3938de938ffd02203aa308a2c1863b7d6fdf53159a1465bf2e115c13152546cc5d74483ceaa7f69901483045022100a637902a5d4c9ba9e7c472a225337d5aac9e2e3f6744f76e237132e7619ba0400220035c60d784a031c0d9f6df66b7eab8726a5c25397399ee4aa960842059eb3f9d01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-success for htlc #1)\nremote_htlc_signature = 3045022100ce07682cf4b90093c22dc2d9ab2a77ad6803526b655ef857221cc96af5c9e0bf02200f501cee22e7a268af40b555d15a8237c9f36ad67ef1841daf9f6a0267b1e6df\n# local_htlc_signature = 3045022100e57e46234f8782d3ff7aa593b4f7446fb5316c842e693dc63ee324fd49f6a1c302204a2f7b44c48bd26e1554422afae13153eb94b29d3687b733d18930615fb2db61\nhtlc_success_tx (htlc #1): 02000000000101adbe717a63fb658add30ada1e6e12ed257637581898abe475c11d7bbcd65bd4d0100000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100ce07682cf4b90093c22dc2d9ab2a77ad6803526b655ef857221cc96af5c9e0bf02200f501cee22e7a268af40b555d15a8237c9f36ad67ef1841daf9f6a0267b1e6df01483045022100e57e46234f8782d3ff7aa593b4f7446fb5316c842e693dc63ee324fd49f6a1c302204a2f7b44c48bd26e1554422afae13153eb94b29d3687b733d18930615fb2db61012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #2 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100e3e35492e55f82ec0bc2f317ffd7a486d1f7024330fe9743c3559fc39f32ef0c02203d1d4db651fc388a91d5ad8ecdd8e83673063bc8eefe27cfd8c189090e3a23e0\n# local_htlc_signature = 3044022068613fb1b98eb3aec7f44c5b115b12343c2f066c4277c82b5f873dfe68f37f50022028109b4650f3f528ca4bfe9a467aff2e3e43893b61b5159157119d5d95cf1c18\nhtlc_timeout_tx (htlc #3): 02000000000101adbe717a63fb658add30ada1e6e12ed257637581898abe475c11d7bbcd65bd4d020000000000000000015d060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e3e35492e55f82ec0bc2f317ffd7a486d1f7024330fe9743c3559fc39f32ef0c02203d1d4db651fc388a91d5ad8ecdd8e83673063bc8eefe27cfd8c189090e3a23e001473044022068613fb1b98eb3aec7f44c5b115b12343c2f066c4277c82b5f873dfe68f37f50022028109b4650f3f528ca4bfe9a467aff2e3e43893b61b5159157119d5d95cf1c1801008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #3 (htlc-success for htlc #4)\nremote_htlc_signature = 304402207475aeb0212ef9bf5130b60937817ad88c9a87976988ef1f323f026148cc4a850220739fea17ad3257dcad72e509c73eebe86bee30b178467b9fdab213d631b109df\n# local_htlc_signature = 3045022100d315522e09e7d53d2a659a79cb67fef56d6c4bddf3f46df6772d0d20a7beb7c8022070bcc17e288607b6a72be0bd83368bb6d53488db266c1cdb4d72214e4f02ac33\nhtlc_success_tx (htlc #4): 02000000000101adbe717a63fb658add30ada1e6e12ed257637581898abe475c11d7bbcd65bd4d03000000000000000001f2090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207475aeb0212ef9bf5130b60937817ad88c9a87976988ef1f323f026148cc4a850220739fea17ad3257dcad72e509c73eebe86bee30b178467b9fdab213d631b109df01483045022100d315522e09e7d53d2a659a79cb67fef56d6c4bddf3f46df6772d0d20a7beb7c8022070bcc17e288607b6a72be0bd83368bb6d53488db266c1cdb4d72214e4f02ac33012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with five outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2070\n# base commitment transaction fee = 2566\n# actual commitment transaction fee = 5566\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985434 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402204ca1ba260dee913d318271d86e10ca0f5883026fb5653155cff600fb40895223022037b145204b7054a40e08bb1fefbd826f827b40838d3e501423bcc57924bcb50c\n# local_signature = 3044022001014419b5ba00e083ac4e0a85f19afc848aacac2d483b4b525d15e2ae5adbfe022015ebddad6ee1e72b47cb09f3e78459da5be01ccccd95dceca0e056a00cc773c1\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484da966a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022001014419b5ba00e083ac4e0a85f19afc848aacac2d483b4b525d15e2ae5adbfe022015ebddad6ee1e72b47cb09f3e78459da5be01ccccd95dceca0e056a00cc773c10147304402204ca1ba260dee913d318271d86e10ca0f5883026fb5653155cff600fb40895223022037b145204b7054a40e08bb1fefbd826f827b40838d3e501423bcc57924bcb50c01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 3\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 304402205f6b6d12d8d2529fb24f4445630566cf4abbd0f9330ab6c2bdb94222d6a2a0c502202f556258ae6f05b193749e4c541dfcc13b525a5422f6291f073f15617ba8579b\n# local_htlc_signature = 30440220150b11069454da70caf2492ded9e0065c9a57f25ac2a4c52657b1d15b6c6ed85022068a38833b603c8892717206383611bad210f1cbb4b1f87ea29c6c65b9e1cb3e5\nhtlc_timeout_tx (htlc #2): 02000000000101403ad7602b43293497a3a2235a12ecefda4f3a1f1d06e49b1786d945685de1ff0000000000000000000174020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402205f6b6d12d8d2529fb24f4445630566cf4abbd0f9330ab6c2bdb94222d6a2a0c502202f556258ae6f05b193749e4c541dfcc13b525a5422f6291f073f15617ba8579b014730440220150b11069454da70caf2492ded9e0065c9a57f25ac2a4c52657b1d15b6c6ed85022068a38833b603c8892717206383611bad210f1cbb4b1f87ea29c6c65b9e1cb3e501008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100f960dfb1c9aee7ce1437efa65b523e399383e8149790e05d8fed27ff6e42fe0002202fe8613e062ffe0b0c518cc4101fba1c6de70f64a5bcc7ae663f2efae43b8546\n# local_htlc_signature = 30450221009a6ed18e6873bc3644332a6ee21c152a5b102821865350df7a8c74451a51f9f2022050d801fb4895d7d7fbf452824c0168347f5c0cbe821cf6a97a63af5b8b2563c6\nhtlc_timeout_tx (htlc #3): 02000000000101403ad7602b43293497a3a2235a12ecefda4f3a1f1d06e49b1786d945685de1ff010000000000000000015c060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100f960dfb1c9aee7ce1437efa65b523e399383e8149790e05d8fed27ff6e42fe0002202fe8613e062ffe0b0c518cc4101fba1c6de70f64a5bcc7ae663f2efae43b8546014830450221009a6ed18e6873bc3644332a6ee21c152a5b102821865350df7a8c74451a51f9f2022050d801fb4895d7d7fbf452824c0168347f5c0cbe821cf6a97a63af5b8b2563c601008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #2 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100ae5fc7717ae684bc1fcf9020854e5dbe9842c9e7472879ac06ff95ac2bb10e4e022057728ada4c00083a3e65493fb5d50a232165948a1a0f530ef63185c2c8c56504\n# local_htlc_signature = 30440220408ad3009827a8fccf774cb285587686bfb2ed041f89a89453c311ce9c8ee0f902203c7392d9f8306d3a46522a66bd2723a7eb2628cb2d9b34d4c104f1766bf37502\nhtlc_success_tx (htlc #4): 02000000000101403ad7602b43293497a3a2235a12ecefda4f3a1f1d06e49b1786d945685de1ff02000000000000000001f1090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100ae5fc7717ae684bc1fcf9020854e5dbe9842c9e7472879ac06ff95ac2bb10e4e022057728ada4c00083a3e65493fb5d50a232165948a1a0f530ef63185c2c8c56504014730440220408ad3009827a8fccf774cb285587686bfb2ed041f89a89453c311ce9c8ee0f902203c7392d9f8306d3a46522a66bd2723a7eb2628cb2d9b34d4c104f1766bf37502012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with five outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2194\n# base commitment transaction fee = 2720\n# actual commitment transaction fee = 5720\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985280 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402204bb3d6e279d71d9da414c82de42f1f954267c762b2e2eb8b76bc3be4ea07d4b0022014febc009c5edc8c3fc5d94015de163200f780046f1c293bfed8568f08b70fb3\n# local_signature = 3044022072c2e2b1c899b2242656a537dde2892fa3801be0d6df0a87836c550137acde8302201654aa1974d37a829083c3ba15088689f30b56d6a4f6cb14c7bad0ee3116d398\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e48440966a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022072c2e2b1c899b2242656a537dde2892fa3801be0d6df0a87836c550137acde8302201654aa1974d37a829083c3ba15088689f30b56d6a4f6cb14c7bad0ee3116d3980147304402204bb3d6e279d71d9da414c82de42f1f954267c762b2e2eb8b76bc3be4ea07d4b0022014febc009c5edc8c3fc5d94015de163200f780046f1c293bfed8568f08b70fb301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 3\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 3045022100939726680351a7856c1bc386d4a1f422c7d29bd7b56afc139570f508474e6c40022023175a799ccf44c017fbaadb924c40b2a12115a5b7d0dfd3228df803a2de8450\n# local_htlc_signature = 304502210099c98c2edeeee6ec0fb5f3bea8b79bb016a2717afa9b5072370f34382de281d302206f5e2980a995e045cf90a547f0752a7ee99d48547bc135258fe7bc07e0154301\nhtlc_timeout_tx (htlc #2): 02000000000101153cd825fdb3aa624bfe513e8031d5d08c5e582fb3d1d1fe8faf27d3eed410cd0000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100939726680351a7856c1bc386d4a1f422c7d29bd7b56afc139570f508474e6c40022023175a799ccf44c017fbaadb924c40b2a12115a5b7d0dfd3228df803a2de84500148304502210099c98c2edeeee6ec0fb5f3bea8b79bb016a2717afa9b5072370f34382de281d302206f5e2980a995e045cf90a547f0752a7ee99d48547bc135258fe7bc07e015430101008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3044022021bb883bf324553d085ba2e821cad80c28ef8b303dbead8f98e548783c02d1600220638f9ef2a9bba25869afc923f4b5dc38be3bb459f9efa5d869392d5f7779a4a0\n# local_htlc_signature = 3045022100fd85bd7697b89c08ec12acc8ba89b23090637d83abd26ca37e01ae93e67c367302202b551fe69386116c47f984aab9c8dfd25d864dcde5d3389cfbef2447a85c4b77\nhtlc_timeout_tx (htlc #3): 02000000000101153cd825fdb3aa624bfe513e8031d5d08c5e582fb3d1d1fe8faf27d3eed410cd010000000000000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022021bb883bf324553d085ba2e821cad80c28ef8b303dbead8f98e548783c02d1600220638f9ef2a9bba25869afc923f4b5dc38be3bb459f9efa5d869392d5f7779a4a001483045022100fd85bd7697b89c08ec12acc8ba89b23090637d83abd26ca37e01ae93e67c367302202b551fe69386116c47f984aab9c8dfd25d864dcde5d3389cfbef2447a85c4b7701008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #2 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100c9e6f0454aa598b905a35e641a70cc9f67b5f38cc4b00843a041238c4a9f1c4a0220260a2822a62da97e44583e837245995ca2e36781769c52f19e498efbdcca262b\n# local_htlc_signature = 30450221008a9f2ea24cd455c2b64c1472a5fa83865b0a5f49a62b661801e884cf2849af8302204d44180e50bf6adfcf1c1e581d75af91aba4e28681ce4a5ee5f3cbf65eca10f3\nhtlc_success_tx (htlc #4): 02000000000101153cd825fdb3aa624bfe513e8031d5d08c5e582fb3d1d1fe8faf27d3eed410cd020000000000000000019a090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100c9e6f0454aa598b905a35e641a70cc9f67b5f38cc4b00843a041238c4a9f1c4a0220260a2822a62da97e44583e837245995ca2e36781769c52f19e498efbdcca262b014830450221008a9f2ea24cd455c2b64c1472a5fa83865b0a5f49a62b661801e884cf2849af8302204d44180e50bf6adfcf1c1e581d75af91aba4e28681ce4a5ee5f3cbf65eca10f3012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with four outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2195\n# base commitment transaction fee = 2344\n# actual commitment transaction fee = 7344\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985656 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402201a8c1b1f9671cd9e46c7323a104d7047cc48d3ee80d40d4512e0c72b8dc65666022066d7f9a2ce18c9eb22d2739ffcce05721c767f9b607622a31b6ea5793ddce403\n# local_signature = 3044022044d592025b610c0d678f65032e87035cdfe89d1598c522cc32524ae8172417c30220749fef9d5b2ae8cdd91ece442ba8809bc891efedae2291e578475f97715d1767\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8004b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484b8976a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022044d592025b610c0d678f65032e87035cdfe89d1598c522cc32524ae8172417c30220749fef9d5b2ae8cdd91ece442ba8809bc891efedae2291e578475f97715d17670147304402201a8c1b1f9671cd9e46c7323a104d7047cc48d3ee80d40d4512e0c72b8dc65666022066d7f9a2ce18c9eb22d2739ffcce05721c767f9b607622a31b6ea5793ddce40301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 2\n# signature for output #0 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100e57b845066a06ee7c2cbfc29eabffe52daa9bf6f6de760066d04df9f9b250e0002202ffb197f0e6e0a77a75a9aff27014bd3de83b7f748d7efef986abe655e1dd50e\n# local_htlc_signature = 3045022100ecc8c6529d0b2316d046f0f0757c1e1c25a636db168ec4f3aa1b9278df685dc0022067ae6b65e936f1337091f7b18a15935b608c5f2cdddb2f892ed0babfdd376d76\nhtlc_timeout_tx (htlc #3): 020000000001018130a10f09b13677ba2885a8bca32860f3a952e5912b829a473639b5a2c07b900000000000000000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e57b845066a06ee7c2cbfc29eabffe52daa9bf6f6de760066d04df9f9b250e0002202ffb197f0e6e0a77a75a9aff27014bd3de83b7f748d7efef986abe655e1dd50e01483045022100ecc8c6529d0b2316d046f0f0757c1e1c25a636db168ec4f3aa1b9278df685dc0022067ae6b65e936f1337091f7b18a15935b608c5f2cdddb2f892ed0babfdd376d7601008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #1 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100d193b7ecccad8057571620a0b1ffa6c48e9483311723b59cf536043b20bc51550220546d4bd37b3b101ecda14f6c907af46ec391abce1cd9c7ce22b1a62b534f2f2a\n# local_htlc_signature = 3044022014d66f11f9cacf923807eba49542076c5fe5cccf252fb08fe98c78ef3ca6ab5402201b290dbe043cc512d9d78de074a5a129b8759bc6a6c546b190d120b690bd6e82\nhtlc_success_tx (htlc #4): 020000000001018130a10f09b13677ba2885a8bca32860f3a952e5912b829a473639b5a2c07b900100000000000000000199090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100d193b7ecccad8057571620a0b1ffa6c48e9483311723b59cf536043b20bc51550220546d4bd37b3b101ecda14f6c907af46ec391abce1cd9c7ce22b1a62b534f2f2a01473044022014d66f11f9cacf923807eba49542076c5fe5cccf252fb08fe98c78ef3ca6ab5402201b290dbe043cc512d9d78de074a5a129b8759bc6a6c546b190d120b690bd6e82012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with four outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 3702\n# base commitment transaction fee = 3953\n# actual commitment transaction fee = 8953\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6984047 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304502210092a587aeb777f869e7ff0d7898ea619ee26a3dacd1f3672b945eea600be431100220077ee9eae3528d15251f2a52b607b189820e57a6ccfac8d1af502b132ee40169\n# local_signature = 3045022100e5efb73c32d32da2d79702299b6317de6fb24a60476e3855926d78484dd1b3c802203557cb66a42c944ef06e00bcc4da35a5bcb2f185aab0f8e403e519e1d66aaf75\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8004b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e4846f916a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100e5efb73c32d32da2d79702299b6317de6fb24a60476e3855926d78484dd1b3c802203557cb66a42c944ef06e00bcc4da35a5bcb2f185aab0f8e403e519e1d66aaf750148304502210092a587aeb777f869e7ff0d7898ea619ee26a3dacd1f3672b945eea600be431100220077ee9eae3528d15251f2a52b607b189820e57a6ccfac8d1af502b132ee4016901475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 2\n# signature for output #0 (htlc-timeout for htlc #3)\nremote_htlc_signature = 304402206fa54c11f98c3bae1e93df43fc7affeb05b476bf8060c03e29c377c69bc08e8b0220672701cce50d5c379ff45a5d2cfe48ac44973adb066ac32608e21221d869bb89\n# local_htlc_signature = 304402206e36c683ebf2cb16bcef3d5439cf8b53cd97280a365ed8acd7abb85a8ba5f21c02206e8621edfc2a5766cbc96eb67fd501127ff163eb6b85518a39f7d4974aef126f\nhtlc_timeout_tx (htlc #3): 020000000001018db483bff65c70ee71d8282aeec5a880e2e2b39e45772bda5460403095c62e3f0000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402206fa54c11f98c3bae1e93df43fc7affeb05b476bf8060c03e29c377c69bc08e8b0220672701cce50d5c379ff45a5d2cfe48ac44973adb066ac32608e21221d869bb890147304402206e36c683ebf2cb16bcef3d5439cf8b53cd97280a365ed8acd7abb85a8ba5f21c02206e8621edfc2a5766cbc96eb67fd501127ff163eb6b85518a39f7d4974aef126f01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #1 (htlc-success for htlc #4)\nremote_htlc_signature = 3044022057649739b0eb74d541ead0dfdb3d4b2c15aa192720031044c3434c67812e5ca902201e5ede42d960ae551707f4a6b34b09393cf4dee2418507daa022e3550dbb5817\n# local_htlc_signature = 304402207faad26678c8850e01b4a0696d60841f7305e1832b786110ee9075cb92ed14a30220516ef8ee5dfa80824ea28cbcec0dd95f8b847146257c16960db98507db15ffdc\nhtlc_success_tx (htlc #4): 020000000001018db483bff65c70ee71d8282aeec5a880e2e2b39e45772bda5460403095c62e3f0100000000000000000176050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022057649739b0eb74d541ead0dfdb3d4b2c15aa192720031044c3434c67812e5ca902201e5ede42d960ae551707f4a6b34b09393cf4dee2418507daa022e3550dbb58170147304402207faad26678c8850e01b4a0696d60841f7305e1832b786110ee9075cb92ed14a30220516ef8ee5dfa80824ea28cbcec0dd95f8b847146257c16960db98507db15ffdc012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with three outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 3703\n# base commitment transaction fee = 3317\n# actual commitment transaction fee = 11317\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6984683 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 3045022100b495d239772a237ff2cf354b1b11be152fd852704cb184e7356d13f2fb1e5e430220723db5cdb9cbd6ead7bfd3deb419cf41053a932418cbb22a67b581f40bc1f13e\n# local_signature = 304402201b736d1773a124c745586217a75bed5f66c05716fbe8c7db4fdb3c3069741cdd02205083f39c321c1bcadfc8d97e3c791a66273d936abac0c6a2fde2ed46019508e1\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8003a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484eb936a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402201b736d1773a124c745586217a75bed5f66c05716fbe8c7db4fdb3c3069741cdd02205083f39c321c1bcadfc8d97e3c791a66273d936abac0c6a2fde2ed46019508e101483045022100b495d239772a237ff2cf354b1b11be152fd852704cb184e7356d13f2fb1e5e430220723db5cdb9cbd6ead7bfd3deb419cf41053a932418cbb22a67b581f40bc1f13e01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 1\n# signature for output #0 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100c34c61735f93f2e324cc873c3b248111ccf8f6db15d5969583757010d4ad2b4602207867bb919b2ddd6387873e425345c9b7fd18d1d66aba41f3607bc2896ef3c30a\n# local_htlc_signature = 3045022100988c143e2110067117d2321bdd4bd16ca1734c98b29290d129384af0962b634e02206c1b02478878c5f547018b833986578f90c3e9be669fe5788ad0072a55acbb05\nhtlc_success_tx (htlc #4): 0200000000010120060e4a29579d429f0f27c17ee5f1ee282f20d706d6f90b63d35946d8f3029a0000000000000000000175050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100c34c61735f93f2e324cc873c3b248111ccf8f6db15d5969583757010d4ad2b4602207867bb919b2ddd6387873e425345c9b7fd18d1d66aba41f3607bc2896ef3c30a01483045022100988c143e2110067117d2321bdd4bd16ca1734c98b29290d129384af0962b634e02206c1b02478878c5f547018b833986578f90c3e9be669fe5788ad0072a55acbb05012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with three outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 4914\n# base commitment transaction fee = 4402\n# actual commitment transaction fee = 12402\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6983598 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 3045022100b4b16d5f8cc9fc4c1aff48831e832a0d8990e133978a66e302c133550954a44d022073573ce127e2200d316f6b612803a5c0c97b8d20e1e44dbe2ac0dd2fb8c95244\n# local_signature = 3045022100d72638bc6308b88bb6d45861aae83e5b9ff6e10986546e13bce769c70036e2620220320be7c6d66d22f30b9fcd52af66531505b1310ca3b848c19285b38d8a1a8c19\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8003a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484ae8f6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100d72638bc6308b88bb6d45861aae83e5b9ff6e10986546e13bce769c70036e2620220320be7c6d66d22f30b9fcd52af66531505b1310ca3b848c19285b38d8a1a8c1901483045022100b4b16d5f8cc9fc4c1aff48831e832a0d8990e133978a66e302c133550954a44d022073573ce127e2200d316f6b612803a5c0c97b8d20e1e44dbe2ac0dd2fb8c9524401475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 1\n# signature for output #0 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100f43591c156038ba217756006bb3c55f7d113a325cdd7d9303c82115372858d68022016355b5aadf222bc8d12e426c75f4a03423917b2443a103eb2a498a3a2234374\n# local_htlc_signature = 30440220585dee80fafa264beac535c3c0bb5838ac348b156fdc982f86adc08dfc9bfd250220130abb82f9f295cc9ef423dcfef772fde2acd85d9df48cc538981d26a10a9c10\nhtlc_success_tx (htlc #4): 02000000000101a9172908eace869cc35128c31fc2ab502f72e4dff31aab23e0244c4b04b11ab00000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100f43591c156038ba217756006bb3c55f7d113a325cdd7d9303c82115372858d68022016355b5aadf222bc8d12e426c75f4a03423917b2443a103eb2a498a3a2234374014730440220585dee80fafa264beac535c3c0bb5838ac348b156fdc982f86adc08dfc9bfd250220130abb82f9f295cc9ef423dcfef772fde2acd85d9df48cc538981d26a10a9c10012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with two outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 4915\n# base commitment transaction fee = 3558\n# actual commitment transaction fee = 15558\n# to_local amount 6984442 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402203a286936e74870ca1459c700c71202af0381910a6bfab687ef494ef1bc3e02c902202506c362d0e3bee15e802aa729bf378e051644648253513f1c085b264cc2a720\n# local_signature = 30450221008a953551f4d67cb4df3037207fc082ddaf6be84d417b0bd14c80aab66f1b01a402207508796dc75034b2dee876fe01dc05a08b019f3e5d689ac8842ade2f1befccf5\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8002c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484fa926a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221008a953551f4d67cb4df3037207fc082ddaf6be84d417b0bd14c80aab66f1b01a402207508796dc75034b2dee876fe01dc05a08b019f3e5d689ac8842ade2f1befccf50147304402203a286936e74870ca1459c700c71202af0381910a6bfab687ef494ef1bc3e02c902202506c362d0e3bee15e802aa729bf378e051644648253513f1c085b264cc2a72001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with two outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 9651180\n# base commitment transaction fee = 6987454\n# actual commitment transaction fee = 6999454\n# to_local amount 546 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402200a8544eba1d216f5c5e530597665fa9bec56943c0f66d98fc3d028df52d84f7002201e45fa5c6bc3a506cc2553e7d1c0043a9811313fc39c954692c0d47cfce2bbd3\n# local_signature = 3045022100e11b638c05c650c2f63a421d36ef8756c5ce82f2184278643520311cdf50aa200220259565fb9c8e4a87ccaf17f27a3b9ca4f20625754a0920d9c6c239d8156a11de\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b800222020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80ec0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e4840400483045022100e11b638c05c650c2f63a421d36ef8756c5ce82f2184278643520311cdf50aa200220259565fb9c8e4a87ccaf17f27a3b9ca4f20625754a0920d9c6c239d8156a11de0147304402200a8544eba1d216f5c5e530597665fa9bec56943c0f66d98fc3d028df52d84f7002201e45fa5c6bc3a506cc2553e7d1c0043a9811313fc39c954692c0d47cfce2bbd301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with one output untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 9651181\n# base commitment transaction fee = 6987455\n# actual commitment transaction fee = 7000000\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402202ade0142008309eb376736575ad58d03e5b115499709c6db0b46e36ff394b492022037b63d78d66404d6504d4c4ac13be346f3d1802928a6d3ad95a6a944227161a2\n# local_signature = 304402207e8d51e0c570a5868a78414f4e0cbfaed1106b171b9581542c30718ee4eb95ba02203af84194c97adf98898c9afe2f2ed4a7f8dba05a2dfab28ac9d9c604aa49a379\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8001c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484040047304402207e8d51e0c570a5868a78414f4e0cbfaed1106b171b9581542c30718ee4eb95ba02203af84194c97adf98898c9afe2f2ed4a7f8dba05a2dfab28ac9d9c604aa49a3790147304402202ade0142008309eb376736575ad58d03e5b115499709c6db0b46e36ff394b492022037b63d78d66404d6504d4c4ac13be346f3d1802928a6d3ad95a6a944227161a201475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with fee greater than funder amount\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 9651936\n# base commitment transaction fee = 6988001\n# actual commitment transaction fee = 7000000\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402202ade0142008309eb376736575ad58d03e5b115499709c6db0b46e36ff394b492022037b63d78d66404d6504d4c4ac13be346f3d1802928a6d3ad95a6a944227161a2\n# local_signature = 304402207e8d51e0c570a5868a78414f4e0cbfaed1106b171b9581542c30718ee4eb95ba02203af84194c97adf98898c9afe2f2ed4a7f8dba05a2dfab28ac9d9c604aa49a379\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8001c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484040047304402207e8d51e0c570a5868a78414f4e0cbfaed1106b171b9581542c30718ee4eb95ba02203af84194c97adf98898c9afe2f2ed4a7f8dba05a2dfab28ac9d9c604aa49a3790147304402202ade0142008309eb376736575ad58d03e5b115499709c6db0b46e36ff394b492022037b63d78d66404d6504d4c4ac13be346f3d1802928a6d3ad95a6a944227161a201475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with 3 htlc outputs, 2 offered having the same amount and preimage\nto_local_msat: 6987999999\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 253\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #5 offered amount 5000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868\n# HTLC #6 offered amount 5000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868\n# HTLC #5 and 6 have CLTV 506 and 505, respectively, and preimage 0505050505050505050505050505050505050505050505050505050505050505\nremote_signature = 304402207d0870964530f97b62497b11153c551dca0a1e226815ef0a336651158da0f82402200f5378beee0e77759147b8a0a284decd11bfd2bc55c8fafa41c134fe996d43c8\n# local_signature = 304402200d10bf5bc5397fc59d7188ae438d80c77575595a2d488e41bd6363a810cc8d72022012b57e714fbbfdf7a28c47d5b370cb8ac37c8545f596216e5b21e9b236ef457c\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2d8813000000000000220020305c12e1a0bc21e283c131cea1c66d68857d28b7b2fce0a6fbc40c164852121b8813000000000000220020305c12e1a0bc21e283c131cea1c66d68857d28b7b2fce0a6fbc40c164852121bc0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484a69f6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402200d10bf5bc5397fc59d7188ae438d80c77575595a2d488e41bd6363a810cc8d72022012b57e714fbbfdf7a28c47d5b370cb8ac37c8545f596216e5b21e9b236ef457c0147304402207d0870964530f97b62497b11153c551dca0a1e226815ef0a336651158da0f82402200f5378beee0e77759147b8a0a284decd11bfd2bc55c8fafa41c134fe996d43c801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 3\n# signature for output #0 (htlc-success for htlc #1)\nremote_htlc_signature = 3045022100b470fe12e5b7fea9eccb8cbff1972cea4f96758041898982a02bcc7f9d56d50b0220338a75b2afaab4ec00cdd2d9273c68c7581ff5a28bcbb40c4d138b81f1d45ce5\n# local_htlc_signature = 3044022017b90c65207522a907fb6a137f9dd528b3389465a8ae72308d9e1d564f512cf402204fc917b4f0e88604a3e994f85bfae7c7c1f9d9e9f78e8cd112e0889720d9405b\nhtlc_success_tx (htlc #1): 020000000001014bdccf28653066a2c554cafeffdfe1e678e64a69b056684deb0c4fba909423ec000000000000000000011f070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100b470fe12e5b7fea9eccb8cbff1972cea4f96758041898982a02bcc7f9d56d50b0220338a75b2afaab4ec00cdd2d9273c68c7581ff5a28bcbb40c4d138b81f1d45ce501473044022017b90c65207522a907fb6a137f9dd528b3389465a8ae72308d9e1d564f512cf402204fc917b4f0e88604a3e994f85bfae7c7c1f9d9e9f78e8cd112e0889720d9405b012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #1 (htlc-timeout for htlc #6)\nremote_htlc_signature = 3045022100b575379f6d8743cb0087648f81cfd82d17a97fbf8f67e058c65ce8b9d25df9500220554a210d65b02d9f36c6adf0f639430ca8293196ba5089bf67cc3a9813b7b00a\n# local_htlc_signature = 3045022100ee2e16b90930a479b13f8823a7f14b600198c838161160b9436ed086d3fc57e002202a66fa2324f342a17129949c640bfe934cbc73a869ba7c06aa25c5a3d0bfb53d\nhtlc_timeout_tx (htlc #6): 020000000001014bdccf28653066a2c554cafeffdfe1e678e64a69b056684deb0c4fba909423ec01000000000000000001e1120000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100b575379f6d8743cb0087648f81cfd82d17a97fbf8f67e058c65ce8b9d25df9500220554a210d65b02d9f36c6adf0f639430ca8293196ba5089bf67cc3a9813b7b00a01483045022100ee2e16b90930a479b13f8823a7f14b600198c838161160b9436ed086d3fc57e002202a66fa2324f342a17129949c640bfe934cbc73a869ba7c06aa25c5a3d0bfb53d01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868f9010000\n# signature for output #2 (htlc-timeout for htlc #5)\nremote_htlc_signature = 30440220471c9f3ad92e49b13b7b8059f43ecf8f7887b0dccbb9fdb54bfe23d62a8ae332022024bd22fae0740e86a44228c35330da9526fd7306dffb2b9dc362d5e78abef7cc\n# local_htlc_signature = 304402207157f452f2506d73c315192311893800cfb3cc235cc1185b1cfcc136b55230db022014be242dbc6c5da141fec4034e7f387f74d6ff1899453d72ba957467540e1ecb\nhtlc_timeout_tx (htlc #5): 020000000001014bdccf28653066a2c554cafeffdfe1e678e64a69b056684deb0c4fba909423ec02000000000000000001e1120000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220471c9f3ad92e49b13b7b8059f43ecf8f7887b0dccbb9fdb54bfe23d62a8ae332022024bd22fae0740e86a44228c35330da9526fd7306dffb2b9dc362d5e78abef7cc0147304402207157f452f2506d73c315192311893800cfb3cc235cc1185b1cfcc136b55230db022014be242dbc6c5da141fec4034e7f387f74d6ff1899453d72ba957467540e1ecb01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868fa010000\n</code></pre></div>\n<h1><a><svg><path></path></svg></a>Appendix D: Per-commitment Secret Generation Test Vectors</h1>\n<p>These test the generation algorithm that all nodes use.</p>\n<h2><a><svg><path></path></svg></a>Generation Tests</h2>\n<div><pre><code>name: generate_from_seed 0 final node\nseed: 0x0000000000000000000000000000000000000000000000000000000000000000\nI: 281474976710655\noutput: 0x02a40c85b6f28da08dfdbe0926c53fab2de6d28c10301f8f7c4073d5e42e3148\n\nname: generate_from_seed FF final node\nseed: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nI: 281474976710655\noutput: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\n\nname: generate_from_seed FF alternate bits 1\nseed: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nI: 0xaaaaaaaaaaa\noutput: 0x56f4008fb007ca9acf0e15b054d5c9fd12ee06cea347914ddbaed70d1c13a528\n\nname: generate_from_seed FF alternate bits 2\nseed: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nI: 0x555555555555\noutput: 0x9015daaeb06dba4ccc05b91b2f73bd54405f2be9f217fbacd3c5ac2e62327d31\n\nname: generate_from_seed 01 last nontrivial node\nseed: 0x0101010101010101010101010101010101010101010101010101010101010101\nI: 1\noutput: 0x915c75942a26bb3a433a8ce2cb0427c29ec6c1775cfc78328b57f6ba7bfeaa9c\n</code></pre></div>\n<h2><a><svg><path></path></svg></a>Storage Tests</h2>\n<p>These test the optional compact storage system. In many cases, an\nincorrect entry cannot be determined until its parent is revealed: an entry is\nspecifically corrupted, along with all its children.</p>\n<p>For\nthese tests a seed of <code>0xFFF...FF</code> is used, and incorrect entries are\nseeded with <code>0x000...00</code>.</p>\n<div><pre><code>name: insert_secret correct sequence\nI: 281474976710655\nsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\noutput: OK\nI: 281474976710654\nsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\noutput: OK\nI: 281474976710653\nsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\noutput: OK\nI: 281474976710652\nsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\noutput: OK\nI: 281474976710651\nsecret: 0xc65716add7aa98ba7acb236352d665cab17345fe45b55fb879ff80e6bd0c41dd\noutput: OK\nI: 281474976710650\nsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\noutput: OK\nI: 281474976710649\nsecret: 0xa5a64476122ca0925fb344bdc1854c1c0a59fc614298e50a33e331980a220f32\noutput: OK\nI: 281474976710648\nsecret: 0x05cde6323d949933f7f7b78776bcc1ea6d9b31447732e3802e1f7ac44b650e17\noutput: OK\n\nname: insert_secret #1 incorrect\nI: 281474976710655\nsecret: 0x02a40c85b6f28da08dfdbe0926c53fab2de6d28c10301f8f7c4073d5e42e3148\noutput: OK\nI: 281474976710654\nsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\noutput: ERROR\n\nname: insert_secret #2 incorrect (#1 derived from incorrect)\nI: 281474976710655\nsecret: 0x02a40c85b6f28da08dfdbe0926c53fab2de6d28c10301f8f7c4073d5e42e3148\noutput: OK\nI: 281474976710654\nsecret: 0xdddc3a8d14fddf2b68fa8c7fbad2748274937479dd0f8930d5ebb4ab6bd866a3\noutput: OK\nI: 281474976710653\nsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\noutput: OK\nI: 281474976710652\nsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\noutput: ERROR\n\nname: insert_secret #3 incorrect\nI: 281474976710655\nsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\noutput: OK\nI: 281474976710654\nsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\noutput: OK\nI: 281474976710653\nsecret: 0xc51a18b13e8527e579ec56365482c62f180b7d5760b46e9477dae59e87ed423a\noutput: OK\nI: 281474976710652\nsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\noutput: ERROR\n\nname: insert_secret #4 incorrect (1,2,3 derived from incorrect)\nI: 281474976710655\nsecret: 0x02a40c85b6f28da08dfdbe0926c53fab2de6d28c10301f8f7c4073d5e42e3148\noutput: OK\nI: 281474976710654\nsecret: 0xdddc3a8d14fddf2b68fa8c7fbad2748274937479dd0f8930d5ebb4ab6bd866a3\noutput: OK\nI: 281474976710653\nsecret: 0xc51a18b13e8527e579ec56365482c62f180b7d5760b46e9477dae59e87ed423a\noutput: OK\nI: 281474976710652\nsecret: 0xba65d7b0ef55a3ba300d4e87af29868f394f8f138d78a7011669c79b37b936f4\noutput: OK\nI: 281474976710651\nsecret: 0xc65716add7aa98ba7acb236352d665cab17345fe45b55fb879ff80e6bd0c41dd\noutput: OK\nI: 281474976710650\nsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\noutput: OK\nI: 281474976710649\nsecret: 0xa5a64476122ca0925fb344bdc1854c1c0a59fc614298e50a33e331980a220f32\noutput: OK\nI: 281474976710648\nsecret: 0x05cde6323d949933f7f7b78776bcc1ea6d9b31447732e3802e1f7ac44b650e17\noutput: ERROR\n\nname: insert_secret #5 incorrect\nI: 281474976710655\nsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\noutput: OK\nI: 281474976710654\nsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\noutput: OK\nI: 281474976710653\nsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\noutput: OK\nI: 281474976710652\nsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\noutput: OK\nI: 281474976710651\nsecret: 0x631373ad5f9ef654bb3dade742d09504c567edd24320d2fcd68e3cc47e2ff6a6\noutput: OK\nI: 281474976710650\nsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\noutput: ERROR\n\nname: insert_secret #6 incorrect (5 derived from incorrect)\nI: 281474976710655\nsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\noutput: OK\nI: 281474976710654\nsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\noutput: OK\nI: 281474976710653\nsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\noutput: OK\nI: 281474976710652\nsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\noutput: OK\nI: 281474976710651\nsecret: 0x631373ad5f9ef654bb3dade742d09504c567edd24320d2fcd68e3cc47e2ff6a6\noutput: OK\nI: 281474976710650\nsecret: 0xb7e76a83668bde38b373970155c868a653304308f9896692f904a23731224bb1\noutput: OK\nI: 281474976710649\nsecret: 0xa5a64476122ca0925fb344bdc1854c1c0a59fc614298e50a33e331980a220f32\noutput: OK\nI: 281474976710648\nsecret: 0x05cde6323d949933f7f7b78776bcc1ea6d9b31447732e3802e1f7ac44b650e17\noutput: ERROR\n\nname: insert_secret #7 incorrect\nI: 281474976710655\nsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\noutput: OK\nI: 281474976710654\nsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\noutput: OK\nI: 281474976710653\nsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\noutput: OK\nI: 281474976710652\nsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\noutput: OK\nI: 281474976710651\nsecret: 0xc65716add7aa98ba7acb236352d665cab17345fe45b55fb879ff80e6bd0c41dd\noutput: OK\nI: 281474976710650\nsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\noutput: OK\nI: 281474976710649\nsecret: 0xe7971de736e01da8ed58b94c2fc216cb1dca9e326f3a96e7194fe8ea8af6c0a3\noutput: OK\nI: 281474976710648\nsecret: 0x05cde6323d949933f7f7b78776bcc1ea6d9b31447732e3802e1f7ac44b650e17\noutput: ERROR\n\nname: insert_secret #8 incorrect\nI: 281474976710655\nsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\noutput: OK\nI: 281474976710654\nsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\noutput: OK\nI: 281474976710653\nsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\noutput: OK\nI: 281474976710652\nsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\noutput: OK\nI: 281474976710651\nsecret: 0xc65716add7aa98ba7acb236352d665cab17345fe45b55fb879ff80e6bd0c41dd\noutput: OK\nI: 281474976710650\nsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\noutput: OK\nI: 281474976710649\nsecret: 0xa5a64476122ca0925fb344bdc1854c1c0a59fc614298e50a33e331980a220f32\noutput: OK\nI: 281474976710648\nsecret: 0xa7efbc61aac46d34f77778bac22c8a20c6a46ca460addc49009bda875ec88fa4\noutput: ERROR\n</code></pre></div>\n<h1><a><svg><path></path></svg></a>Appendix E: Key Derivation Test Vectors</h1>\n<p>These test the derivation for <code>localpubkey</code>, <code>remotepubkey</code>, <code>local_htlcpubkey</code>, <code>remote_htlcpubkey</code>, <code>local_delayedpubkey</code>, and\n<code>remote_delayedpubkey</code> (which use the same formula), as well as the <code>revocationpubkey</code>.</p>\n<p>All of them use the following secrets (and thus the derived points):</p>\n<div><pre><code>base_secret: 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\nper_commitment_secret: 0x1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100\nbase_point: 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2\nper_commitment_point: 0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486\n\nname: derivation of pubkey from basepoint and per_commitment_point\n# SHA256(per_commitment_point || basepoint)\n# =&gt; SHA256(0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486 || 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n# = 0xcbcdd70fcfad15ea8e9e5c5a12365cf00912504f08ce01593689dd426bca9ff0\n# + basepoint (0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n# = 0x0235f2dbfaa89b57ec7b055afe29849ef7ddfeb1cefdb9ebdc43f5494984db29e5\nlocalpubkey: 0x0235f2dbfaa89b57ec7b055afe29849ef7ddfeb1cefdb9ebdc43f5494984db29e5\n\nname: derivation of private key from basepoint secret and per_commitment_secret\n# SHA256(per_commitment_point || basepoint)\n# =&gt; SHA256(0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486 || 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n# = 0xcbcdd70fcfad15ea8e9e5c5a12365cf00912504f08ce01593689dd426bca9ff0\n# + basepoint_secret (0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f)\n# = 0xcbced912d3b21bf196a766651e436aff192362621ce317704ea2f75d87e7be0f\nlocalprivkey: 0xcbced912d3b21bf196a766651e436aff192362621ce317704ea2f75d87e7be0f\n\nname: derivation of revocation pubkey from basepoint and per_commitment_point\n# SHA256(revocation_basepoint || per_commitment_point)\n# =&gt; SHA256(0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2 || 0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486)\n# = 0xefbf7ba5a074276701798376950a64a90f698997cce0dff4d24a6d2785d20963\n# x revocation_basepoint = 0x02c00c4aadc536290422a807250824a8d87f19d18da9d610d45621df22510db8ce\n# SHA256(per_commitment_point || revocation_basepoint)\n# =&gt; SHA256(0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486 || 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n# = 0xcbcdd70fcfad15ea8e9e5c5a12365cf00912504f08ce01593689dd426bca9ff0\n# x per_commitment_point = 0x0325ee7d3323ce52c4b33d4e0a73ab637711057dd8866e3b51202a04112f054c43\n# 0x02c00c4aadc536290422a807250824a8d87f19d18da9d610d45621df22510db8ce + 0x0325ee7d3323ce52c4b33d4e0a73ab637711057dd8866e3b51202a04112f054c43 =&gt; 0x02916e326636d19c33f13e8c0c3a03dd157f332f3e99c317c141dd865eb01f8ff0\nrevocationpubkey: 0x02916e326636d19c33f13e8c0c3a03dd157f332f3e99c317c141dd865eb01f8ff0\n\nname: derivation of revocation secret from basepoint_secret and per_commitment_secret\n# SHA256(revocation_basepoint || per_commitment_point)\n# =&gt; SHA256(0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2 || 0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486)\n# = 0xefbf7ba5a074276701798376950a64a90f698997cce0dff4d24a6d2785d20963\n# * revocation_basepoint_secret (0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f)# = 0x44bfd55f845f885b8e60b2dca4b30272d5343be048d79ce87879d9863dedc842\n# SHA256(per_commitment_point || revocation_basepoint)\n# =&gt; SHA256(0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486 || 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n# = 0xcbcdd70fcfad15ea8e9e5c5a12365cf00912504f08ce01593689dd426bca9ff0\n# * per_commitment_secret (0x1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100)# = 0x8be02a96a97b9a3c1c9f59ebb718401128b72ec009d85ee1656319b52319b8ce\n# =&gt; 0xd09ffff62ddb2297ab000cc85bcb4283fdeb6aa052affbc9dddcf33b61078110\nrevocationprivkey: 0xd09ffff62ddb2297ab000cc85bcb4283fdeb6aa052affbc9dddcf33b61078110\n</code></pre></div>\n<h1><a><svg><path></path></svg></a>Appendix F: Commitment and HTLC Transaction Test Vectors (anchors)</h1>\n<p>The anchor test vectors are based on the test cases as defined in appendix C.\nNote that in appendix C, <code>to_local_msat</code> and <code>to_remote_msat</code> are balances\nbefore subtraction of:</p>\n<ul>\n<li>Commit fee (funder only)</li>\n<li>Anchor outputs (funder only)</li>\n<li>In-flight htlcs</li>\n</ul>\n<div><pre><span>[</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>simple commitment tx with no HTLCs<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>7000000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>15000,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>false,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[],</span>\n        <span><span>"</span><span>ExpectedCommitmentTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80044a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a508b6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221008266ac6db5ea71aac3c95d97b0e172ff596844851a3216eb88382a8dddfd33d2022050e240974cfd5d708708b4365574517c18e7ae535ef732a3484d43d0d82be9f701483045022100f89034eba16b2be0e5581f750a0a6309192b75cce0f202f0ee2b4ec0cc394850022076c65dc507fe42276152b7a3d90e961e678adbe966e916ecfe85e64d430e75f301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220<span>"</span></span><span>,</span>\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100f89034eba16b2be0e5581f750a0a6309192b75cce0f202f0ee2b4ec0cc394850022076c65dc507fe42276152b7a3d90e961e678adbe966e916ecfe85e64d430e75f3<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>simple commitment tx with no HTLCs and single anchor<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>10000000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>0,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>15000,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>false,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[],</span>\n        <span><span>"</span><span>ExpectedCommitmentTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80024a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f10529800000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022007cf6b405e9c9b4f527b0ecad9d8bb661fabb8b12abf7d1c0b3ad1855db3ed490220616d5c1eeadccc63bd775a131149455d62d95a42c2a1b01cc7821fc42dce7778014730440220655bf909fb6fa81d086f1336ac72c97906dce29d1b166e305c99152d810e26e1022051f577faa46412c46707aaac46b65d50053550a66334e00a44af2706f27a865801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220<span>"</span></span><span>,</span>\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>30440220655bf909fb6fa81d086f1336ac72c97906dce29d1b166e305c99152d810e26e1022051f577faa46412c46707aaac46b65d50053550a66334e00a44af2706f27a8658<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with seven outputs untrimmed (maximum feerate)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>644,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402205912d91c58016f593d9e46fefcdb6f4125055c41a17b03101eaaa034b9028ab60220520d4d239c85c66e4c75c5b413620b62736e227659d7821b308e2b8ced3e728e<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a0200000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402205912d91c58016f593d9e46fefcdb6f4125055c41a17b03101eaaa034b9028ab60220520d4d239c85c66e4c75c5b413620b62736e227659d7821b308e2b8ced3e728e834730440220473166a5adcca68550bab80403f410a726b5bd855030527e3fefa8c1e4b4fd7b02203b1dc91d8d69039473036cb5c34398b99e8eb90ae500c22130a557b62294b188012000000000000000000000000000000000000000000000000000000000000000008d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6851b2756800000000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100c6b4113678039ee1e43a6cba5e3224ed2355ffc05e365a393afe8843dc9a76860220566d01fd52d65a89ba8595023884f9e8f2e9a310a6b9b85281c0bce06863430c<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a0300000000010000000124060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100c6b4113678039ee1e43a6cba5e3224ed2355ffc05e365a393afe8843dc9a76860220566d01fd52d65a89ba8595023884f9e8f2e9a310a6b9b85281c0bce06863430c83483045022100d0d86307ea55d5daa80f453ad6d64b78fe8a6504aac25407c73e8502c0702c1602206a0809a02aa00c8dc4a53d976bb05d4605d8bb0b7b26b973a5c4e2734d8afbb401008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402203c3a699fb80a38112aafd73d6e3a9b7d40bc2c3ed8b7fbc182a20f43b215172202204e71821b984d1af52c4b8e2cd4c572578c12a965866130c2345f61e4c2d3fef4<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a040000000001000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402203c3a699fb80a38112aafd73d6e3a9b7d40bc2c3ed8b7fbc182a20f43b215172202204e71821b984d1af52c4b8e2cd4c572578c12a965866130c2345f61e4c2d3fef48347304402205bcfa92f83c69289a412b0b6dd4f2a0fe0b0fc2d45bd74706e963257a09ea24902203783e47883e60b86240e877fcbf33d50b1742f65bc93b3162d1be26583b367ee012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402200f089bcd20f25475216307d32aa5b6c857419624bfba1da07335f51f6ba4645b02206ce0f7153edfba23b0d4b2afc26bb3157d404368cb8ea0ca7cf78590dcdd28cf<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a050000000001000000010c0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402200f089bcd20f25475216307d32aa5b6c857419624bfba1da07335f51f6ba4645b02206ce0f7153edfba23b0d4b2afc26bb3157d404368cb8ea0ca7cf78590dcdd28cf83483045022100e4516da08f72c7a4f7b2f37aa84a0feb54ae2cc5b73f0da378e81ae0ca8119bf02207751b2628d8e2f62b4b9abccda4866246c1bfcc82e3d416ad562fd212102c28f01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100aa72cfaf0965020c73a12c77276c6411ca68c4de36ac1998adf86c917a899a43022060da0a159fecfe0bed37c3962d767f12f90e30fed8a8f34b1301775c21a2bd3a<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a06000000000100000001da0d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100aa72cfaf0965020c73a12c77276c6411ca68c4de36ac1998adf86c917a899a43022060da0a159fecfe0bed37c3962d767f12f90e30fed8a8f34b1301775c21a2bd3a8347304402203cd12065c2a42963c762e6b1a981e17695616ecb6f9fb33d8b0717cdd7ca0ee4022065500005c491c1dcf2fe9c4024f74b1c90785d572527055a491278f901143904012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80094a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994e80300000000000022002010f88bf09e56f14fb4543fd26e47b0db50ea5de9cf3fc46434792471082621aed0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a4f996a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100ef82a405364bfc4007e63a7cc82925a513d79065bdbc216d60b6a4223a323f8a02200716730b8561f3c6d362eaf47f202e99fb30d0557b61b92b5f9134f8e2de368101483045022100e0106830467a558c07544a3de7715610c1147062e7d091deeebe8b5c661cda9402202ad049c1a6d04834317a78483f723c205c9f638d17222aafc620800cc1b6ae3501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100e0106830467a558c07544a3de7715610c1147062e7d091deeebe8b5c661cda9402202ad049c1a6d04834317a78483f723c205c9f638d17222aafc620800cc1b6ae35<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with six outputs untrimmed (minimum feerate)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>645,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>30440220446f9e5c375db6a61d6eeee8b59219a30a4a37372afc2670a1a2889c78e9b943022061895f6088fb48b490ab2140a4842c277b64bf25ff591625dd0356e0c96ab7a8<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b28534856132000200000000010000000123060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220446f9e5c375db6a61d6eeee8b59219a30a4a37372afc2670a1a2889c78e9b943022061895f6088fb48b490ab2140a4842c277b64bf25ff591625dd0356e0c96ab7a883483045022100c1621ba26a99c263fd885feff5fda5ca2cc73df080b3a49ecf15164ee244d2a5022037f4cc7fd4441af39a83a0e44c3b1db7d64a4c8080e8697f9e952f85421a34d801008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3044022027a3ffcb8a007e3349d75382efbd4b3fb99fcbd479a18555e58697bd1278d5c402205c8303d46211c3ae8975fe84a0df08b4623119fecd03bc93b49d7f7a0c64c710<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b28534856132000300000000010000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022027a3ffcb8a007e3349d75382efbd4b3fb99fcbd479a18555e58697bd1278d5c402205c8303d46211c3ae8975fe84a0df08b4623119fecd03bc93b49d7f7a0c64c71083483045022100b697aca55c6fb15e5348bb7387b584815fd15e8dd306afe0c477cb550d0c2d40022050b0f7e370f7604d2fec781fefe86715dbe95dff4dab88d628f509d62f854de1012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>30440220013975ae356e6daf22a86a29f21c4f35aca82ed8f731a1103c60c74f5ed1c5aa02200350d4e5455cdbcacb7ccf174db5bed8286019e509a113f6b4c5e606ee12c9d7<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b2853485613200040000000001000000010b0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220013975ae356e6daf22a86a29f21c4f35aca82ed8f731a1103c60c74f5ed1c5aa02200350d4e5455cdbcacb7ccf174db5bed8286019e509a113f6b4c5e606ee12c9d783483045022100e69a29f78779577830e73f327073c93168896f1b89432124b7846f5def9cd9cb02204433db3697e6ed7ac89574ca066a749640e0c9e114ac2e0ee4545741fcf7b7e901008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402205257017423644c7e831f30bc0c334eecfe66e9a6d2e92d157c5bece576b2be4f022047b21cf8e955e22b7471940563922d1a5852fb95459ca32905c7d46a19141664<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320005000000000100000001d90d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402205257017423644c7e831f30bc0c334eecfe66e9a6d2e92d157c5bece576b2be4f022047b21cf8e955e22b7471940563922d1a5852fb95459ca32905c7d46a191416648347304402204f5de65a624e3f757adffb678bd887eb4e656538c5ea7044922f6ee3eed8a06202206ff6f7bfe73b565343cae76131ac658f1a9c60d3ca2343358cda60b9e35f94c8012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80084a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994abc996a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100d57697c707b6f6d053febf24b98e8989f186eea42e37e9e91663ec2c70bb8f70022079b0715a472118f262f43016a674f59c015d9cafccec885968e76d9d9c5d005101473044022025d97466c8049e955a5afce28e322f4b34d2561118e52332fb400f9b908cc0a402205dc6fba3a0d67ee142c428c535580cd1f2ff42e2f89b47e0c8a01847caffc31201475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3044022025d97466c8049e955a5afce28e322f4b34d2561118e52332fb400f9b908cc0a402205dc6fba3a0d67ee142c428c535580cd1f2ff42e2f89b47e0c8a01847caffc312<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with six outputs untrimmed (maximum feerate)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>2060,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>30440220011f999016570bbab9f3125377d0f35096b4dbe155f97c20f71829ead2817d1602201f23f7e17f6928734601c5d8613431eed5c90aa41c3106e8c1cb02ce32aacb5d<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101e7f364cf3a554b670767e723ef14b2af7a3eac70bd79dbde9256f384369c062d0200000000010000000175020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220011f999016570bbab9f3125377d0f35096b4dbe155f97c20f71829ead2817d1602201f23f7e17f6928734601c5d8613431eed5c90aa41c3106e8c1cb02ce32aacb5d83473044022017da96dfb0eb4061fa0162dc6fa6b2e07ecc5040ab5e6cb07be59838460b3e58022079371ffc95002cc1dc2891ec38198c9c25aca8164304fe114f1b55e2ffd1ddd501008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402202d2d9681409b0a0987bd4a268ffeb112df85c4c988ac2a3a2475cb00a61912c302206aa4f4d1388b7d3282bc847871af3cca30766cc8f1064e3a41ec7e82221e10f7<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101e7f364cf3a554b670767e723ef14b2af7a3eac70bd79dbde9256f384369c062d0300000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202d2d9681409b0a0987bd4a268ffeb112df85c4c988ac2a3a2475cb00a61912c302206aa4f4d1388b7d3282bc847871af3cca30766cc8f1064e3a41ec7e82221e10f78347304402206426d67911aa6ff9b1cb147b093f3f65a37831a86d7c741d999afc0666e1773d022000bb71821650c70ea58d9bcdd03af736c41a5a8159d436c3ee0408a07394dcce012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100f51cdaa525b7d4304548c642bb7945215eb5ae7d32874517cde67ca23ab0a12202206286d59e4b19926c6ac844be6f3ab8149a1ddb9c70f5026b7e83e40a6c08e6e1<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101e7f364cf3a554b670767e723ef14b2af7a3eac70bd79dbde9256f384369c062d040000000001000000015d060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100f51cdaa525b7d4304548c642bb7945215eb5ae7d32874517cde67ca23ab0a12202206286d59e4b19926c6ac844be6f3ab8149a1ddb9c70f5026b7e83e40a6c08e6e18348304502210091b16b1ac63b867e7a5ca0344f7b2aa1cdd49d4b72eac86a31e7ec6f069e20640220402bfb571ba3a9c49e3b0061c89303453803d0241059d899222aaac4799b507601008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402202f058d99cb5a54f90773d43ba4e7a0089efd9f8269ef2da1b85d48a3e230555402205acc4bd6561830867d45cd7b84bba9fa35ad2b345016471c1737142bc99782c4<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101e7f364cf3a554b670767e723ef14b2af7a3eac70bd79dbde9256f384369c062d05000000000100000001f2090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202f058d99cb5a54f90773d43ba4e7a0089efd9f8269ef2da1b85d48a3e230555402205acc4bd6561830867d45cd7b84bba9fa35ad2b345016471c1737142bc99782c48347304402202913f9cacea54efd2316cffa91219def9e0e111977216c1e76e9da80befab14f022000a9a69e8f37ebe4a39107ab50fab0dde537334588f8f412bbaca57b179b87a6012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80084a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ab88f6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402201ce37a44b95213358c20f44404d6db7a6083bea6f58de6c46547ae41a47c9f8202206db1d45be41373e92f90d346381febbea8c78671b28c153e30ad1db3441a94970147304402206208aeb34e404bd052ce3f298dfa832891c9d42caec99fe2a0d2832e9690b94302201b034bfcc6fa9faec667a9b7cbfe0b8d85e954aa239b66277887b5088aff08c301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402206208aeb34e404bd052ce3f298dfa832891c9d42caec99fe2a0d2832e9690b94302201b034bfcc6fa9faec667a9b7cbfe0b8d85e954aa239b66277887b5088aff08c3<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with five outputs untrimmed (minimum feerate)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>2061,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100e10744f572a2cd1d787c969e894b792afaed21217ee0480df0112d2fa3ef96ea02202af4f66eb6beebc36d8e98719ed6b4be1b181659fcb561fc491d8cfebff3aa85<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101cf32732fe2d1387ed4e2335f69ddd3c0f337dabc03269e742531f89d35e161d10200000000010000000174020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e10744f572a2cd1d787c969e894b792afaed21217ee0480df0112d2fa3ef96ea02202af4f66eb6beebc36d8e98719ed6b4be1b181659fcb561fc491d8cfebff3aa8583483045022100c3dc3ea50a0ca20e350f97b50c52c5514717cfa36cb9600918caac5cb556842b022049af018d676dde0c8e28ecf325f3ff5c1594261c4f7511d501f9d62d0594d2a201008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100e1f51fb72fec604b029b348a3bb6363454e1869f5b1e24fd736f860c8039f8070220030a2c90186437d8c9b47d4897798c024521b1274991c4cdc125970b346094b1<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101cf32732fe2d1387ed4e2335f69ddd3c0f337dabc03269e742531f89d35e161d1030000000001000000015c060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e1f51fb72fec604b029b348a3bb6363454e1869f5b1e24fd736f860c8039f8070220030a2c90186437d8c9b47d4897798c024521b1274991c4cdc125970b346094b183483045022100ec7ade6037e531629f24390ca9713782a04d648065d17fbe6b015981cdb296c202202d61049a6ecba2fb5314f3edcda2361cad187a89bea6e5d15185354d80c0c08501008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402203479f81a1d83c516957679dc98bf91d35deada967739a8e3869e3e8db08246130220053c8e154b97e3019048dcec3d51bfaf396f36861fbda6d33f0e2a57155c8b9f<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101cf32732fe2d1387ed4e2335f69ddd3c0f337dabc03269e742531f89d35e161d104000000000100000001f1090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402203479f81a1d83c516957679dc98bf91d35deada967739a8e3869e3e8db08246130220053c8e154b97e3019048dcec3d51bfaf396f36861fbda6d33f0e2a57155c8b9f83483045022100a558eb5caa04e35a4417c1f0123ac12eec5f6badee28f5764dc6b69486e594f802201589b12784e242f205832d2d032149bd4e79433ec304c05394241fc7dcba5a71012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80074a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837eab80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a18916a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402204ab07c659412dd2cd6043b1ad811ab215e901b6b5653e08cb3d2fe63d3e3dc57022031c7b3d130f9380ef09581f4f5a15cb6f359a2e0a597146b96c3533a26d6f4cd01483045022100a2faf2ad7e323b2a82e07dc40b6847207ca6ad7b089f2c21dea9a4d37e52d59d02204c9480ce0358eb51d92a4342355a97e272e3cc45f86c612a76a3fe32fc3c4cb401475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100a2faf2ad7e323b2a82e07dc40b6847207ca6ad7b089f2c21dea9a4d37e52d59d02204c9480ce0358eb51d92a4342355a97e272e3cc45f86c612a76a3fe32fc3c4cb4<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with five outputs untrimmed (maximum feerate)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>2184,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402202e03ba1390998b3487e9a7fefcb66814c09abea0ef1bcc915dbaefbcf310569a02206bd10493a105ac69048e9bcedcb8e3301ef81b55018d911a4afd297297f98d30<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>020000000001015b03043e20eb467029305a22af4c3b915e793743f192c5d225cf1d3c6e8c03010200000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202e03ba1390998b3487e9a7fefcb66814c09abea0ef1bcc915dbaefbcf310569a02206bd10493a105ac69048e9bcedcb8e3301ef81b55018d911a4afd297297f98d308347304402200c3952ca04be0c60dcc0b7873a0829f560607524943554ae4a27d8d967166199022021a68657b88e22f9bf9ac6065be412685aff643d17049f04f2e99e86197dabb101008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402201f8a6adda2403bc400c919ea69d72d315337291e00d02cde085ea32953dbc50002202d65230da98df7af8ebefd2b60b457d0945232988ee2d7460a94a77d414a9acc<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>020000000001015b03043e20eb467029305a22af4c3b915e793743f192c5d225cf1d3c6e8c0301030000000001000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402201f8a6adda2403bc400c919ea69d72d315337291e00d02cde085ea32953dbc50002202d65230da98df7af8ebefd2b60b457d0945232988ee2d7460a94a77d414a9acc83483045022100ea69c9273b8914ac62b5b7082d6ac1da2b7b065ebf2ef3cd6403f5305ce3f26802203d98736ea97638895a898dfcc5ee0d0c55eb496b3964df0bb25d223688ea8b8701008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100ea6e4c9b8f56dd9cf5799492a201cdd65b8bc9bc089c3cff34107896ae313f90022034760f7760975cc68e8917a7f62894e25583da7be11af557c4fc402661d0cbf8<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>020000000001015b03043e20eb467029305a22af4c3b915e793743f192c5d225cf1d3c6e8c0301040000000001000000019b090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100ea6e4c9b8f56dd9cf5799492a201cdd65b8bc9bc089c3cff34107896ae313f90022034760f7760975cc68e8917a7f62894e25583da7be11af557c4fc402661d0cbf8834730440220717012f2f7ef6cac590aaf66c2109132c93ffba245959ac62d82e394ba80191302203f00fd9cb37c92c6b0ad4b33e62c3e55b04e5c2cfa0adcca5a9bc49774eeca8a012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80074a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837eab80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a4f906a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004730440220555c05261f72c5b4702d5c83a608630822b473048724b08640d6e75e345094250220448950b74a96a56963928ba5db8b457661a742c855e69d239b3b6ab73de307a301473044022013d326f80ff7607cf366c823fcbbcb7a2b10322484825f151e6c4c756af24b8f02201ba05b9d8beb7cea2947f9f4d9e03f90435e93db2dd48b32eb9ca3f3dd042c7901475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3044022013d326f80ff7607cf366c823fcbbcb7a2b10322484825f151e6c4c756af24b8f02201ba05b9d8beb7cea2947f9f4d9e03f90435e93db2dd48b32eb9ca3f3dd042c79<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with four outputs untrimmed (minimum feerate)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>2185,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304502210094480e38afb41d10fae299224872f19c53abe23c7033a1c0642c48713e7863a10220726dd9456407682667dc4bd9c66975acb3744961770b5002f7eb9c0df9ef2f3e<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101ac13a7715f80b8e52dda43c6929cade5521bdced3a405da02b443f1ffb1e33cc0200000000010000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050048304502210094480e38afb41d10fae299224872f19c53abe23c7033a1c0642c48713e7863a10220726dd9456407682667dc4bd9c66975acb3744961770b5002f7eb9c0df9ef2f3e8347304402203148dac61513dc0361738cba30cb341a1e580f8acd5ab0149bf65bd670688cf002207e5d9a0fcbbea2c263bc714fa9e9c44d7f582ea447f366119fc614a23de32f1f01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402200dbde868dbc20c6a2433fe8979ba5e3f966b1c2d1aeb615f1c42e9c938b3495402202eec5f663c8b601c2061c1453d35de22597c137d1907a2feaf714d551035cb6e<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101ac13a7715f80b8e52dda43c6929cade5521bdced3a405da02b443f1ffb1e33cc030000000001000000019a090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402200dbde868dbc20c6a2433fe8979ba5e3f966b1c2d1aeb615f1c42e9c938b3495402202eec5f663c8b601c2061c1453d35de22597c137d1907a2feaf714d551035cb6e83483045022100b896bded41d7feac7af25c19e35c53037c53b50e73cfd01eb4ba139c7fdf231602203a3be049d3d89396c4dc766d82ce31e237da8bc3a93e2c7d35992d1932d9cfeb012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80064a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994b80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ac5916a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100cd8479cfe1edb1e5a1d487391e0451a469c7171e51e680183f19eb4321f20e9b02204eab7d5a6384b1b08e03baa6e4d9748dfd2b5ab2bae7e39604a0d0055bbffdd501473044022040f63a16148cf35c8d3d41827f5ae7f7c3746885bb64d4d1b895892a83812b3e02202fcf95c2bf02c466163b3fa3ced6a24926fbb4035095a96842ef516e86ba54c001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3044022040f63a16148cf35c8d3d41827f5ae7f7c3746885bb64d4d1b895892a83812b3e02202fcf95c2bf02c466163b3fa3ced6a24926fbb4035095a96842ef516e86ba54c0<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with four outputs untrimmed (maximum feerate)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>3686,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402202cfe6618926ca9f1574f8c4659b425e9790b4677ba2248d77901290806130ffe02204ab37bb0287abcdb8b750b018d41a09effe37cb65ff801fa70d3f1a416599841<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>020000000001012c32e55722e4b96324d8e5b398d583a20780b25202816adc32dc3157dee731c90200000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202cfe6618926ca9f1574f8c4659b425e9790b4677ba2248d77901290806130ffe02204ab37bb0287abcdb8b750b018d41a09effe37cb65ff801fa70d3f1a41659984183473044022030b318139715e3b34f19be852cc01c1c0e1599e8b926a73df2bfb70dd186ddee022062a2b7398aed9f563b4014da04a1a99debd0ff663ceece68a547df5982dc2d7201008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>30440220687af8544d335376620a6f4b5412bfd0da48de047c1785674f26e669d4a3ff82022058591c1e3a6c50017427d38a8f756eb685bdab88ec73838eed3530048861f9d5<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>020000000001012c32e55722e4b96324d8e5b398d583a20780b25202816adc32dc3157dee731c90300000000010000000176050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220687af8544d335376620a6f4b5412bfd0da48de047c1785674f26e669d4a3ff82022058591c1e3a6c50017427d38a8f756eb685bdab88ec73838eed3530048861f9d5834730440220109f1a62b5a13d28d5b7634dd7693b1d5994eb404c4bb4a9a80aa540d3984d170220307251107ff8499a23e99abce7dda4f1c707c98abddb9405a83de0081cde8ace012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80064a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994b80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a29896a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100c268496aad5c3f97f25cf41c1ba5483a12982de29b222051b6de3daa2229413b02207f3c82d77a2c14f0096ed9bb4c34649483bb20fa71f819f71af44de6593e8bb2014730440220784485cf7a0ad7979daf2c858ffdaf5298d0020cea7aea466843e7948223bd9902206031b81d25e02a178c64e62f843577fdcdfc7a1decbbfb54cd895de692df85ca01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>30440220784485cf7a0ad7979daf2c858ffdaf5298d0020cea7aea466843e7948223bd9902206031b81d25e02a178c64e62f843577fdcdfc7a1decbbfb54cd895de692df85ca<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with three outputs untrimmed (minimum feerate)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>3687,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100b287bb8e079a62dcb3aaa8b6c67c0f434a87ebf64ab0bcfb2fc14b55576b859f02206d37c2eb5fd04cfc9eb0534c76a28a98da251b84a931377cce307af39dfaed74<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101542562b326c08e3a076d9cfca2be175041366591da334d8d513ff1686fd95a600200000000010000000175050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100b287bb8e079a62dcb3aaa8b6c67c0f434a87ebf64ab0bcfb2fc14b55576b859f02206d37c2eb5fd04cfc9eb0534c76a28a98da251b84a931377cce307af39dfaed7483483045022100a497c64faea286ec4221f48628086dc6403fd7b60a23c4176e8ebbca15ae70dc0220754e20e968e96cf6421fd2a672c8c26d3bc6e19218cfc8fc2aa51fce026c14b1012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        <span><span>"</span><span>ExpectedCommitmentTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80054a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994aa28b6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100c970799bcb33f43179eb43b3378a0a61991cf2923f69b36ef12548c3df0e6d500220413dc27d2e39ee583093adfcb7799be680141738babb31cc7b0669a777a31f5d01483045022100ad6c71569856b2d7ff42e838b4abe74a713426b37f22fa667a195a4c88908c6902202b37272b02a42dc6d9f4f82cab3eaf84ac882d9ed762859e1e75455c2c22837701475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220<span>"</span></span><span>,</span>\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100ad6c71569856b2d7ff42e838b4abe74a713426b37f22fa667a195a4c88908c6902202b37272b02a42dc6d9f4f82cab3eaf84ac882d9ed762859e1e75455c2c228377<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with three outputs untrimmed (maximum feerate)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>4893,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>30450221008db80f8531104820b3e894492b4463f074f965b542e1b5c153ddfb108a5ea642022030b203d857a2b3581c2087a7bf17c95d04fadc1c6cdae88c620477f2dccb1ee4<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101d515a15e9175fd315bb8d4e768f28684801a9e5a9acdfeba34f7b3b3b3a9ba1d0200000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221008db80f8531104820b3e894492b4463f074f965b542e1b5c153ddfb108a5ea642022030b203d857a2b3581c2087a7bf17c95d04fadc1c6cdae88c620477f2dccb1ee483483045022100e5fbae857c47dbfc050a05924bd449fc9804798bd6442002c578437dc34450810220296589bc387645512345299e307116aaac4ce9fc752abcd1936b802d03526312012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        <span><span>"</span><span>ExpectedCommitmentTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80054a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a87856a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004730440220086288faceab47461eb2d808e9e9b0cb3ffc24a03c2f18db7198247d38f10e58022031d1c2782a58c8c6ce187d0019eb47a83babdf3040e2caff299ab48f7e12b1fa01483045022100a8771147109e4d3f44a5976c3c3de98732bbb77308d21444dbe0d76faf06480e02200b4e916e850c3d1f918de87bbbbb07843ffea1d4658dfe060b6f9ccd96d34be801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220<span>"</span></span><span>,</span>\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100a8771147109e4d3f44a5976c3c3de98732bbb77308d21444dbe0d76faf06480e02200b4e916e850c3d1f918de87bbbbb07843ffea1d4658dfe060b6f9ccd96d34be8<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with two outputs untrimmed (minimum feerate)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>4894,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[],</span>\n        <span><span>"</span><span>ExpectedCommitmentTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80044a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ad0886a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221009f16ac85d232e4eddb3fcd750a68ebf0b58e3356eaada45d3513ede7e817bf4c02207c2b043b4e5f971261975406cb955219fa56bffe5d834a833694b5abc1ce4cfd01483045022100e784a66b1588575801e237d35e510fd92a81ae3a4a2a1b90c031ad803d07b3f3022021bc5f16501f167607d63b681442da193eb0a76b4b7fd25c2ed4f8b28fd35b9501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220<span>"</span></span><span>,</span>\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100e784a66b1588575801e237d35e510fd92a81ae3a4a2a1b90c031ad803d07b3f3022021bc5f16501f167607d63b681442da193eb0a76b4b7fd25c2ed4f8b28fd35b95<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with one output untrimmed (minimum feerate)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>6216010,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[],</span>\n        <span><span>"</span><span>ExpectedCommitmentTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80024a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a04004830450221009ad80792e3038fe6968d12ff23e6888a565c3ddd065037f357445f01675d63f3022018384915e5f1f4ae157e15debf4f49b61c8d9d2b073c7d6f97c4a68caa3ed4c1014830450221008fd5dbff02e4b59020d4cd23a3c30d3e287065fda75a0a09b402980adf68ccda022001e0b8b620cd915ddff11f1de32addf23d81d51b90e6841b2cb8dcaf3faa5ecf01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220<span>"</span></span><span>,</span>\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>30450221008fd5dbff02e4b59020d4cd23a3c30d3e287065fda75a0a09b402980adf68ccda022001e0b8b620cd915ddff11f1de32addf23d81d51b90e6841b2cb8dcaf3faa5ecf<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with 3 htlc outputs, 2 offered having the same amount and preimage<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6987999999,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>253,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>30450221008c3060a17cb4799bc2290d692c8ae3d4a4ecbc7ed938d91709f7d3f4879987ea02201f32d763f52bee8b3362b2150d66a45c58fbe215160a4c271b4de17658e59d6e<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c4020000000001000000011e070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221008c3060a17cb4799bc2290d692c8ae3d4a4ecbc7ed938d91709f7d3f4879987ea02201f32d763f52bee8b3362b2150d66a45c58fbe215160a4c271b4de17658e59d6e83473044022045658d7072665bd8721859ea877d91587af138f9d3d6bc29339b972173521bb702205ccba02e9a2abd737af16abcfca3d9fd3fe6e0544e0efafddb634f3e30369c9e012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3044022030fa4ca0a8dfd47112aa04dfa76f5b30d1ec593b5d76d7c0f986603fb61c3a6d02203ae477dfbb5fba5959302faeb04b4e66cef2030e1ac8826e7034865059962b00<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c403000000000100000001e0120000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022030fa4ca0a8dfd47112aa04dfa76f5b30d1ec593b5d76d7c0f986603fb61c3a6d02203ae477dfbb5fba5959302faeb04b4e66cef2030e1ac8826e7034865059962b0083483045022100a6408b8db488d9f0a3bfd54087e447d19be77e54c849ac388c99b0d68fe90921022023052d488d814ee1c94a27df75aaa9b97a4fd789a5eb1ee989ee2a30663f447f01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6851b27568f9010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402203ba5761a9a145470c62beef6984b7c3d76e9f1ec9f2b69fa8ccc5f47781e25b202205913220be6eb80a436f78d9e1c8c048f41b7490e9f91e862f4a473c9a8cac022<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c404000000000100000001e0120000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402203ba5761a9a145470c62beef6984b7c3d76e9f1ec9f2b69fa8ccc5f47781e25b202205913220be6eb80a436f78d9e1c8c048f41b7490e9f91e862f4a473c9a8cac0228348304502210091f2bb95774acb4d51986d11c917fa7f51a39fe38b8aa880b430c9e629389ee202201e6bc67849075ec0fc8b5205380069b91097a4ad7a5bc1183384519ba05b3a2401008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6851b27568fa010000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80074a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5e881300000000000022002018e40f9072c44350f134bdc887bab4d9bdfc8aa468a25616c80e21757ba5dac7881300000000000022002018e40f9072c44350f134bdc887bab4d9bdfc8aa468a25616c80e21757ba5dac7c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994aad9c6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100b4014970d9d7962853f3f85196144671d7d5d87426250f0a5fdaf9a55292e92502205360910c9abb397467e19dbd63d081deb4a3240903114c98cec0a23591b79b7601473044022027b38dfb654c34032ffb70bb43022981652fce923cbbe3cbe7394e2ade8b34230220584195b78da6e25c2e8da6b4308d9db25b65b64975db9266163ef592abb7c72501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3044022027b38dfb654c34032ffb70bb43022981652fce923cbbe3cbe7394e2ade8b34230220584195b78da6e25c2e8da6b4308d9db25b65b64975db9266163ef592abb7c725<span>"</span></span>\n    <span>}</span>\n<span>]</span></pre></div>\n<h1><a><svg><path></path></svg></a>Appendix G: Commitment and HTLC Transaction Test Vectors (anchors_zero_fee_htlc_tx)</h1>\n<p>The anchor test vectors are based on the test cases as defined in appendix C.\nNote that in appendix C, <code>to_local_msat</code> and <code>to_remote_msat</code> are balances\nbefore subtraction of:</p>\n<ul>\n<li>Commit fee (funder only)</li>\n<li>Anchor outputs (funder only)</li>\n<li>In-flight htlcs</li>\n</ul>\n<div><pre><span>[</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>simple commitment tx with no HTLCs<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>7000000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>DustLimitSatoshis</span><span>"</span></span>: <span>546,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>15000,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>false,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[],</span>\n        <span><span>"</span><span>ExpectedCommitmentTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80044a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a508b6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221008266ac6db5ea71aac3c95d97b0e172ff596844851a3216eb88382a8dddfd33d2022050e240974cfd5d708708b4365574517c18e7ae535ef732a3484d43d0d82be9f701483045022100f89034eba16b2be0e5581f750a0a6309192b75cce0f202f0ee2b4ec0cc394850022076c65dc507fe42276152b7a3d90e961e678adbe966e916ecfe85e64d430e75f301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220<span>"</span></span><span>,</span>\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100f89034eba16b2be0e5581f750a0a6309192b75cce0f202f0ee2b4ec0cc394850022076c65dc507fe42276152b7a3d90e961e678adbe966e916ecfe85e64d430e75f3<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>simple commitment tx with no HTLCs and single anchor<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>10000000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>0,</span>\n        <span><span>"</span><span>DustLimitSatoshis</span><span>"</span></span>: <span>546,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>15000,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>false,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[],</span>\n        <span><span>"</span><span>ExpectedCommitmentTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80024a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f10529800000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022007cf6b405e9c9b4f527b0ecad9d8bb661fabb8b12abf7d1c0b3ad1855db3ed490220616d5c1eeadccc63bd775a131149455d62d95a42c2a1b01cc7821fc42dce7778014730440220655bf909fb6fa81d086f1336ac72c97906dce29d1b166e305c99152d810e26e1022051f577faa46412c46707aaac46b65d50053550a66334e00a44af2706f27a865801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220<span>"</span></span><span>,</span>\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>30440220655bf909fb6fa81d086f1336ac72c97906dce29d1b166e305c99152d810e26e1022051f577faa46412c46707aaac46b65d50053550a66334e00a44af2706f27a8658<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with seven outputs untrimmed<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>DustLimitSatoshis</span><span>"</span></span>: <span>546,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>644,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>30440220746dc89a593e1b50915db63359b50c3c404f8324f78075c87708c866ccefda2502202a11062012dc8607b17e8c46ea4eefdfcc6b89a35440de99432ba12788d7bb17<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a02000000000100000001e8030000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220746dc89a593e1b50915db63359b50c3c404f8324f78075c87708c866ccefda2502202a11062012dc8607b17e8c46ea4eefdfcc6b89a35440de99432ba12788d7bb1783473044022036f77f88b49bd03dc16d3a015efcc7acffc2a93b213324035d77a716f79013ff02203c218eb882a40402a8bb05dbb751a442345a4e56307be76b214b6d4db9ed3c92012000000000000000000000000000000000000000000000000000000000000000008d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6851b2756800000000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100a847bc3b8cf2441013725ae32dc589c419835d069afd6d7f3d9834d8be7cea6e02204ce9d35ec7f0788da80e4d62e810c4ccd13617e58fa10832e38fb7ae87bdf338<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a03000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100a847bc3b8cf2441013725ae32dc589c419835d069afd6d7f3d9834d8be7cea6e02204ce9d35ec7f0788da80e4d62e810c4ccd13617e58fa10832e38fb7ae87bdf33883473044022026739b1adbfa34c485bf0e5a19e0cf7532f64545bcc5c95b95643ccc2d351e1902201743bb1b34f00e031cc15f6eff0f8ab764508d2681ff965ba62e76e540bca1e801008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3044022035977f2aa6d6ae12f1dae3366440faa17558e9c88c3188bfc8df7e276c6c65410220659f1f9070c725d9d46e43b99a36fc6d711d36069704add2d57fc1fa2818cf12<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a04000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022035977f2aa6d6ae12f1dae3366440faa17558e9c88c3188bfc8df7e276c6c65410220659f1f9070c725d9d46e43b99a36fc6d711d36069704add2d57fc1fa2818cf12834730440220191ba44e57b1601a59d99f85971d4801b286d428de275487c87ceeb8df1a4811022002215875d92833df0c9615c9096cf97152f87139ed9f82718bbb5b8b3d312524012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3044022002f3ff9a31270092c214d3d5b8b4f826599404bba64b87f7536ef6324d41551b022079dc4cb25f7ecd84b49f5cce03eae7e2655b59f39d543765daef0d4f11c93fa2<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a05000000000100000001b80b0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022002f3ff9a31270092c214d3d5b8b4f826599404bba64b87f7536ef6324d41551b022079dc4cb25f7ecd84b49f5cce03eae7e2655b59f39d543765daef0d4f11c93fa283483045022100f03047e38bc0aae2d80d53424b8c1d1b8139120e2bf09ad31a2803978745e6e102205b74c0eef0b472710b98c77e619ee9d0cc47a9dd786f4f214a564f44d79f9b9a01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>30440220547937564288f64fb3e3c945a1348b912471f0c1c4cc7dc8ceca15a4cbd299b6022053c4f8e30832b13dfbe31e4091e313428625e0b5ac61eecba93f8f11c1e26225<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a06000000000100000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220547937564288f64fb3e3c945a1348b912471f0c1c4cc7dc8ceca15a4cbd299b6022053c4f8e30832b13dfbe31e4091e313428625e0b5ac61eecba93f8f11c1e2622583473044022022604660234aef9bd21284598ec50f070ac82a3a0152e0af5e98a02cd6e8976f022042b0b9112ee00806b856dff6de52a82c98b036a4fe14bb5fd2926725e2fc8191012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80094a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994e80300000000000022002010f88bf09e56f14fb4543fd26e47b0db50ea5de9cf3fc46434792471082621aed0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a4f996a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100ef82a405364bfc4007e63a7cc82925a513d79065bdbc216d60b6a4223a323f8a02200716730b8561f3c6d362eaf47f202e99fb30d0557b61b92b5f9134f8e2de368101483045022100e0106830467a558c07544a3de7715610c1147062e7d091deeebe8b5c661cda9402202ad049c1a6d04834317a78483f723c205c9f638d17222aafc620800cc1b6ae3501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100e0106830467a558c07544a3de7715610c1147062e7d091deeebe8b5c661cda9402202ad049c1a6d04834317a78483f723c205c9f638d17222aafc620800cc1b6ae35<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with six outputs untrimmed (minimum dust limit)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>DustLimitSatoshis</span><span>"</span></span>: <span>1001,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>645,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100e04d160a326432659fe9fb127304c1d348dfeaba840081bdc57d8efd902a48d8022008a824e7cf5492b97e4d9e03c06a09f822775a44f6b5b2533a2088904abfc282<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320002000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e04d160a326432659fe9fb127304c1d348dfeaba840081bdc57d8efd902a48d8022008a824e7cf5492b97e4d9e03c06a09f822775a44f6b5b2533a2088904abfc28283483045022100b7c49846466b13b190ff739bbe3005c105482fc55539e55b1c561f76b6982b6c02200e5c35808619cf543c8405cff9fedd25f333a4a2f6f6d5e8af8150090c40ef0901008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100fbdc3c367ce3bf30796025cc590ee1f2ce0e72ae1ac19f5986d6d0a4fc76211f02207e45ae9267e8e820d188569604f71d1abd11bd385d58853dd7dc034cdb3e9a6e<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320003000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100fbdc3c367ce3bf30796025cc590ee1f2ce0e72ae1ac19f5986d6d0a4fc76211f02207e45ae9267e8e820d188569604f71d1abd11bd385d58853dd7dc034cdb3e9a6e83483045022100d29330f24db213b262068706099b39c15fa7e070c3fcdf8836c09723fc4d365602203ce57d01e9f28601e461a0b5c4a50119b270bde8b70148d133a6849c70b115ac012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3044022066c5ef625cee3ddd2bc7b6bfb354b5834cf1cc6d52dd972fb41b7b225437ae4a022066cb85647df65c6b87a54e416dcdcca778a776c36a9643d2b5dc793c9b29f4c1<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320004000000000100000001b80b0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022066c5ef625cee3ddd2bc7b6bfb354b5834cf1cc6d52dd972fb41b7b225437ae4a022066cb85647df65c6b87a54e416dcdcca778a776c36a9643d2b5dc793c9b29f4c18347304402202d4ce515cd9000ec37575972d70b8d24f73909fb7012e8ebd8c2066ef6fe187902202830b53e64ea565fecd0f398100691da6bb2a5cf9bb0d1926f1d71d05828a11e01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3044022022c7e11595c53ee89a57ca76baf0aed730da035952d6ab3fe6459f5eff3b337a022075e10cc5f5fd724a35ce4087a5d03cd616698626c69814032132b50bb97dc615<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320005000000000100000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022022c7e11595c53ee89a57ca76baf0aed730da035952d6ab3fe6459f5eff3b337a022075e10cc5f5fd724a35ce4087a5d03cd616698626c69814032132b50bb97dc61583483045022100b20cd63e0587d1711beaebda4730775c4ac8b8b2ec78fe18a0c44c3f168c25230220079abb7fc4924e2fca5950842e5b9e416735585026914570078c4ef62f286226012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80084a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994abc996a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100d57697c707b6f6d053febf24b98e8989f186eea42e37e9e91663ec2c70bb8f70022079b0715a472118f262f43016a674f59c015d9cafccec885968e76d9d9c5d005101473044022025d97466c8049e955a5afce28e322f4b34d2561118e52332fb400f9b908cc0a402205dc6fba3a0d67ee142c428c535580cd1f2ff42e2f89b47e0c8a01847caffc31201475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3044022025d97466c8049e955a5afce28e322f4b34d2561118e52332fb400f9b908cc0a402205dc6fba3a0d67ee142c428c535580cd1f2ff42e2f89b47e0c8a01847caffc312<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with four outputs untrimmed (minimum dust limit)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>DustLimitSatoshis</span><span>"</span></span>: <span>2001,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>2185,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402206870514a72ad6e723ff7f1e0370d7a33c1cd2a0b9272674143ebaf6a1d02dee102205bd953c34faf5e7322e9a1c0103581cb090280fda4f1039ee8552668afa90ebb<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101ac13a7715f80b8e52dda43c6929cade5521bdced3a405da02b443f1ffb1e33cc02000000000100000001b80b0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402206870514a72ad6e723ff7f1e0370d7a33c1cd2a0b9272674143ebaf6a1d02dee102205bd953c34faf5e7322e9a1c0103581cb090280fda4f1039ee8552668afa90ebb834730440220669de9ca7910eff65a7773ebd14a9fc371fe88cde5b8e2a81609d85c87ac939b02201ac29472fa4067322e92d75b624942d60be5050139b20bb363db75be79eb946f01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100949e8dd938da56445b1cdfdebe1b7efea086edd05d89910d205a1e2e033ce47102202cbd68b5262ab144d9ec12653f87dfb0bb6bd05d1f58ae1e523f028eaefd7271<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101ac13a7715f80b8e52dda43c6929cade5521bdced3a405da02b443f1ffb1e33cc03000000000100000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100949e8dd938da56445b1cdfdebe1b7efea086edd05d89910d205a1e2e033ce47102202cbd68b5262ab144d9ec12653f87dfb0bb6bd05d1f58ae1e523f028eaefd727183483045022100e3104ed8b239f8019e5f0a1a73d7782a94a8c36e7984f476c3a0b3cb0e62e27902207e3d52884600985f8a2098e53a5c30dd6a5e857733acfaa07ab2162421ed2688012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80064a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994b80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ac5916a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100cd8479cfe1edb1e5a1d487391e0451a469c7171e51e680183f19eb4321f20e9b02204eab7d5a6384b1b08e03baa6e4d9748dfd2b5ab2bae7e39604a0d0055bbffdd501473044022040f63a16148cf35c8d3d41827f5ae7f7c3746885bb64d4d1b895892a83812b3e02202fcf95c2bf02c466163b3fa3ced6a24926fbb4035095a96842ef516e86ba54c001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3044022040f63a16148cf35c8d3d41827f5ae7f7c3746885bb64d4d1b895892a83812b3e02202fcf95c2bf02c466163b3fa3ced6a24926fbb4035095a96842ef516e86ba54c0<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with three outputs untrimmed (minimum dust limit)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>DustLimitSatoshis</span><span>"</span></span>: <span>3001,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>3687,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3044022017b558a3cf5f0cb94269e2e927b29ed22bd2416abb8a7ce6de4d1256f359b93602202e9ca2b1a23ea3e69f433c704e327739e219804b8c188b1d52f74fd5a9de954c<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101542562b326c08e3a076d9cfca2be175041366591da334d8d513ff1686fd95a6002000000000100000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022017b558a3cf5f0cb94269e2e927b29ed22bd2416abb8a7ce6de4d1256f359b93602202e9ca2b1a23ea3e69f433c704e327739e219804b8c188b1d52f74fd5a9de954c83483045022100af7a8b7c7ff2080c68995254cb66d64d9954edcc5baac3bb4f27ed2d29aaa6120220421c27da7a60574a9263f271e0f3bd34594ec6011095190022b3b54596ea03de012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        <span><span>"</span><span>ExpectedCommitmentTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80054a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994aa28b6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100c970799bcb33f43179eb43b3378a0a61991cf2923f69b36ef12548c3df0e6d500220413dc27d2e39ee583093adfcb7799be680141738babb31cc7b0669a777a31f5d01483045022100ad6c71569856b2d7ff42e838b4abe74a713426b37f22fa667a195a4c88908c6902202b37272b02a42dc6d9f4f82cab3eaf84ac882d9ed762859e1e75455c2c22837701475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220<span>"</span></span><span>,</span>\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100ad6c71569856b2d7ff42e838b4abe74a713426b37f22fa667a195a4c88908c6902202b37272b02a42dc6d9f4f82cab3eaf84ac882d9ed762859e1e75455c2c228377<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with two outputs untrimmed (minimum dust limit)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>DustLimitSatoshis</span><span>"</span></span>: <span>4001,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>4894,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[],</span>\n        <span><span>"</span><span>ExpectedCommitmentTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80044a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ad0886a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221009f16ac85d232e4eddb3fcd750a68ebf0b58e3356eaada45d3513ede7e817bf4c02207c2b043b4e5f971261975406cb955219fa56bffe5d834a833694b5abc1ce4cfd01483045022100e784a66b1588575801e237d35e510fd92a81ae3a4a2a1b90c031ad803d07b3f3022021bc5f16501f167607d63b681442da193eb0a76b4b7fd25c2ed4f8b28fd35b9501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220<span>"</span></span><span>,</span>\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100e784a66b1588575801e237d35e510fd92a81ae3a4a2a1b90c031ad803d07b3f3022021bc5f16501f167607d63b681442da193eb0a76b4b7fd25c2ed4f8b28fd35b95<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with one output untrimmed (minimum dust limit)<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6988000000,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>DustLimitSatoshis</span><span>"</span></span>: <span>4001,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>6216010,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[],</span>\n        <span><span>"</span><span>ExpectedCommitmentTxHex</span><span>"</span></span>: <span><span>"</span>02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80024a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a04004830450221009ad80792e3038fe6968d12ff23e6888a565c3ddd065037f357445f01675d63f3022018384915e5f1f4ae157e15debf4f49b61c8d9d2b073c7d6f97c4a68caa3ed4c1014830450221008fd5dbff02e4b59020d4cd23a3c30d3e287065fda75a0a09b402980adf68ccda022001e0b8b620cd915ddff11f1de32addf23d81d51b90e6841b2cb8dcaf3faa5ecf01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220<span>"</span></span><span>,</span>\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>30450221008fd5dbff02e4b59020d4cd23a3c30d3e287065fda75a0a09b402980adf68ccda022001e0b8b620cd915ddff11f1de32addf23d81d51b90e6841b2cb8dcaf3faa5ecf<span>"</span></span>\n    <span>},</span>\n    <span>{</span>\n        <span><span>"</span><span>Name</span><span>"</span></span>: <span><span>"</span>commitment tx with 3 htlc outputs, 2 offered having the same amount and preimage<span>"</span></span><span>,</span>\n        <span><span>"</span><span>LocalBalance</span><span>"</span></span>: <span>6987999999,</span>\n        <span><span>"</span><span>RemoteBalance</span><span>"</span></span>: <span>3000000000,</span>\n        <span><span>"</span><span>DustLimitSatoshis</span><span>"</span></span>: <span>546,</span>\n        <span><span>"</span><span>FeePerKw</span><span>"</span></span>: <span>253,</span>\n        <span><span>"</span><span>UseTestHtlcs</span><span>"</span></span>: <span>true,</span>\n        <span><span>"</span><span>HtlcDescs</span><span>"</span></span>: <span>[</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>30440220078fe5343dab88c348a3a8a9c1a9293259dbf35507ae971702cc39dd623ea9af022011ed0c0f35243cd0bb4d9ca3c772379b2b5f4af93140e9fdc5600dfec1cdb0c2<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c402000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220078fe5343dab88c348a3a8a9c1a9293259dbf35507ae971702cc39dd623ea9af022011ed0c0f35243cd0bb4d9ca3c772379b2b5f4af93140e9fdc5600dfec1cdb0c28347304402205df665e2908c7690d2d33eb70e6e119958c28febe141a94ed0dd9a55ce7c8cfc0220364d02663a5d019af35c5cd5fda9465d985d85bbd12db207738d61163449a424012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>304402202df6bf0f98a42cfd0172a16bded7d1b16c14f5f42ba23f5c54648c14b647531302200fe1508626817f23925bb56951d5e4b2654c751743ab6db48a6cce7dda17c01c<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c40300000000010000000188130000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202df6bf0f98a42cfd0172a16bded7d1b16c14f5f42ba23f5c54648c14b647531302200fe1508626817f23925bb56951d5e4b2654c751743ab6db48a6cce7dda17c01c8347304402203f99ec05cdd89558a23683b471c1dcce8f6a92295f1fff3b0b5d21be4d4f97ea022019d29070690fc2c126fe27cc4ab2f503f289d362721b2efa7418e7fddb939a5b01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6851b27568f9010000<span>"</span></span>\n            <span>},</span>\n            <span>{</span>\n                <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3045022100bd206b420c495f3aa714d3ea4766cbe95441deacb5d2f737f1913349aee7c2ae02200249d2c950dd3b15326bf378ae5d2b871d33d6737f5d70735f3de8383140f2a1<span>"</span></span><span>,</span>\n                <span><span>"</span><span>ResolutionTxHex</span><span>"</span></span>: <span><span>"</span>020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c40400000000010000000188130000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100bd206b420c495f3aa714d3ea4766cbe95441deacb5d2f737f1913349aee7c2ae02200249d2c950dd3b15326bf378ae5d2b871d33d6737f5d70735f3de8383140f2a183483045022100f2cd35e385b9b7e15b92a5d78d120b6b2c5af4e974bc01e884c5facb3bb5966c0220706e0506477ce809a40022d6de8e041e9ef13136c45abee9c36f58a01fdb188b01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6851b27568fa010000<span>"</span></span>\n            <span>}</span>\n        <span>],</span>\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80074a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5e881300000000000022002018e40f9072c44350f134bdc887bab4d9bdfc8aa468a25616c80e21757ba5dac7881300000000000022002018e40f9072c44350f134bdc887bab4d9bdfc8aa468a25616c80e21757ba5dac7c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994aad9c6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100b4014970d9d7962853f3f85196144671d7d5d87426250f0a5fdaf9a55292e92502205360910c9abb397467e19dbd63d081deb4a3240903114c98cec0a23591b79b7601473044022027b38dfb654c34032ffb70bb43022981652fce923cbbe3cbe7394e2ade8b34230220584195b78da6e25c2e8da6b4308d9db25b65b64975db9266163ef592abb7c72501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        <span><span>"</span><span>RemoteSigHex</span><span>"</span></span>: <span><span>"</span>3044022027b38dfb654c34032ffb70bb43022981652fce923cbbe3cbe7394e2ade8b34230220584195b78da6e25c2e8da6b4308d9db25b65b64975db9266163ef592abb7c725<span>"</span></span>\n    <span>}</span>\n<span>]</span></pre></div>\n<h1><a><svg><path></path></svg></a>References</h1>\n<h1><a><svg><path></path></svg></a>Authors</h1>\n<p>[ FIXME: ]</p>\n<p><a><img/></a>\n<br/>\nThis work is licensed under a <a>Creative Commons Attribution 4.0 International License</a>.</p>\n</article>', 'body': 'BOLT #3: Bitcoin Transaction and Script Formats\nThis details the exact format of on-chain transactions, which both sides need to agree on to ensure signatures are valid. This consists of the funding transaction output script, the commitment transactions, and the HTLC transactions.\nTable of Contents\n\nTransactions\n\nTransaction Output Ordering\nUse of Segwit\nFunding Transaction Output\nCommitment Transaction\n\nCommitment Transaction Outputs\n\nto_local Output\nto_remote Output\nto_local_anchor and to_remote_anchor\nOffered HTLC Outputs\nReceived HTLC Outputs\n\n\nTrimmed Outputs\n\n\nHTLC-timeout and HTLC-success Transactions\nClosing Transaction\nFees\n\nFee Calculation\nFee Payment\n\n\nDust Limits\nCommitment Transaction Construction\n\n\nKeys\n\nKey Derivation\n\nlocalpubkey, remotepubkey, local_htlcpubkey, remote_htlcpubkey, local_delayedpubkey, and remote_delayedpubkey Derivation\nrevocationpubkey Derivation\nPer-commitment Secret Requirements\n\n\nEfficient Per-commitment Secret Storage\n\n\nAppendix A: Expected Weights\n\nExpected Weight of the Commitment Transaction\nExpected Weight of HTLC-timeout and HTLC-success Transactions\n\n\nAppendix B: Funding Transaction Test Vectors\nAppendix C: Commitment and HTLC Transaction Test Vectors\nAppendix D: Per-commitment Secret Generation Test Vectors\n\nGeneration Tests\nStorage Tests\n\n\nAppendix E: Key Derivation Test Vectors\nAppendix F: Commitment and HTLC Transaction Test Vectors (anchors)\nAppendix G: Commitment and HTLC Transaction Test Vectors (anchors-zero-fee-htlc-tx)\nReferences\nAuthors\n\nTransactions\nTransaction Output Ordering\nOutputs in transactions are always sorted according to:\n\nfirst according to their value, smallest first (in whole satoshis, note that for HTLC outputs, the millisatoshi part must be ignored)\nfollowed by scriptpubkey, comparing the common-length prefix lexicographically as if by memcmp, then selecting the shorter script (if they differ in length),\nfinally, for HTLC outputs, in increasing cltv_expiry order.\n\nRationale\nTwo offered HTLCs which have the same amount (rounded from amount_msat) and\npayment_hash will have identical outputs, even if their cltv_expiry\ndiffers.  This only matters because the same ordering is used to send\nhtlc_signatures and the HTLC transactions themselves are different, thus the\ntwo peers must agree on the canonical ordering for this case.\nUse of Segwit\nMost transaction outputs used here are pay-to-witness-script-hashBIP141 (P2WSH) outputs: the Segwit version of P2SH. To spend such outputs, the last item on the witness stack must be the actual script that was used to generate the P2WSH output that is being spent. This last item has been omitted for brevity in the rest of this document.\nA <> designates an empty vector as required for compliance with MINIMALIF-standard rule.MINIMALIF\nFunding Transaction Output\n\nThe funding output script is a P2WSH to:\n\n2 <pubkey1> <pubkey2> 2 OP_CHECKMULTISIG\n\nWhere pubkey1 is the lexicographically lesser of the two funding_pubkey in compressed format, and where pubkey2 is the lexicographically greater of the two.\n\nCommitment Transaction\n\nversion: 2\nlocktime: upper 8 bits are 0x20, lower 24 bits are the lower 24 bits of the obscured commitment number\ntxin count: 1\n\ntxin[0] outpoint: txid and output_index from funding_created message\ntxin[0] sequence: upper 8 bits are 0x80, lower 24 bits are upper 24 bits of the obscured commitment number\ntxin[0] script bytes: 0\ntxin[0] witness: 0 <signature_for_pubkey1> <signature_for_pubkey2>\n\n\n\nThe 48-bit commitment number is obscured by XOR with the lower 48 bits of:\nSHA256(payment_basepoint from open_channel || payment_basepoint from accept_channel)\n\nThis obscures the number of commitments made on the channel in the\ncase of unilateral close, yet still provides a useful index for both\nnodes (who know the payment_basepoints) to quickly find a revoked\ncommitment transaction.\nCommitment Transaction Outputs\nTo allow an opportunity for penalty transactions, in case of a revoked commitment transaction, all outputs that return funds to the owner of the commitment transaction (a.k.a. the "local node") must be delayed for to_self_delay blocks. For HTLCs this delay is done in a second-stage HTLC transaction (HTLC-success for HTLCs accepted by the local node, HTLC-timeout for HTLCs offered by the local node).\nThe reason for the separate transaction stage for HTLC outputs is so that HTLCs can timeout or be fulfilled even though they are within the to_self_delay delay.\nOtherwise, the required minimum timeout on HTLCs is lengthened by this delay, causing longer timeouts for HTLCs traversing the network.\nThe amounts for each output MUST be rounded down to whole satoshis. If this amount, minus the fees for the HTLC transaction, is less than the dust_limit_satoshis set by the owner of the commitment transaction, the output MUST NOT be produced (thus the funds add to fees).\nto_local Output\nThis output sends funds back to the owner of this commitment transaction and thus must be timelocked using OP_CHECKSEQUENCEVERIFY. It can be claimed, without delay, by the other party if they know the revocation private key. The output is a version-0 P2WSH, with a witness script:\nOP_IF\n    # Penalty transaction\n    <revocationpubkey>\nOP_ELSE\n    `to_self_delay`\n    OP_CHECKSEQUENCEVERIFY\n    OP_DROP\n    <local_delayedpubkey>\nOP_ENDIF\nOP_CHECKSIG\n\nThe output is spent by an input with nSequence field set to to_self_delay (which can only be valid after that duration has passed) and witness:\n<local_delayedsig> <>\n\nIf a revoked commitment transaction is published, the other party can spend this output immediately with the following witness:\n<revocation_sig> 1\n\nto_remote Output\nIf option_anchors applies to the commitment transaction, the to_remote output is encumbered by a one block csv lock.\n<remotepubkey> OP_CHECKSIGVERIFY 1 OP_CHECKSEQUENCEVERIFY\n\nThe output is spent by an input with nSequence field set to 1 and witness:\n<remote_sig>\n\nOtherwise, this output is a simple P2WPKH to remotepubkey. Note: the remote\'s commitment transaction uses your localpubkey for their\nto_remote output to yourself.\nto_local_anchor and to_remote_anchor Output (option_anchors)\nThis output can be spent by the local and remote nodes respectively to provide incentive to mine the transaction, using child-pays-for-parent. Both\nanchor outputs are always added, except for the case where there are no htlcs and one of the parties has a commitment output that is below the dust limit.\nIn that case only an anchor is added for the commitment output that does materialize. This typically happens if the initiator closes right after opening\n(no to_remote output).\n<local_funding_pubkey/remote_funding_pubkey> OP_CHECKSIG OP_IFDUP\nOP_NOTIF\n    OP_16 OP_CHECKSEQUENCEVERIFY\nOP_ENDIF\n\nEach party has its own anchor output that locks to their funding key. This is to prevent a malicious peer from attaching child transactions with a low fee\ndensity to an anchor and thereby blocking the victim from getting the commit tx confirmed in time. This defense is supported by a change in Bitcoin core 0.19:\nbitcoin/bitcoin#15681. This is also the reason that every non-anchor output on the commit tx is CSV locked.\nTo prevent utxo set pollution, any anchor that remains unspent can be spent by anyone after the commitment tx confirms. This is also the reason to lock\nthe anchor outputs to the funding key. Third parties can observe this key and reconstruct the spend script, even if none of the commitment outputs would\nbe spent. This does assume that at some point the fee market goes down to a level where sweeping the anchors is economical.\nThe amount of the output is fixed at 330 sats, the default dust limit for P2WSH.\nSpending of the output requires the following witness:\n<local_sig/remote_sig>\n\nAfter 16 blocks, anyone can sweep the anchor with witness:\n<>\n\nOffered HTLC Outputs\nThis output sends funds to either an HTLC-timeout transaction after the HTLC-timeout or to the remote node using the payment preimage or the revocation key. The output is a P2WSH, with a witness script (no option_anchors):\n# To remote node with revocation key\nOP_DUP OP_HASH160 <RIPEMD160(SHA256(revocationpubkey))> OP_EQUAL\nOP_IF\n    OP_CHECKSIG\nOP_ELSE\n    <remote_htlcpubkey> OP_SWAP OP_SIZE 32 OP_EQUAL\n    OP_NOTIF\n        # To local node via HTLC-timeout transaction (timelocked).\n        OP_DROP 2 OP_SWAP <local_htlcpubkey> 2 OP_CHECKMULTISIG\n    OP_ELSE\n        # To remote node with preimage.\n        OP_HASH160 <RIPEMD160(payment_hash)> OP_EQUALVERIFY\n        OP_CHECKSIG\n    OP_ENDIF\nOP_ENDIF\n\nOr, with option_anchors:\n# To remote node with revocation key\nOP_DUP OP_HASH160 <RIPEMD160(SHA256(revocationpubkey))> OP_EQUAL\nOP_IF\n    OP_CHECKSIG\nOP_ELSE\n    <remote_htlcpubkey> OP_SWAP OP_SIZE 32 OP_EQUAL\n    OP_NOTIF\n        # To local node via HTLC-timeout transaction (timelocked).\n        OP_DROP 2 OP_SWAP <local_htlcpubkey> 2 OP_CHECKMULTISIG\n    OP_ELSE\n        # To remote node with preimage.\n        OP_HASH160 <RIPEMD160(payment_hash)> OP_EQUALVERIFY\n        OP_CHECKSIG\n    OP_ENDIF\n    1 OP_CHECKSEQUENCEVERIFY OP_DROP\nOP_ENDIF\n\nThe remote node can redeem the HTLC with the witness:\n<remotehtlcsig> <payment_preimage>\n\nNote that if option_anchors applies, the nSequence field of\nthe spending input must be 1.\nIf a revoked commitment transaction is published, the remote node can spend this output immediately with the following witness:\n<revocation_sig> <revocationpubkey>\n\nThe sending node can use the HTLC-timeout transaction to timeout the HTLC once the HTLC is expired, as shown below. This is the only way that the local node can timeout the HTLC, and this branch requires <remotehtlcsig>, which ensures that the local node cannot prematurely timeout the HTLC since the HTLC-timeout transaction has cltv_expiry as its specified locktime. The local node must also wait to_self_delay before accessing these funds, allowing for the remote node to claim these funds if the transaction has been revoked.\nReceived HTLC Outputs\nThis output sends funds to either the remote node after the HTLC-timeout or using the revocation key, or to an HTLC-success transaction with a successful payment preimage. The output is a P2WSH, with a witness script (no option_anchors):\n# To remote node with revocation key\nOP_DUP OP_HASH160 <RIPEMD160(SHA256(revocationpubkey))> OP_EQUAL\nOP_IF\n    OP_CHECKSIG\nOP_ELSE\n    <remote_htlcpubkey> OP_SWAP OP_SIZE 32 OP_EQUAL\n    OP_IF\n        # To local node via HTLC-success transaction.\n        OP_HASH160 <RIPEMD160(payment_hash)> OP_EQUALVERIFY\n        2 OP_SWAP <local_htlcpubkey> 2 OP_CHECKMULTISIG\n    OP_ELSE\n        # To remote node after timeout.\n        OP_DROP <cltv_expiry> OP_CHECKLOCKTIMEVERIFY OP_DROP\n        OP_CHECKSIG\n    OP_ENDIF\nOP_ENDIF\n\nOr, with option_anchors:\n# To remote node with revocation key\nOP_DUP OP_HASH160 <RIPEMD160(SHA256(revocationpubkey))> OP_EQUAL\nOP_IF\n    OP_CHECKSIG\nOP_ELSE\n    <remote_htlcpubkey> OP_SWAP OP_SIZE 32 OP_EQUAL\n    OP_IF\n        # To local node via HTLC-success transaction.\n        OP_HASH160 <RIPEMD160(payment_hash)> OP_EQUALVERIFY\n        2 OP_SWAP <local_htlcpubkey> 2 OP_CHECKMULTISIG\n    OP_ELSE\n        # To remote node after timeout.\n        OP_DROP <cltv_expiry> OP_CHECKLOCKTIMEVERIFY OP_DROP\n        OP_CHECKSIG\n    OP_ENDIF\n    1 OP_CHECKSEQUENCEVERIFY OP_DROP\nOP_ENDIF\n\nTo timeout the HTLC, the remote node spends it with the witness:\n<remotehtlcsig> <>\n\nNote that if option_anchors applies, the nSequence field of\nthe spending input must be 1.\nIf a revoked commitment transaction is published, the remote node can spend this output immediately with the following witness:\n<revocation_sig> <revocationpubkey>\n\nTo redeem the HTLC, the HTLC-success transaction is used as detailed below. This is the only way that the local node can spend the HTLC, since this branch requires <remotehtlcsig>, which ensures that the local node must wait to_self_delay before accessing these funds allowing for the remote node to claim these funds if the transaction has been revoked.\nTrimmed Outputs\nEach peer specifies a dust_limit_satoshis below which outputs should\nnot be produced; these outputs that are not produced are termed "trimmed". A trimmed output is\nconsidered too small to be worth creating and is instead added\nto the commitment transaction fee. For HTLCs, it needs to be taken into\naccount that the second-stage HTLC transaction may also be below the\nlimit.\nRequirements\nThe base fee and anchor output values:\n\nbefore the commitment transaction outputs are determined:\n\nMUST be subtracted from the to_local or to_remote\noutputs, as specified in Fee Calculation.\n\n\n\nThe commitment transaction:\n\nif the amount of the commitment transaction to_local output would be\nless than dust_limit_satoshis set by the transaction owner:\n\nMUST NOT contain that output.\n\n\notherwise:\n\nMUST be generated as specified in to_local Output.\n\n\nif the amount of the commitment transaction to_remote output would be\nless than dust_limit_satoshis set by the transaction owner:\n\nMUST NOT contain that output.\n\n\notherwise:\n\nMUST be generated as specified in to_remote Output.\n\n\nfor every offered HTLC:\n\nif the HTLC amount minus the HTLC-timeout fee would be less than\ndust_limit_satoshis set by the transaction owner:\n\nMUST NOT contain that output.\n\n\notherwise:\n\nMUST be generated as specified in\nOffered HTLC Outputs.\n\n\n\n\nfor every received HTLC:\n\nif the HTLC amount minus the HTLC-success fee would be less than\ndust_limit_satoshis set by the transaction owner:\n\nMUST NOT contain that output.\n\n\notherwise:\n\nMUST be generated as specified in\nReceived HTLC Outputs.\n\n\n\n\n\nHTLC-Timeout and HTLC-Success Transactions\nThese HTLC transactions are almost identical, except the HTLC-timeout transaction is timelocked. Both HTLC-timeout/HTLC-success transactions can be spent by a valid penalty transaction.\n\nversion: 2\nlocktime: 0 for HTLC-success, cltv_expiry for HTLC-timeout\ntxin count: 1\n\ntxin[0] outpoint: txid of the commitment transaction and output_index of the matching HTLC output for the HTLC transaction\ntxin[0] sequence: 0 (set to 1 for option_anchors)\ntxin[0] script bytes: 0\ntxin[0] witness stack: 0 <remotehtlcsig> <localhtlcsig>  <payment_preimage> for HTLC-success, 0 <remotehtlcsig> <localhtlcsig> <> for HTLC-timeout\n\n\ntxout count: 1\n\ntxout[0] amount: the HTLC amount_msat divided by 1000 (rounding down) minus fees in satoshis (see Fee Calculation)\ntxout[0] script: version-0 P2WSH with witness script as shown below\n\n\nif option_anchors applies to this commitment transaction, SIGHASH_SINGLE|SIGHASH_ANYONECANPAY is used as described in BOLT #5.\n\nThe witness script for the output is:\nOP_IF\n    # Penalty transaction\n    <revocationpubkey>\nOP_ELSE\n    `to_self_delay`\n    OP_CHECKSEQUENCEVERIFY\n    OP_DROP\n    <local_delayedpubkey>\nOP_ENDIF\nOP_CHECKSIG\n\nTo spend this via penalty, the remote node uses a witness stack <revocationsig> 1, and to collect the output, the local node uses an input with nSequence to_self_delay and a witness stack <local_delayedsig> 0.\nClosing Transaction\nNote that there are two possible variants for each node.\n\nversion: 2\nlocktime: 0\ntxin count: 1\n\ntxin[0] outpoint: txid and output_index from funding_created message\ntxin[0] sequence: 0xFFFFFFFF\ntxin[0] script bytes: 0\ntxin[0] witness: 0 <signature_for_pubkey1> <signature_for_pubkey2>\n\n\ntxout count: 0, 1 or 2\n\ntxout amount: final balance to be paid to one node (minus fee_satoshis from closing_signed, if this peer funded the channel)\ntxout script: as specified in that node\'s scriptpubkey in its shutdown message\n\n\n\nRequirements\nEach node offering a signature:\n\nMUST round each output down to whole satoshis.\nMUST subtract the fee given by fee_satoshis from the output to the funder.\nMUST remove any output below its own dust_limit_satoshis.\nMAY eliminate its own output.\n\nRationale\nThere is a possibility of irreparable differences on closing if one\nnode considers the other\'s output too small to allow propagation on\nthe Bitcoin network (a.k.a. "dust"), and that other node instead\nconsiders that output too valuable to discard. This is why each\nside uses its own dust_limit_satoshis, and the result can be a\nsignature validation failure, if they disagree on what the closing\ntransaction should look like.\nHowever, if one side chooses to eliminate its own output, there\'s no\nreason for the other side to fail the closing protocol; so this is\nexplicitly allowed. The signature indicates which variant\nhas been used.\nThere will be at least one output, if the funding amount is greater\nthan twice dust_limit_satoshis.\nFees\nFee Calculation\nThe fee calculation for both commitment transactions and HTLC\ntransactions is based on the current feerate_per_kw and the\nexpected weight of the transaction.\nThe actual and expected weights vary for several reasons:\n\nBitcoin uses DER-encoded signatures, which vary in size.\nBitcoin also uses variable-length integers, so a large number of outputs will take 3 bytes to encode rather than 1.\nThe to_remote output may be below the dust limit.\nThe to_local output may be below the dust limit once fees are extracted.\n\nThus, a simplified formula for expected weight is used, which assumes:\n\nSignatures are 73 bytes long (the maximum length).\nThere are a small number of outputs (thus 1 byte to count them).\nThere are always both a to_local output and a to_remote output.\n(if option_anchors) there are always both a to_local_anchor and to_remote_anchor output.\n\nThis yields the following expected weights (details of the computation in Appendix A):\nCommitment weight (no option_anchors):   724 + 172 * num-untrimmed-htlc-outputs\nCommitment weight (option_anchors):     1124 + 172 * num-untrimmed-htlc-outputs\nHTLC-timeout weight (no option_anchors): 663\nHTLC-timeout weight (option_anchors): 666\nHTLC-success weight (no option_anchors): 703\nHTLC-success weight (option_anchors): 706\n\nNote the reference to the "base fee" for a commitment transaction in the requirements below, which is what the funder pays. The actual fee may be higher than the amount calculated here, due to rounding and trimmed outputs.\nRequirements\nThe fee for an HTLC-timeout transaction:\n\nIf option_anchors_zero_fee_htlc_tx applies:\n\nMUST be 0.\n\n\nOtherwise, MUST be calculated to match:\n\nMultiply feerate_per_kw by 663 (666 if option_anchor_outputs applies) and divide by 1000 (rounding down).\n\n\n\nThe fee for an HTLC-success transaction:\n\nIf option_anchors_zero_fee_htlc_tx applies:\n\nMUST be 0.\n\n\nOtherwise, MUST be calculated to match:\n\nMultiply feerate_per_kw by 703 (706 if option_anchor_outputs applies) and divide by 1000 (rounding down).\n\n\n\nThe base fee for a commitment transaction:\n\nMUST be calculated to match:\n\nStart with weight = 724 (1124 if option_anchors applies).\nFor each committed HTLC, if that output is not trimmed as specified in\nTrimmed Outputs, add 172 to weight.\nMultiply feerate_per_kw by weight, divide by 1000 (rounding down).\n\n\n\nExample\nFor example, suppose there is a feerate_per_kw of 5000, a dust_limit_satoshis of 546 satoshis, and a commitment transaction with:\n\ntwo offered HTLCs of 5000000 and 1000000 millisatoshis (5000 and 1000 satoshis)\ntwo received HTLCs of 7000000 and 800000 millisatoshis (7000 and 800 satoshis)\n\nThe HTLC-timeout transaction weight is 663, and thus the fee is 3315 satoshis.\nThe HTLC-success transaction weight is 703, and thus the fee is 3515 satoshis\nThe commitment transaction weight is calculated as follows:\n\n\nweight starts at 724.\n\n\nThe offered HTLC of 5000 satoshis is above 546 + 3315 and results in:\n\nan output of 5000 satoshi in the commitment transaction\nan HTLC-timeout transaction of 5000 - 3315 satoshis that spends this output\nweight increases to 896\n\n\n\nThe offered HTLC of 1000 satoshis is below 546 + 3315 so it is trimmed.\n\n\nThe received HTLC of 7000 satoshis is above 546 + 3515 and results in:\n\nan output of 7000 satoshi in the commitment transaction\nan HTLC-success transaction of 7000 - 3515 satoshis that spends this output\nweight increases to 1068\n\n\n\nThe received HTLC of 800 satoshis is below 546 + 3515 so it is trimmed.\n\n\nThe base commitment transaction fee is 5340 satoshi; the actual\nfee (which adds the 1000 and 800 satoshi HTLCs that would make dust\noutputs) is 7140 satoshi. The final fee may be even higher if the\nto_local or to_remote outputs fall below dust_limit_satoshis.\nFee Payment\nBase commitment transaction fees and amounts for to_local_anchor and to_remote_anchor outputs are extracted from the funder\'s amount;\nRestrictions to the commitment tx output for the funder in relation to the\nchannel reserve apply as described in BOLT #2.\nNote that after the fee amount is subtracted from the to-funder output,\nthat output may be below dust_limit_satoshis, and thus will also\ncontribute to fees.\nA node:\n\nif the resulting fee rate is too low:\n\nMAY send a warning and close the connection, or send an\nerror and fail the channel.\n\n\n\nDust Limits\nThe dust_limit_satoshis parameter is used to configure the threshold below\nwhich nodes will not produce on-chain transaction outputs.\nThere is no consensus rule in Bitcoin that makes outputs below dust thresholds\ninvalid or unspendable, but policy rules in popular implementations will prevent\nrelaying transactions that contain such outputs.\nBitcoin Core defines the following dust thresholds:\n\npay to pubkey hash (p2pkh): 546 satoshis\npay to script hash (p2sh): 540 satoshis\npay to witness pubkey hash (p2wpkh): 294 satoshis\npay to witness script hash (p2wsh): 330 satoshis\nunknown segwit versions: 354 satoshis\n\nThe rationale of this calculation (implemented here)\nis explained in the following sections.\nIn all these sections, the calculations are done with a feerate of 3000 sat/kB\nas per Bitcoin Core\'s implementation.\nPay to pubkey hash (p2pkh)\nA p2pkh output is 34 bytes:\n\n8 bytes for the output amount\n1 byte for the script length\n25 bytes for the script (OP_DUP OP_HASH160 20 20-bytes OP_EQUALVERIFY OP_CHECKSIG)\n\nA p2pkh input is at least 148 bytes:\n\n36 bytes for the previous output (32 bytes hash + 4 bytes index)\n4 bytes for the sequence\n1 byte for the script sig length\n107 bytes for the script sig:\n\n1 byte for the items count\n1 byte for the signature length\n71 bytes for the signature\n1 byte for the public key length\n33 bytes for the public key\n\n\n\nThe p2pkh dust threshold is then (34 + 148) * 3000 / 1000 = 546 satoshis\nPay to script hash (p2sh)\nA p2sh output is 32 bytes:\n\n8 bytes for the output amount\n1 byte for the script length\n23 bytes for the script (OP_HASH160 20 20-bytes OP_EQUAL)\n\nA p2sh input doesn\'t have a fixed size, since it depends on the underlying\nscript, so we use 148 bytes as a lower bound.\nThe p2sh dust threshold is then (32 + 148) * 3000 / 1000 = 540 satoshis\nPay to witness pubkey hash (p2wpkh)\nA p2wpkh output is 31 bytes:\n\n8 bytes for the output amount\n1 byte for the script length\n22 bytes for the script (OP_0 20 20-bytes)\n\nA p2wpkh input is at least 67 bytes (depending on the signature length):\n\n36 bytes for the previous output (32 bytes hash + 4 bytes index)\n4 bytes for the sequence\n1 byte for the script sig length\n26 bytes for the witness (rounded down from 26.75, with the 75% segwit discount applied):\n\n1 byte for the items count\n1 byte for the signature length\n71 bytes for the signature\n1 byte for the public key length\n33 bytes for the public key\n\n\n\nThe p2wpkh dust threshold is then (31 + 67) * 3000 / 1000 = 294 satoshis\nPay to witness script hash (p2wsh)\nA p2wsh output is 43 bytes:\n\n8 bytes for the output amount\n1 byte for the script length\n34 bytes for the script (OP_0 32 32-bytes)\n\nA p2wsh input doesn\'t have a fixed size, since it depends on the underlying\nscript, so we use 67 bytes as a lower bound.\nThe p2wsh dust threshold is then (43 + 67) * 3000 / 1000 = 330 satoshis\nUnknown segwit versions\nUnknown segwit outputs are at most 51 bytes:\n\n8 bytes for the output amount\n1 byte for the script length\n42 bytes for the script (OP_1 through OP_16 inclusive, followed by a single push of 2 to 40 bytes)\n\nThe input doesn\'t have a fixed size, since it depends on the underlying\nscript, so we use 67 bytes as a lower bound.\nThe unknown segwit version dust threshold is then (51 + 67) * 3000 / 1000 = 354 satoshis\nCommitment Transaction Construction\nThis section ties the previous sections together to detail the\nalgorithm for constructing the commitment transaction for one peer:\ngiven that peer\'s dust_limit_satoshis, the current feerate_per_kw,\nthe amounts due to each peer (to_local and to_remote), and all\ncommitted HTLCs:\n\nInitialize the commitment transaction input and locktime, as specified\nin Commitment Transaction.\nCalculate which committed HTLCs need to be trimmed (see Trimmed Outputs).\nCalculate the base commitment transaction fee.\nSubtract this base fee from the funder (either to_local or to_remote).\nIf option_anchors applies to the commitment transaction,\nalso subtract two times the fixed anchor size of 330 sats from the funder\n(either to_local or to_remote).\nFor every offered HTLC, if it is not trimmed, add an\noffered HTLC output.\nFor every received HTLC, if it is not trimmed, add an\nreceived HTLC output.\nIf the to_local amount is greater or equal to dust_limit_satoshis,\nadd a to_local output.\nIf the to_remote amount is greater or equal to dust_limit_satoshis,\nadd a to_remote output.\nIf option_anchors applies to the commitment transaction:\n\nif to_local exists or there are untrimmed HTLCs, add a to_local_anchor output\nif to_remote exists or there are untrimmed HTLCs, add a to_remote_anchor output\n\n\nSort the outputs into BIP 69+CLTV order.\n\nKeys\nKey Derivation\nEach commitment transaction uses a unique localpubkey, and a remotepubkey.\nThe HTLC-success and HTLC-timeout transactions use local_delayedpubkey and revocationpubkey.\nThese are changed for every transaction based on the per_commitment_point.\nFor option_static_remotekey and option_anchors, no key rotation\nis applied to remotepubkey.\nThe reason for key change is so that trustless watching for revoked\ntransactions can be outsourced. Such a watcher should not be able to\ndetermine the contents of a commitment transaction — even if the watcher knows\nwhich transaction ID to watch for and can make a reasonable guess\nas to which HTLCs and balances may be included. Nonetheless, to\navoid storage of every commitment transaction, a watcher can be given the\nper_commitment_secret values (which can be stored compactly) and the\nrevocation_basepoint and delayed_payment_basepoint used to regenerate\nthe scripts required for the penalty transaction; thus, a watcher need only be\ngiven (and store) the signatures for each penalty input.\nChanging the localpubkey every time ensures that commitment\ntransaction ID cannot be guessed except in the trivial case where there is no\nto_local output, as every commitment transaction uses an ID\nin its output script. Splitting the local_delayedpubkey, which is required for\nthe penalty transaction, allows it to be shared with the watcher without\nrevealing localpubkey; even if both peers use the same watcher, nothing is revealed.\nFinally, even in the case of normal unilateral close, the HTLC-success\nand/or HTLC-timeout transactions do not reveal anything to the\nwatcher, as it does not know the corresponding per_commitment_secret and\ncannot relate the local_delayedpubkey or revocationpubkey with their bases.\nFor efficiency, keys are generated from a series of per-commitment secrets\nthat are generated from a single seed, which allows the receiver to compactly\nstore them (see below).\nlocalpubkey, local_htlcpubkey, remote_htlcpubkey, local_delayedpubkey, and remote_delayedpubkey Derivation\nThese pubkeys are simply generated by addition from their base points:\npubkey = basepoint + SHA256(per_commitment_point || basepoint) * G\n\nThe localpubkey uses the local node\'s payment_basepoint;\nThe remotepubkey uses the remote node\'s payment_basepoint;\nthe local_htlcpubkey uses the local node\'s htlc_basepoint;\nthe remote_htlcpubkey uses the remote node\'s htlc_basepoint;\nthe local_delayedpubkey uses the local node\'s delayed_payment_basepoint;\nand the remote_delayedpubkey uses the remote node\'s delayed_payment_basepoint.\nThe corresponding private keys can be similarly derived, if the basepoint\nsecrets are known (i.e. the private keys corresponding to localpubkey, local_htlcpubkey, and local_delayedpubkey only):\nprivkey = basepoint_secret + SHA256(per_commitment_point || basepoint)\n\nremotepubkey Derivation\nIf option_static_remotekey or option_anchors is negotiated, the remotepubkey is simply the\nremote node\'s payment_basepoint, otherwise it is calculated as above using\nthe remote node\'s payment_basepoint.\nThe simplified derivation means that a node can spend a commitment\ntransaction even if it has lost data and doesn\'t know the\ncorresponding per_commitment_point.  A watchtower could correlate\ntransactions given to it which only have a to_remote output if it\nsees one of them onchain, but such transactions do not need any\nenforcement and should not be handed to a watchtower.\nrevocationpubkey Derivation\nThe revocationpubkey is a blinded key: when the local node wishes to create a new\ncommitment for the remote node, it uses its own revocation_basepoint and the remote\nnode\'s per_commitment_point to derive a new revocationpubkey for the\ncommitment. After the remote node reveals the\nper_commitment_secret used (thereby revoking that commitment), the local node\ncan then derive the revocationprivkey, as it now knows the two secrets\nnecessary to derive the key (revocation_basepoint_secret and\nper_commitment_secret).\nThe per_commitment_point is generated using elliptic-curve multiplication:\nper_commitment_point = per_commitment_secret * G\n\nAnd this is used to derive the revocation pubkey from the remote node\'s\nrevocation_basepoint:\nrevocationpubkey = revocation_basepoint * SHA256(revocation_basepoint || per_commitment_point) + per_commitment_point * SHA256(per_commitment_point || revocation_basepoint)\n\nThis construction ensures that neither the node providing the\nbasepoint nor the node providing the per_commitment_point can know the\nprivate key without the other node\'s secret.\nThe corresponding private key can be derived once the per_commitment_secret\nis known:\nrevocationprivkey = revocation_basepoint_secret * SHA256(revocation_basepoint || per_commitment_point) + per_commitment_secret * SHA256(per_commitment_point || revocation_basepoint)\n\nPer-commitment Secret Requirements\nA node:\n\nMUST select an unguessable 256-bit seed for each connection,\nMUST NOT reveal the seed.\n\nUp to (2^48 - 1) per-commitment secrets can be generated.\nThe first secret used:\n\nMUST be index 281474976710655,\n\nand from there, the index is decremented.\n\n\n\nThe I\'th secret P:\n\nMUST match the output of this algorithm:\n\ngenerate_from_seed(seed, I):\n    P = seed\n    for B in 47 down to 0:\n        if B set in I:\n            flip(B) in P\n            P = SHA256(P)\n    return P\n\nWhere "flip(B)" alternates the (B mod 8) bit of the (B div 8)\nbyte of the value.  So, "flip(0) in e3b0..." is "e2b0...", and\n"flip(10) in "e3b0..." is "e3b4...".\nThe receiving node:\n\nMAY store all previous per-commitment secrets.\nMAY calculate them from a compact representation, as described below.\n\nEfficient Per-commitment Secret Storage\nThe receiver of a series of secrets can store them compactly in an\narray of 49 (value,index) pairs. Because, for a given secret on a\n2^X boundary, all secrets up to the next 2^X boundary can be derived;\nand secrets are always received in descending order starting at\n0xFFFFFFFFFFFF.\nIn binary, it\'s helpful to think of any index in terms of a prefix,\nfollowed by some trailing 0s. You can derive the secret for any\nindex that matches this prefix.\nFor example, secret 0xFFFFFFFFFFF0 allows the secrets to be derived for\n0xFFFFFFFFFFF1 through 0xFFFFFFFFFFFF, inclusive; and secret 0xFFFFFFFFFF08\nallows the secrets to be derived for 0xFFFFFFFFFF09 through 0xFFFFFFFFFF0F,\ninclusive.\nThis is done using a slight generalization of generate_from_seed above:\n# Return I\'th secret given base secret whose index has bits..47 the same.\nderive_secret(base, bits, I):\n    P = base\n    for B in bits - 1 down to 0:\n        if B set in I:\n            flip(B) in P\n            P = SHA256(P)\n    return P\n\nOnly one secret for each unique prefix need be saved; in effect, the number of\ntrailing 0s is counted, and this determines where in the storage array the\nsecret is stored:\n# a.k.a. count trailing 0s\nwhere_to_put_secret(I):\n    for B in 0 to 47:\n        if testbit(I) in B == 1:\n            return B\n    # I = 0, this is the seed.\n    return 48\n\nA double-check, that all previous secrets derive correctly, is needed;\nif this check fails, the secrets were not generated from the same seed:\ninsert_secret(secret, I):\n    B = where_to_put_secret(I)\n\n    # This tracks the index of the secret in each bucket across the traversal.\n    for b in 0 to B:\n        if derive_secret(secret, B, known[b].index) != known[b].secret:\n            error The secret for I is incorrect\n            return\n\n    # Assuming this automatically extends known[] as required.\n    known[B].index = I\n    known[B].secret = secret\n\nFinally, if an unknown secret at index I needs be derived, it must be\ndiscovered which known secret can be used to derive it. The simplest\nmethod is iterating over all the known secrets, and testing if each\ncan be used to derive the unknown secret:\nderive_old_secret(I):\n    for b in 0 to len(secrets):\n        # Mask off the non-zero prefix of the index.\n        MASK = ~((1 << b) - 1)\n        if (I & MASK) == secrets[b].index:\n            return derive_secret(known, i, I)\n    error Index \'I\' hasn\'t been received yet.\n\nThis looks complicated, but remember that the index in entry b has\nb trailing 0s; the mask and compare simply checks if the index\nat each bucket is a prefix of the desired index.\nAppendix A: Expected Weights\nExpected Weight of the Commitment Transaction\nThe expected weight of a commitment transaction is calculated as follows:\np2wsh: 34 bytes\n\t- OP_0: 1 byte\n\t- OP_DATA: 1 byte (witness_script_SHA256 length)\n\t- witness_script_SHA256: 32 bytes\n\np2wpkh: 22 bytes\n\t- OP_0: 1 byte\n\t- OP_DATA: 1 byte (public_key_HASH160 length)\n\t- public_key_HASH160: 20 bytes\n\nmulti_sig: 71 bytes\n\t- OP_2: 1 byte\n\t- OP_DATA: 1 byte (pub_key_alice length)\n\t- pub_key_alice: 33 bytes\n\t- OP_DATA: 1 byte (pub_key_bob length)\n\t- pub_key_bob: 33 bytes\n\t- OP_2: 1 byte\n\t- OP_CHECKMULTISIG: 1 byte\n\nwitness: 222 bytes\n\t- number_of_witness_elements: 1 byte\n\t- nil_length: 1 byte\n\t- sig_alice_length: 1 byte\n\t- sig_alice: 73 bytes\n\t- sig_bob_length: 1 byte\n\t- sig_bob: 73 bytes\n\t- witness_script_length: 1 byte\n\t- witness_script (multi_sig)\n\nfunding_input: 41 bytes\n\t- previous_out_point: 36 bytes\n\t\t- hash: 32 bytes\n\t\t- index: 4 bytes\n\t- var_int: 1 byte (script_sig length)\n\t- script_sig: 0 bytes\n\t- witness <----\t"witness" is used instead of "script_sig" for\n \t\t\ttransaction validation; however, "witness" is stored\n \t\t\tseparately, and the cost for its size is smaller. So,\n \t\t    the calculation of ordinary data is separated\n \t\t\tfrom the witness data.\n\t- sequence: 4 bytes\n\noutput_paying_to_local: 43 bytes\n\t- value: 8 bytes\n\t- var_int: 1 byte (pk_script length)\n\t- pk_script (p2wsh): 34 bytes\n\noutput_paying_to_remote (no option_anchors): 31 bytes\n\t- value: 8 bytes\n\t- var_int: 1 byte (pk_script length)\n\t- pk_script (p2wpkh): 22 bytes\n\noutput_paying_to_remote (option_anchors): 43 bytes\n\t- value: 8 bytes\n\t- var_int: 1 byte (pk_script length)\n\t- pk_script (p2wsh): 34 bytes\n\noutput_anchor (option_anchors): 43 bytes\n\t- value: 8 bytes\n\t- var_int: 1 byte (pk_script length)\n\t- pk_script (p2wsh): 34 bytes\n\nhtlc_output: 43 bytes\n\t- value: 8 bytes\n\t- var_int: 1 byte (pk_script length)\n\t- pk_script (p2wsh): 34 bytes\n\n witness_header: 2 bytes\n\t- flag: 1 byte\n\t- marker: 1 byte\n\n commitment_transaction (no option_anchors): 125 + 43 * num-htlc-outputs bytes\n\t- version: 4 bytes\n\t- witness_header <---- part of the witness data\n\t- count_tx_in: 1 byte\n\t- tx_in: 41 bytes\n\t\tfunding_input\n\t- count_tx_out: 1 byte\n\t- tx_out: 74 + 43 * num-htlc-outputs bytes\n\t\toutput_paying_to_remote,\n\t\toutput_paying_to_local,\n\t\t....htlc_output\'s...\n\t- lock_time: 4 bytes\n\n commitment_transaction (option_anchors): 225 + 43 * num-htlc-outputs bytes\n\t- version: 4 bytes\n\t- witness_header <---- part of the witness data\n\t- count_tx_in: 1 byte\n\t- tx_in: 41 bytes\n\t\tfunding_input\n\t- count_tx_out: 3 byte\n\t- tx_out: 172 + 43 * num-htlc-outputs bytes\n\t\toutput_paying_to_remote,\n\t\toutput_paying_to_local,\n\t\toutput_anchor,\n\t\toutput_anchor,\n\t\t....htlc_output\'s...\n\t- lock_time: 4 bytes\n\nMultiplying non-witness data by 4 results in a weight of:\n// 500 + 172 * num-htlc-outputs weight (no option_anchors)\n// 900 + 172 * num-htlc-outputs weight (option_anchors)\ncommitment_transaction_weight = 4 * commitment_transaction\n\n// 224 weight\nwitness_weight = witness_header + witness\n\noverall_weight (no option_anchors) = 500 + 172 * num-htlc-outputs + 224 weight\noverall_weight (option_anchors) = 900 + 172 * num-htlc-outputs + 224 weight\n\nExpected Weight of HTLC-timeout and HTLC-success Transactions\nThe expected weight of an HTLC transaction is calculated as follows:\naccepted_htlc_script: 140 bytes (143 bytes with option_anchors)\n    - OP_DUP: 1 byte\n    - OP_HASH160: 1 byte\n    - OP_DATA: 1 byte (RIPEMD160(SHA256(revocationpubkey)) length)\n    - RIPEMD160(SHA256(revocationpubkey)): 20 bytes\n    - OP_EQUAL: 1 byte\n    - OP_IF: 1 byte\n    - OP_CHECKSIG: 1 byte\n    - OP_ELSE: 1 byte\n    - OP_DATA: 1 byte (remotepubkey length)\n    - remotepubkey: 33 bytes\n    - OP_SWAP: 1 byte\n    - OP_SIZE: 1 byte\n    - OP_DATA: 1 byte (32 length)\n    - 32: 1 byte\n    - OP_EQUAL: 1 byte\n    - OP_IF: 1 byte\n    - OP_HASH160: 1 byte\n\t- OP_DATA: 1 byte (RIPEMD160(payment_hash) length)\n\t- RIPEMD160(payment_hash): 20 bytes\n    - OP_EQUALVERIFY: 1 byte\n    - 2: 1 byte\n    - OP_SWAP: 1 byte\n\t- OP_DATA: 1 byte (localpubkey length)\n\t- localpubkey: 33 bytes\n    - 2: 1 byte\n    - OP_CHECKMULTISIG: 1 byte\n    - OP_ELSE: 1 byte\n    - OP_DROP: 1 byte\n\t- OP_DATA: 1 byte (cltv_expiry length)\n\t- cltv_expiry: 4 bytes\n    - OP_CHECKLOCKTIMEVERIFY: 1 byte\n    - OP_DROP: 1 byte\n    - OP_CHECKSIG: 1 byte\n    - OP_ENDIF: 1 byte\n    - OP_1: 1 byte (option_anchors)\n    - OP_CHECKSEQUENCEVERIFY: 1 byte (option_anchors)\n    - OP_DROP: 1 byte (option_anchors)\n    - OP_ENDIF: 1 byte\n\noffered_htlc_script: 133 bytes (136 bytes with option_anchors)\n    - OP_DUP: 1 byte\n    - OP_HASH160: 1 byte\n    - OP_DATA: 1 byte (RIPEMD160(SHA256(revocationpubkey)) length)\n    - RIPEMD160(SHA256(revocationpubkey)): 20 bytes\n    - OP_EQUAL: 1 byte\n    - OP_IF: 1 byte\n    - OP_CHECKSIG: 1 byte\n    - OP_ELSE: 1 byte\n\t- OP_DATA: 1 byte (remotepubkey length)\n\t- remotepubkey: 33 bytes\n\t- OP_SWAP: 1 byte\n\t- OP_SIZE: 1 byte\n\t- OP_DATA: 1 byte (32 length)\n\t- 32: 1 byte\n\t- OP_EQUAL: 1 byte\n\t- OP_NOTIF: 1 byte\n\t- OP_DROP: 1 byte\n\t- 2: 1 byte\n\t- OP_SWAP: 1 byte\n\t- OP_DATA: 1 byte (localpubkey length)\n\t- localpubkey: 33 bytes\n\t- 2: 1 byte\n\t- OP_CHECKMULTISIG: 1 byte\n\t- OP_ELSE: 1 byte\n\t- OP_HASH160: 1 byte\n\t- OP_DATA: 1 byte (RIPEMD160(payment_hash) length)\n\t- RIPEMD160(payment_hash): 20 bytes\n\t- OP_EQUALVERIFY: 1 byte\n\t- OP_CHECKSIG: 1 byte\n\t- OP_ENDIF: 1 byte\n    - OP_1: 1 byte (option_anchors)\n    - OP_CHECKSEQUENCEVERIFY: 1 byte (option_anchors)\n    - OP_DROP: 1 byte (option_anchors)\n    - OP_ENDIF: 1 byte\n\ntimeout_witness: 285 bytes (288 bytes with option_anchors)\n\t- number_of_witness_elements: 1 byte\n\t- nil_length: 1 byte\n\t- sig_alice_length: 1 byte\n\t- sig_alice: 73 bytes\n\t- sig_bob_length: 1 byte\n\t- sig_bob: 73 bytes\n\t- nil_length: 1 byte\n\t- witness_script_length: 1 byte\n\t- witness_script (offered_htlc_script)\n\nsuccess_witness: 324 bytes (327 bytes with option_anchors)\n\t- number_of_witness_elements: 1 byte\n\t- nil_length: 1 byte\n\t- sig_alice_length: 1 byte\n\t- sig_alice: 73 bytes\n\t- sig_bob_length: 1 byte\n\t- sig_bob: 73 bytes\n\t- preimage_length: 1 byte\n\t- preimage: 32 bytes\n\t- witness_script_length: 1 byte\n\t- witness_script (accepted_htlc_script)\n\ncommitment_input: 41 bytes\n\t- previous_out_point: 36 bytes\n\t\t- hash: 32 bytes\n\t\t- index: 4 bytes\n\t- var_int: 1 byte (script_sig length)\n\t- script_sig: 0 bytes\n\t- witness (success_witness or timeout_witness)\n\t- sequence: 4 bytes\n\nhtlc_output: 43 bytes\n\t- value: 8 bytes\n\t- var_int: 1 byte (pk_script length)\n\t- pk_script (p2wsh): 34 bytes\n\nhtlc_transaction:\n\t- version: 4 bytes\n\t- witness_header <---- part of the witness data\n\t- count_tx_in: 1 byte\n\t- tx_in: 41 bytes\n\t\tcommitment_input\n\t- count_tx_out: 1 byte\n\t- tx_out: 43\n\t\thtlc_output\n\t- lock_time: 4 bytes\n\nMultiplying non-witness data by 4 results in a weight of 376. Adding\nthe witness data for each case (285 or 288 + 2 for HTLC-timeout, 324 or 327 + 2 for\nHTLC-success) results in weights of:\n663 (HTLC-timeout) (666 with option_anchors))\n703 (HTLC-success) (706 with option_anchors))\n            - (really 702 and 705, but we use these numbers for historical reasons)\n\nAppendix B: Funding Transaction Test Vectors\nIn the following:\n\nIt\'s assumed that local is the funder.\nPrivate keys are displayed as 32 bytes plus a trailing 1 (Bitcoin\'s convention for "compressed" private keys, i.e. keys for which the public key is compressed).\nTransaction signatures are all deterministic, using RFC6979 (using HMAC-SHA256). A valid signature MUST sign all inputs and outputs of the relevant transaction (i.e. MUST be created with a SIGHASH_ALL signature hash), unless explicitly stated otherwise. Note that clients MUST send the signature in compact encoding and not in Bitcoin-script format, thus the signature hash byte is not transmitted.\n\nThe input for the funding transaction was created using a test chain\nwith the following first two blocks; the second block contains a spendable\ncoinbase (note that such a P2PKH input is inadvisable, as detailed in BOLT #2, but provides the simplest example):\nBlock 0 (genesis): 0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4adae5494dffff7f20020000000101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\nBlock 1: 0000002006226e46111a0b59caaf126043eb5bbf28c34f3a5e332a1fc7b2b73cf188910fadbb20ea41a8423ea937e76e8151636bf6093b70eaff942930d20576600521fdc30f9858ffff7f20000000000101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff0100f2052a010000001976a9143ca33c2e4446f4a305f23c80df8ad1afdcf652f988ac00000000\nBlock 1 coinbase transaction: 01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff0100f2052a010000001976a9143ca33c2e4446f4a305f23c80df8ad1afdcf652f988ac00000000\nBlock 1 coinbase privkey: 6bd078650fcee8444e4e09825227b801a1ca928debb750eb36e6d56124bb20e801\n# privkey in base58: cRCH7YNcarfvaiY1GWUKQrRGmoezvfAiqHtdRvxe16shzbd7LDMz\n# pubkey in base68: mm3aPLSv9fBrbS68JzurAMp4xGoddJ6pSf\n\nThe funding transaction is paid to the following pubkeys:\nlocal_funding_pubkey: 023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb\nremote_funding_pubkey: 030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c1\n# funding witness script = 5221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae\n\nThe funding transaction has a single input and a change output (order\ndetermined by BIP69 in this case):\ninput txid: fd2105607605d2302994ffea703b09f66b6351816ee737a93e42a841ea20bbad\ninput index: 0\ninput satoshis: 5000000000\nfunding satoshis: 10000000\n# funding witness script = 5221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae\n# feerate_per_kw: 15000\nchange satoshis: 4989986080\nfunding output: 0\n\nThe resulting funding transaction is:\nfunding tx: 0200000001adbb20ea41a8423ea937e76e8151636bf6093b70eaff942930d20576600521fd000000006b48304502210090587b6201e166ad6af0227d3036a9454223d49a1f11839c1a362184340ef0240220577f7cd5cca78719405cbf1de7414ac027f0239ef6e214c90fcaab0454d84b3b012103535b32d5eb0a6ed0982a0479bbadc9868d9836f6ba94dd5a63be16d875069184ffffffff028096980000000000220020c015c4a6be010e21657068fc2e6a9d02b27ebe4d490a25846f7237f104d1a3cd20256d29010000001600143ca33c2e4446f4a305f23c80df8ad1afdcf652f900000000\n# txid: 8984484a580b825b9972d7adb15050b3ab624ccd731946b3eeddb92f4e7ef6be\n\nAppendix C: Commitment and HTLC Transaction Test Vectors\nIn the following:\n\nlocal transactions are considered, which implies that all payments to local are delayed.\nIt\'s assumed that local is the funder.\nPrivate keys are displayed as 32 bytes plus a trailing 1 (Bitcoin\'s convention for "compressed" private keys, i.e. keys for which the public key is compressed).\nTransaction signatures are all deterministic, using RFC6979 (using HMAC-SHA256).\n\nTo start, common basic parameters for each test vector are defined: the\nHTLCs are not used for the first "simple commitment tx with no HTLCs" test,\nand HTLCs 5 and 6 are only used in the "same amount and preimage" test.\nfunding_tx_id: 8984484a580b825b9972d7adb15050b3ab624ccd731946b3eeddb92f4e7ef6be\nfunding_output_index: 0\nfunding_amount_satoshi: 10000000\ncommitment_number: 42\nlocal_delay: 144\nlocal_dust_limit_satoshi: 546\nhtlc 0 direction: remote->local\nhtlc 0 amount_msat: 1000000\nhtlc 0 expiry: 500\nhtlc 0 payment_preimage: 0000000000000000000000000000000000000000000000000000000000000000\nhtlc 1 direction: remote->local\nhtlc 1 amount_msat: 2000000\nhtlc 1 expiry: 501\nhtlc 1 payment_preimage: 0101010101010101010101010101010101010101010101010101010101010101\nhtlc 2 direction: local->remote\nhtlc 2 amount_msat: 2000000\nhtlc 2 expiry: 502\nhtlc 2 payment_preimage: 0202020202020202020202020202020202020202020202020202020202020202\nhtlc 3 direction: local->remote\nhtlc 3 amount_msat: 3000000\nhtlc 3 expiry: 503\nhtlc 3 payment_preimage: 0303030303030303030303030303030303030303030303030303030303030303\nhtlc 4 direction: remote->local\nhtlc 4 amount_msat: 4000000\nhtlc 4 expiry: 504\nhtlc 4 payment_preimage: 0404040404040404040404040404040404040404040404040404040404040404\nhtlc 5 direction: local->remote\nhtlc 5 amount_msat: 5000000\nhtlc 5 expiry: 506\nhtlc 5 payment_preimage: 0505050505050505050505050505050505050505050505050505050505050505\nhtlc 6 direction: local->remote\nhtlc 6 amount_msat: 5000001\nhtlc 6 expiry: 505\nhtlc 6 payment_preimage: 0505050505050505050505050505050505050505050505050505050505050505\n\n\nHere are the points used to derive the obscuring factor for the commitment number:\nlocal_payment_basepoint: 034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa\nremote_payment_basepoint: 032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991\n# obscured commitment number = 0x2bb038521914 ^ 42\n\nAnd, here are the keys needed to create the transactions:\nlocal_funding_privkey: 30ff4956bbdd3222d44cc5e8a1261dab1e07957bdac5ae88fe3261ef321f374901\nlocal_funding_pubkey: 023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb\nremote_funding_pubkey: 030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c1\nlocal_privkey: bb13b121cdc357cd2e608b0aea294afca36e2b34cf958e2e6451a2f27469449101\nlocalpubkey: 030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e7\nremotepubkey: 0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b\nlocal_delayedpubkey: 03fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c\nlocal_revocation_pubkey: 0212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b19\n# funding wscript = 5221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae\n\nAnd, here are the test vectors themselves:\nname: simple commitment tx with no HTLCs\nto_local_msat: 7000000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 15000\n# base commitment transaction fee = 10860\n# actual commitment transaction fee = 10860\n# to_local amount 6989140 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3045022100f51d2e566a70ba740fc5d8c0f07b9b93d2ed741c3c0860c613173de7d39e7968022041376d520e9c0e1ad52248ddf4b22e12be8763007df977253ef45a4ca3bdb7c0\n# local_signature = 3044022051b75c73198c6deee1a875871c3961832909acd297c6b908d59e3319e5185a46022055c419379c5051a78d00dbbce11b5b664a0c22815fbcc6fcef6b1937c3836939\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8002c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de84311054a56a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022051b75c73198c6deee1a875871c3961832909acd297c6b908d59e3319e5185a46022055c419379c5051a78d00dbbce11b5b664a0c22815fbcc6fcef6b1937c383693901483045022100f51d2e566a70ba740fc5d8c0f07b9b93d2ed741c3c0860c613173de7d39e7968022041376d520e9c0e1ad52248ddf4b22e12be8763007df977253ef45a4ca3bdb7c001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with all five HTLCs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 0\n# base commitment transaction fee = 0\n# actual commitment transaction fee = 0\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #0 received amount 1000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6988000 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 304402204fd4928835db1ccdfc40f5c78ce9bd65249b16348df81f0c44328dcdefc97d630220194d3869c38bc732dd87d13d2958015e2fc16829e74cd4377f84d215c0b70606\n# local_signature = 30440220275b0c325a5e9355650dc30c0eccfbc7efb23987c24b556b9dfdd40effca18d202206caceb2c067836c51f296740c7ae807ffcbfbf1dd3a0d56b6de9a5b247985f06\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8007e80300000000000022002052bfef0479d7b293c27e0f1eb294bea154c63a3294ef092c19af51409bce0e2ad007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110e0a06a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004730440220275b0c325a5e9355650dc30c0eccfbc7efb23987c24b556b9dfdd40effca18d202206caceb2c067836c51f296740c7ae807ffcbfbf1dd3a0d56b6de9a5b247985f060147304402204fd4928835db1ccdfc40f5c78ce9bd65249b16348df81f0c44328dcdefc97d630220194d3869c38bc732dd87d13d2958015e2fc16829e74cd4377f84d215c0b7060601475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 5\n# signature for output #0 (htlc-success for htlc #0)\nremote_htlc_signature = 304402206a6e59f18764a5bf8d4fa45eebc591566689441229c918b480fb2af8cc6a4aeb02205248f273be447684b33e3c8d1d85a8e0ca9fa0bae9ae33f0527ada9c162919a6\n# local_htlc_signature = 304402207cb324fa0de88f452ffa9389678127ebcf4cabe1dd848b8e076c1a1962bf34720220116ed922b12311bd602d67e60d2529917f21c5b82f25ff6506c0f87886b4dfd5\nhtlc_success_tx (htlc #0): 020000000001018154ecccf11a5fb56c39654c4deb4d2296f83c69268280b94d021370c94e219700000000000000000001e8030000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402206a6e59f18764a5bf8d4fa45eebc591566689441229c918b480fb2af8cc6a4aeb02205248f273be447684b33e3c8d1d85a8e0ca9fa0bae9ae33f0527ada9c162919a60147304402207cb324fa0de88f452ffa9389678127ebcf4cabe1dd848b8e076c1a1962bf34720220116ed922b12311bd602d67e60d2529917f21c5b82f25ff6506c0f87886b4dfd5012000000000000000000000000000000000000000000000000000000000000000008a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac686800000000\n# signature for output #1 (htlc-timeout for htlc #2)\nremote_htlc_signature = 3045022100d5275b3619953cb0c3b5aa577f04bc512380e60fa551762ce3d7a1bb7401cff9022037237ab0dac3fe100cde094e82e2bed9ba0ed1bb40154b48e56aa70f259e608b\n# local_htlc_signature = 3045022100c89172099507ff50f4c925e6c5150e871fb6e83dd73ff9fbb72f6ce829a9633f02203a63821d9162e99f9be712a68f9e589483994feae2661e4546cd5b6cec007be5\nhtlc_timeout_tx (htlc #2): 020000000001018154ecccf11a5fb56c39654c4deb4d2296f83c69268280b94d021370c94e219701000000000000000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100d5275b3619953cb0c3b5aa577f04bc512380e60fa551762ce3d7a1bb7401cff9022037237ab0dac3fe100cde094e82e2bed9ba0ed1bb40154b48e56aa70f259e608b01483045022100c89172099507ff50f4c925e6c5150e871fb6e83dd73ff9fbb72f6ce829a9633f02203a63821d9162e99f9be712a68f9e589483994feae2661e4546cd5b6cec007be501008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #2 (htlc-success for htlc #1)\nremote_htlc_signature = 304402201b63ec807771baf4fdff523c644080de17f1da478989308ad13a58b51db91d360220568939d38c9ce295adba15665fa68f51d967e8ed14a007b751540a80b325f202\n# local_htlc_signature = 3045022100def389deab09cee69eaa1ec14d9428770e45bcbe9feb46468ecf481371165c2f022015d2e3c46600b2ebba8dcc899768874cc6851fd1ecb3fffd15db1cc3de7e10da\nhtlc_success_tx (htlc #1): 020000000001018154ecccf11a5fb56c39654c4deb4d2296f83c69268280b94d021370c94e219702000000000000000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402201b63ec807771baf4fdff523c644080de17f1da478989308ad13a58b51db91d360220568939d38c9ce295adba15665fa68f51d967e8ed14a007b751540a80b325f20201483045022100def389deab09cee69eaa1ec14d9428770e45bcbe9feb46468ecf481371165c2f022015d2e3c46600b2ebba8dcc899768874cc6851fd1ecb3fffd15db1cc3de7e10da012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #3 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100daee1808f9861b6c3ecd14f7b707eca02dd6bdfc714ba2f33bc8cdba507bb182022026654bf8863af77d74f51f4e0b62d461a019561bb12acb120d3f7195d148a554\n# local_htlc_signature = 30440220643aacb19bbb72bd2b635bc3f7375481f5981bace78cdd8319b2988ffcc6704202203d27784ec8ad51ed3bd517a05525a5139bb0b755dd719e0054332d186ac08727\nhtlc_timeout_tx (htlc #3): 020000000001018154ecccf11a5fb56c39654c4deb4d2296f83c69268280b94d021370c94e219703000000000000000001b80b0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100daee1808f9861b6c3ecd14f7b707eca02dd6bdfc714ba2f33bc8cdba507bb182022026654bf8863af77d74f51f4e0b62d461a019561bb12acb120d3f7195d148a554014730440220643aacb19bbb72bd2b635bc3f7375481f5981bace78cdd8319b2988ffcc6704202203d27784ec8ad51ed3bd517a05525a5139bb0b755dd719e0054332d186ac0872701008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #4 (htlc-success for htlc #4)\nremote_htlc_signature = 304402207e0410e45454b0978a623f36a10626ef17b27d9ad44e2760f98cfa3efb37924f0220220bd8acd43ecaa916a80bd4f919c495a2c58982ce7c8625153f8596692a801d\n# local_htlc_signature = 30440220549e80b4496803cbc4a1d09d46df50109f546d43fbbf86cd90b174b1484acd5402205f12a4f995cb9bded597eabfee195a285986aa6d93ae5bb72507ebc6a4e2349e\nhtlc_success_tx (htlc #4): 020000000001018154ecccf11a5fb56c39654c4deb4d2296f83c69268280b94d021370c94e219704000000000000000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207e0410e45454b0978a623f36a10626ef17b27d9ad44e2760f98cfa3efb37924f0220220bd8acd43ecaa916a80bd4f919c495a2c58982ce7c8625153f8596692a801d014730440220549e80b4496803cbc4a1d09d46df50109f546d43fbbf86cd90b174b1484acd5402205f12a4f995cb9bded597eabfee195a285986aa6d93ae5bb72507ebc6a4e2349e012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with seven outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 647\n# base commitment transaction fee = 1024\n# actual commitment transaction fee = 1024\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #0 received amount 1000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6986976 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3045022100a5c01383d3ec646d97e40f44318d49def817fcd61a0ef18008a665b3e151785502203e648efddd5838981ef55ec954be69c4a652d021e6081a100d034de366815e9b\n# local_signature = 304502210094bfd8f5572ac0157ec76a9551b6c5216a4538c07cd13a51af4a54cb26fa14320220768efce8ce6f4a5efac875142ff19237c011343670adf9c7ac69704a120d1163\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8007e80300000000000022002052bfef0479d7b293c27e0f1eb294bea154c63a3294ef092c19af51409bce0e2ad007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110e09c6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040048304502210094bfd8f5572ac0157ec76a9551b6c5216a4538c07cd13a51af4a54cb26fa14320220768efce8ce6f4a5efac875142ff19237c011343670adf9c7ac69704a120d116301483045022100a5c01383d3ec646d97e40f44318d49def817fcd61a0ef18008a665b3e151785502203e648efddd5838981ef55ec954be69c4a652d021e6081a100d034de366815e9b01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 5\n# signature for output #0 (htlc-success for htlc #0)\nremote_htlc_signature = 30440220385a5afe75632f50128cbb029ee95c80156b5b4744beddc729ad339c9ca432c802202ba5f48550cad3379ac75b9b4fedb86a35baa6947f16ba5037fb8b11ab343740\n# local_htlc_signature = 304402205999590b8a79fa346e003a68fd40366397119b2b0cdf37b149968d6bc6fbcc4702202b1e1fb5ab7864931caed4e732c359e0fe3d86a548b557be2246efb1708d579a\nhtlc_success_tx (htlc #0): 020000000001018323148ce2419f21ca3d6780053747715832e18ac780931a514b187768882bb60000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220385a5afe75632f50128cbb029ee95c80156b5b4744beddc729ad339c9ca432c802202ba5f48550cad3379ac75b9b4fedb86a35baa6947f16ba5037fb8b11ab3437400147304402205999590b8a79fa346e003a68fd40366397119b2b0cdf37b149968d6bc6fbcc4702202b1e1fb5ab7864931caed4e732c359e0fe3d86a548b557be2246efb1708d579a012000000000000000000000000000000000000000000000000000000000000000008a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac686800000000\n# signature for output #1 (htlc-timeout for htlc #2)\nremote_htlc_signature = 304402207ceb6678d4db33d2401fdc409959e57c16a6cb97a30261d9c61f29b8c58d34b90220084b4a17b4ca0e86f2d798b3698ca52de5621f2ce86f80bed79afa66874511b0\n# local_htlc_signature = 304402207ff03eb0127fc7c6cae49cc29e2a586b98d1e8969cf4a17dfa50b9c2647720b902205e2ecfda2252956c0ca32f175080e75e4e390e433feb1f8ce9f2ba55648a1dac\nhtlc_timeout_tx (htlc #2): 020000000001018323148ce2419f21ca3d6780053747715832e18ac780931a514b187768882bb60100000000000000000124060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207ceb6678d4db33d2401fdc409959e57c16a6cb97a30261d9c61f29b8c58d34b90220084b4a17b4ca0e86f2d798b3698ca52de5621f2ce86f80bed79afa66874511b00147304402207ff03eb0127fc7c6cae49cc29e2a586b98d1e8969cf4a17dfa50b9c2647720b902205e2ecfda2252956c0ca32f175080e75e4e390e433feb1f8ce9f2ba55648a1dac01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #2 (htlc-success for htlc #1)\nremote_htlc_signature = 304402206a401b29a0dff0d18ec903502c13d83e7ec019450113f4a7655a4ce40d1f65ba0220217723a084e727b6ca0cc8b6c69c014a7e4a01fcdcba3e3993f462a3c574d833\n# local_htlc_signature = 3045022100d50d067ca625d54e62df533a8f9291736678d0b86c28a61bb2a80cf42e702d6e02202373dde7e00218eacdafb9415fe0e1071beec1857d1af3c6a201a44cbc47c877\nhtlc_success_tx (htlc #1): 020000000001018323148ce2419f21ca3d6780053747715832e18ac780931a514b187768882bb6020000000000000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402206a401b29a0dff0d18ec903502c13d83e7ec019450113f4a7655a4ce40d1f65ba0220217723a084e727b6ca0cc8b6c69c014a7e4a01fcdcba3e3993f462a3c574d83301483045022100d50d067ca625d54e62df533a8f9291736678d0b86c28a61bb2a80cf42e702d6e02202373dde7e00218eacdafb9415fe0e1071beec1857d1af3c6a201a44cbc47c877012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #3 (htlc-timeout for htlc #3)\nremote_htlc_signature = 30450221009b1c987ba599ee3bde1dbca776b85481d70a78b681a8d84206723e2795c7cac002207aac84ad910f8598c4d1c0ea2e3399cf6627a4e3e90131315bc9f038451ce39d\n# local_htlc_signature = 3045022100db9dc65291077a52728c622987e9895b7241d4394d6dcb916d7600a3e8728c22022036ee3ee717ba0bb5c45ee84bc7bbf85c0f90f26ae4e4a25a6b4241afa8a3f1cb\nhtlc_timeout_tx (htlc #3): 020000000001018323148ce2419f21ca3d6780053747715832e18ac780931a514b187768882bb6030000000000000000010c0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221009b1c987ba599ee3bde1dbca776b85481d70a78b681a8d84206723e2795c7cac002207aac84ad910f8598c4d1c0ea2e3399cf6627a4e3e90131315bc9f038451ce39d01483045022100db9dc65291077a52728c622987e9895b7241d4394d6dcb916d7600a3e8728c22022036ee3ee717ba0bb5c45ee84bc7bbf85c0f90f26ae4e4a25a6b4241afa8a3f1cb01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #4 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100cc28030b59f0914f45b84caa983b6f8effa900c952310708c2b5b00781117022022027ba2ccdf94d03c6d48b327f183f6e28c8a214d089b9227f94ac4f85315274f0\n# local_htlc_signature = 304402202d1a3c0d31200265d2a2def2753ead4959ae20b4083e19553acfffa5dfab60bf022020ede134149504e15b88ab261a066de49848411e15e70f9e6a5462aec2949f8f\nhtlc_success_tx (htlc #4): 020000000001018323148ce2419f21ca3d6780053747715832e18ac780931a514b187768882bb604000000000000000001da0d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100cc28030b59f0914f45b84caa983b6f8effa900c952310708c2b5b00781117022022027ba2ccdf94d03c6d48b327f183f6e28c8a214d089b9227f94ac4f85315274f00147304402202d1a3c0d31200265d2a2def2753ead4959ae20b4083e19553acfffa5dfab60bf022020ede134149504e15b88ab261a066de49848411e15e70f9e6a5462aec2949f8f012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with six outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 648\n# base commitment transaction fee = 914\n# actual commitment transaction fee = 1914\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6987086 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3044022072714e2fbb93cdd1c42eb0828b4f2eff143f717d8f26e79d6ada4f0dcb681bbe02200911be4e5161dd6ebe59ff1c58e1997c4aea804f81db6b698821db6093d7b057\n# local_signature = 3045022100a2270d5950c89ae0841233f6efea9c951898b301b2e89e0adbd2c687b9f32efa02207943d90f95b9610458e7c65a576e149750ff3accaacad004cd85e70b235e27de\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8006d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de8431104e9d6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100a2270d5950c89ae0841233f6efea9c951898b301b2e89e0adbd2c687b9f32efa02207943d90f95b9610458e7c65a576e149750ff3accaacad004cd85e70b235e27de01473044022072714e2fbb93cdd1c42eb0828b4f2eff143f717d8f26e79d6ada4f0dcb681bbe02200911be4e5161dd6ebe59ff1c58e1997c4aea804f81db6b698821db6093d7b05701475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 4\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 3044022062ef2e77591409d60d7817d9bb1e71d3c4a2931d1a6c7c8307422c84f001a251022022dad9726b0ae3fe92bda745a06f2c00f92342a186d84518588cf65f4dfaada8\n# local_htlc_signature = 3045022100a4c574f00411dd2f978ca5cdc1b848c311cd7849c087ad2f21a5bce5e8cc5ae90220090ae39a9bce2fb8bc879d7e9f9022df249f41e25e51f1a9bf6447a9eeffc098\nhtlc_timeout_tx (htlc #2): 02000000000101579c183eca9e8236a5d7f5dcd79cfec32c497fdc0ec61533cde99ecd436cadd10000000000000000000123060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022062ef2e77591409d60d7817d9bb1e71d3c4a2931d1a6c7c8307422c84f001a251022022dad9726b0ae3fe92bda745a06f2c00f92342a186d84518588cf65f4dfaada801483045022100a4c574f00411dd2f978ca5cdc1b848c311cd7849c087ad2f21a5bce5e8cc5ae90220090ae39a9bce2fb8bc879d7e9f9022df249f41e25e51f1a9bf6447a9eeffc09801008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-success for htlc #1)\nremote_htlc_signature = 3045022100e968cbbb5f402ed389fdc7f6cd2a80ed650bb42c79aeb2a5678444af94f6c78502204b47a1cb24ab5b0b6fe69fe9cfc7dba07b9dd0d8b95f372c1d9435146a88f8d4\n# local_htlc_signature = 304402207679cf19790bea76a733d2fa0672bd43ab455687a068f815a3d237581f57139a0220683a1a799e102071c206b207735ca80f627ab83d6616b4bcd017c5d79ef3e7d0\nhtlc_success_tx (htlc #1): 02000000000101579c183eca9e8236a5d7f5dcd79cfec32c497fdc0ec61533cde99ecd436cadd10100000000000000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e968cbbb5f402ed389fdc7f6cd2a80ed650bb42c79aeb2a5678444af94f6c78502204b47a1cb24ab5b0b6fe69fe9cfc7dba07b9dd0d8b95f372c1d9435146a88f8d40147304402207679cf19790bea76a733d2fa0672bd43ab455687a068f815a3d237581f57139a0220683a1a799e102071c206b207735ca80f627ab83d6616b4bcd017c5d79ef3e7d0012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #2 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100aa91932e305292cf9969cc23502bbf6cef83a5df39c95ad04a707c4f4fed5c7702207099fc0f3a9bfe1e7683c0e9aa5e76c5432eb20693bf4cb182f04d383dc9c8c2\n# local_htlc_signature = 304402200df76fea718745f3c529bac7fd37923e7309ce38b25c0781e4cf514dd9ef8dc802204172295739dbae9fe0474dcee3608e3433b4b2af3a2e6787108b02f894dcdda3\nhtlc_timeout_tx (htlc #3): 02000000000101579c183eca9e8236a5d7f5dcd79cfec32c497fdc0ec61533cde99ecd436cadd1020000000000000000010b0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100aa91932e305292cf9969cc23502bbf6cef83a5df39c95ad04a707c4f4fed5c7702207099fc0f3a9bfe1e7683c0e9aa5e76c5432eb20693bf4cb182f04d383dc9c8c20147304402200df76fea718745f3c529bac7fd37923e7309ce38b25c0781e4cf514dd9ef8dc802204172295739dbae9fe0474dcee3608e3433b4b2af3a2e6787108b02f894dcdda301008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #3 (htlc-success for htlc #4)\nremote_htlc_signature = 3044022035cac88040a5bba420b1c4257235d5015309113460bc33f2853cd81ca36e632402202fc94fd3e81e9d34a9d01782a0284f3044370d03d60f3fc041e2da088d2de58f\n# local_htlc_signature = 304402200daf2eb7afd355b4caf6fb08387b5f031940ea29d1a9f35071288a839c9039e4022067201b562456e7948616c13acb876b386b511599b58ac1d94d127f91c50463a6\nhtlc_success_tx (htlc #4): 02000000000101579c183eca9e8236a5d7f5dcd79cfec32c497fdc0ec61533cde99ecd436cadd103000000000000000001d90d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022035cac88040a5bba420b1c4257235d5015309113460bc33f2853cd81ca36e632402202fc94fd3e81e9d34a9d01782a0284f3044370d03d60f3fc041e2da088d2de58f0147304402200daf2eb7afd355b4caf6fb08387b5f031940ea29d1a9f35071288a839c9039e4022067201b562456e7948616c13acb876b386b511599b58ac1d94d127f91c50463a6012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with six outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2069\n# base commitment transaction fee = 2921\n# actual commitment transaction fee = 3921\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985079 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3044022001d55e488b8b035b2dd29d50b65b530923a416d47f377284145bc8767b1b6a75022019bb53ddfe1cefaf156f924777eaaf8fdca1810695a7d0a247ad2afba8232eb4\n# local_signature = 304402203ca8f31c6a47519f83255dc69f1894d9a6d7476a19f498d31eaf0cd3a85eeb63022026fd92dc752b33905c4c838c528b692a8ad4ced959990b5d5ee2ff940fa90eea\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8006d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de84311077956a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402203ca8f31c6a47519f83255dc69f1894d9a6d7476a19f498d31eaf0cd3a85eeb63022026fd92dc752b33905c4c838c528b692a8ad4ced959990b5d5ee2ff940fa90eea01473044022001d55e488b8b035b2dd29d50b65b530923a416d47f377284145bc8767b1b6a75022019bb53ddfe1cefaf156f924777eaaf8fdca1810695a7d0a247ad2afba8232eb401475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 4\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 3045022100d1cf354de41c1369336cf85b225ed033f1f8982a01be503668df756a7e668b66022001254144fb4d0eecc61908fccc3388891ba17c5d7a1a8c62bdd307e5a513f992\n# local_htlc_signature = 3044022056eb1af429660e45a1b0b66568cb8c4a3aa7e4c9c292d5d6c47f86ebf2c8838f022065c3ac4ebe980ca7a41148569be4ad8751b0a724a41405697ec55035dae66402\nhtlc_timeout_tx (htlc #2): 02000000000101ca94a9ad516ebc0c4bdd7b6254871babfa978d5accafb554214137d398bfcf6a0000000000000000000175020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100d1cf354de41c1369336cf85b225ed033f1f8982a01be503668df756a7e668b66022001254144fb4d0eecc61908fccc3388891ba17c5d7a1a8c62bdd307e5a513f99201473044022056eb1af429660e45a1b0b66568cb8c4a3aa7e4c9c292d5d6c47f86ebf2c8838f022065c3ac4ebe980ca7a41148569be4ad8751b0a724a41405697ec55035dae6640201008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-success for htlc #1)\nremote_htlc_signature = 3045022100d065569dcb94f090345402736385efeb8ea265131804beac06dd84d15dd2d6880220664feb0b4b2eb985fadb6ec7dc58c9334ea88ce599a9be760554a2d4b3b5d9f4\n# local_htlc_signature = 3045022100914bb232cd4b2690ee3d6cb8c3713c4ac9c4fb925323068d8b07f67c8541f8d9022057152f5f1615b793d2d45aac7518989ae4fe970f28b9b5c77504799d25433f7f\nhtlc_success_tx (htlc #1): 02000000000101ca94a9ad516ebc0c4bdd7b6254871babfa978d5accafb554214137d398bfcf6a0100000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100d065569dcb94f090345402736385efeb8ea265131804beac06dd84d15dd2d6880220664feb0b4b2eb985fadb6ec7dc58c9334ea88ce599a9be760554a2d4b3b5d9f401483045022100914bb232cd4b2690ee3d6cb8c3713c4ac9c4fb925323068d8b07f67c8541f8d9022057152f5f1615b793d2d45aac7518989ae4fe970f28b9b5c77504799d25433f7f012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #2 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100d4e69d363de993684eae7b37853c40722a4c1b4a7b588ad7b5d8a9b5006137a102207a069c628170ee34be5612747051bdcc087466dbaa68d5756ea81c10155aef18\n# local_htlc_signature = 304402200e362443f7af830b419771e8e1614fc391db3a4eb799989abfc5ab26d6fcd032022039ab0cad1c14dfbe9446bf847965e56fe016e0cbcf719fd18c1bfbf53ecbd9f9\nhtlc_timeout_tx (htlc #3): 02000000000101ca94a9ad516ebc0c4bdd7b6254871babfa978d5accafb554214137d398bfcf6a020000000000000000015d060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100d4e69d363de993684eae7b37853c40722a4c1b4a7b588ad7b5d8a9b5006137a102207a069c628170ee34be5612747051bdcc087466dbaa68d5756ea81c10155aef180147304402200e362443f7af830b419771e8e1614fc391db3a4eb799989abfc5ab26d6fcd032022039ab0cad1c14dfbe9446bf847965e56fe016e0cbcf719fd18c1bfbf53ecbd9f901008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #3 (htlc-success for htlc #4)\nremote_htlc_signature = 30450221008ec888e36e4a4b3dc2ed6b823319855b2ae03006ca6ae0d9aa7e24bfc1d6f07102203b0f78885472a67ff4fe5916c0bb669487d659527509516fc3a08e87a2cc0a7c\n# local_htlc_signature = 304402202c3e14282b84b02705dfd00a6da396c9fe8a8bcb1d3fdb4b20a4feba09440e8b02202b058b39aa9b0c865b22095edcd9ff1f71bbfe20aa4993755e54d042755ed0d5\nhtlc_success_tx (htlc #4): 02000000000101ca94a9ad516ebc0c4bdd7b6254871babfa978d5accafb554214137d398bfcf6a03000000000000000001f2090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221008ec888e36e4a4b3dc2ed6b823319855b2ae03006ca6ae0d9aa7e24bfc1d6f07102203b0f78885472a67ff4fe5916c0bb669487d659527509516fc3a08e87a2cc0a7c0147304402202c3e14282b84b02705dfd00a6da396c9fe8a8bcb1d3fdb4b20a4feba09440e8b02202b058b39aa9b0c865b22095edcd9ff1f71bbfe20aa4993755e54d042755ed0d5012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with five outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2070\n# base commitment transaction fee = 2566\n# actual commitment transaction fee = 5566\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985434 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3045022100f2377f7a67b7fc7f4e2c0c9e3a7de935c32417f5668eda31ea1db401b7dc53030220415fdbc8e91d0f735e70c21952342742e25249b0d062d43efbfc564499f37526\n# local_signature = 30440220443cb07f650aebbba14b8bc8d81e096712590f524c5991ac0ed3bbc8fd3bd0c7022028a635f548e3ca64b19b69b1ea00f05b22752f91daf0b6dab78e62ba52eb7fd0\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110da966a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004730440220443cb07f650aebbba14b8bc8d81e096712590f524c5991ac0ed3bbc8fd3bd0c7022028a635f548e3ca64b19b69b1ea00f05b22752f91daf0b6dab78e62ba52eb7fd001483045022100f2377f7a67b7fc7f4e2c0c9e3a7de935c32417f5668eda31ea1db401b7dc53030220415fdbc8e91d0f735e70c21952342742e25249b0d062d43efbfc564499f3752601475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 3\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 3045022100eed143b1ee4bed5dc3cde40afa5db3e7354cbf9c44054b5f713f729356f08cf7022077161d171c2bbd9badf3c9934de65a4918de03bbac1450f715275f75b103f891\n# local_htlc_signature = 3045022100a0d043ed533e7fb1911e0553d31a8e2f3e6de19dbc035257f29d747c5e02f1f5022030cd38d8e84282175d49c1ebe0470db3ebd59768cf40780a784e248a43904fb8\nhtlc_timeout_tx (htlc #2): 0200000000010140a83ce364747ff277f4d7595d8d15f708418798922c40bc2b056aca5485a2180000000000000000000174020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100eed143b1ee4bed5dc3cde40afa5db3e7354cbf9c44054b5f713f729356f08cf7022077161d171c2bbd9badf3c9934de65a4918de03bbac1450f715275f75b103f89101483045022100a0d043ed533e7fb1911e0553d31a8e2f3e6de19dbc035257f29d747c5e02f1f5022030cd38d8e84282175d49c1ebe0470db3ebd59768cf40780a784e248a43904fb801008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3044022071e9357619fd8d29a411dc053b326a5224c5d11268070e88ecb981b174747c7a02202b763ae29a9d0732fa8836dd8597439460b50472183f420021b768981b4f7cf6\n# local_htlc_signature = 3045022100adb1d679f65f96178b59f23ed37d3b70443118f345224a07ecb043eee2acc157022034d24524fe857144a3bcfff3065a9994d0a6ec5f11c681e49431d573e242612d\nhtlc_timeout_tx (htlc #3): 0200000000010140a83ce364747ff277f4d7595d8d15f708418798922c40bc2b056aca5485a218010000000000000000015c060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022071e9357619fd8d29a411dc053b326a5224c5d11268070e88ecb981b174747c7a02202b763ae29a9d0732fa8836dd8597439460b50472183f420021b768981b4f7cf601483045022100adb1d679f65f96178b59f23ed37d3b70443118f345224a07ecb043eee2acc157022034d24524fe857144a3bcfff3065a9994d0a6ec5f11c681e49431d573e242612d01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #2 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100c9458a4d2cbb741705577deb0a890e5cb90ee141be0400d3162e533727c9cb2102206edcf765c5dc5e5f9b976ea8149bf8607b5a0efb30691138e1231302b640d2a4\n# local_htlc_signature = 304402200831422aa4e1ee6d55e0b894201770a8f8817a189356f2d70be76633ffa6a6f602200dd1b84a4855dc6727dd46c98daae43dfc70889d1ba7ef0087529a57c06e5e04\nhtlc_success_tx (htlc #4): 0200000000010140a83ce364747ff277f4d7595d8d15f708418798922c40bc2b056aca5485a21802000000000000000001f1090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100c9458a4d2cbb741705577deb0a890e5cb90ee141be0400d3162e533727c9cb2102206edcf765c5dc5e5f9b976ea8149bf8607b5a0efb30691138e1231302b640d2a40147304402200831422aa4e1ee6d55e0b894201770a8f8817a189356f2d70be76633ffa6a6f602200dd1b84a4855dc6727dd46c98daae43dfc70889d1ba7ef0087529a57c06e5e04012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with five outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2194\n# base commitment transaction fee = 2720\n# actual commitment transaction fee = 5720\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985280 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3045022100d33c4e541aa1d255d41ea9a3b443b3b822ad8f7f86862638aac1f69f8f760577022007e2a18e6931ce3d3a804b1c78eda1de17dbe1fb7a95488c9a4ec86203953348\n# local_signature = 304402203b1b010c109c2ecbe7feb2d259b9c4126bd5dc99ee693c422ec0a5781fe161ba0220571fe4e2c649dea9c7aaf7e49b382962f6a3494963c97d80fef9a430ca3f7061\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de84311040966a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402203b1b010c109c2ecbe7feb2d259b9c4126bd5dc99ee693c422ec0a5781fe161ba0220571fe4e2c649dea9c7aaf7e49b382962f6a3494963c97d80fef9a430ca3f706101483045022100d33c4e541aa1d255d41ea9a3b443b3b822ad8f7f86862638aac1f69f8f760577022007e2a18e6931ce3d3a804b1c78eda1de17dbe1fb7a95488c9a4ec8620395334801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 3\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 30450221009ed2f0a67f99e29c3c8cf45c08207b765980697781bb727fe0b1416de0e7622902206052684229bc171419ed290f4b615c943f819c0262414e43c5b91dcf72ddcf44\n# local_htlc_signature = 3044022004ad5f04ae69c71b3b141d4db9d0d4c38d84009fb3cfeeae6efdad414487a9a0022042d3fe1388c1ff517d1da7fb4025663d372c14728ed52dc88608363450ff6a2f\nhtlc_timeout_tx (htlc #2): 02000000000101fb824d4e4dafc0f567789dee3a6bce8d411fe80f5563d8cdfdcc7d7e4447d43a0000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221009ed2f0a67f99e29c3c8cf45c08207b765980697781bb727fe0b1416de0e7622902206052684229bc171419ed290f4b615c943f819c0262414e43c5b91dcf72ddcf4401473044022004ad5f04ae69c71b3b141d4db9d0d4c38d84009fb3cfeeae6efdad414487a9a0022042d3fe1388c1ff517d1da7fb4025663d372c14728ed52dc88608363450ff6a2f01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-timeout for htlc #3)\nremote_htlc_signature = 30440220155d3b90c67c33a8321996a9be5b82431b0c126613be751d400669da9d5c696702204318448bcd48824439d2c6a70be6e5747446be47ff45977cf41672bdc9b6b12d\n# local_htlc_signature = 304402201707050c870c1f77cc3ed58d6d71bf281de239e9eabd8ef0955bad0d7fe38dcc02204d36d80d0019b3a71e646a08fa4a5607761d341ae8be371946ebe437c289c915\nhtlc_timeout_tx (htlc #3): 02000000000101fb824d4e4dafc0f567789dee3a6bce8d411fe80f5563d8cdfdcc7d7e4447d43a010000000000000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220155d3b90c67c33a8321996a9be5b82431b0c126613be751d400669da9d5c696702204318448bcd48824439d2c6a70be6e5747446be47ff45977cf41672bdc9b6b12d0147304402201707050c870c1f77cc3ed58d6d71bf281de239e9eabd8ef0955bad0d7fe38dcc02204d36d80d0019b3a71e646a08fa4a5607761d341ae8be371946ebe437c289c91501008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #2 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100a12a9a473ece548584aabdd051779025a5ed4077c4b7aa376ec7a0b1645e5a48022039490b333f53b5b3e2ddde1d809e492cba2b3e5fc3a436cd3ffb4cd3d500fa5a\n# local_htlc_signature = 3045022100ff200bc934ab26ce9a559e998ceb0aee53bc40368e114ab9d3054d9960546e2802202496856ca163ac12c143110b6b3ac9d598df7254f2e17b3b94c3ab5301f4c3b0\nhtlc_success_tx (htlc #4): 02000000000101fb824d4e4dafc0f567789dee3a6bce8d411fe80f5563d8cdfdcc7d7e4447d43a020000000000000000019a090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100a12a9a473ece548584aabdd051779025a5ed4077c4b7aa376ec7a0b1645e5a48022039490b333f53b5b3e2ddde1d809e492cba2b3e5fc3a436cd3ffb4cd3d500fa5a01483045022100ff200bc934ab26ce9a559e998ceb0aee53bc40368e114ab9d3054d9960546e2802202496856ca163ac12c143110b6b3ac9d598df7254f2e17b3b94c3ab5301f4c3b0012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with four outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2195\n# base commitment transaction fee = 2344\n# actual commitment transaction fee = 7344\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985656 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 304402205e2f76d4657fb732c0dfc820a18a7301e368f5799e06b7828007633741bda6df0220458009ae59d0c6246065c419359e05eb2a4b4ef4a1b310cc912db44eb7924298\n# local_signature = 304402203b12d44254244b8ff3bb4129b0920fd45120ab42f553d9976394b099d500c99e02205e95bb7a3164852ef0c48f9e0eaf145218f8e2c41251b231f03cbdc4f29a5429\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8004b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110b8976a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402203b12d44254244b8ff3bb4129b0920fd45120ab42f553d9976394b099d500c99e02205e95bb7a3164852ef0c48f9e0eaf145218f8e2c41251b231f03cbdc4f29a54290147304402205e2f76d4657fb732c0dfc820a18a7301e368f5799e06b7828007633741bda6df0220458009ae59d0c6246065c419359e05eb2a4b4ef4a1b310cc912db44eb792429801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 2\n# signature for output #0 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100a8a78fa1016a5c5c3704f2e8908715a3cef66723fb95f3132ec4d2d05cd84fb4022025ac49287b0861ec21932405f5600cbce94313dbde0e6c5d5af1b3366d8afbfc\n# local_htlc_signature = 3045022100be6ae1977fd7b630a53623f3f25c542317ccfc2b971782802a4f1ef538eb22b402207edc4d0408f8f38fd3c7365d1cfc26511b7cd2d4fecd8b005fba3cd5bc704390\nhtlc_timeout_tx (htlc #3): 020000000001014e16c488fa158431c1a82e8f661240ec0a71ba0ce92f2721a6538c510226ad5c0000000000000000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100a8a78fa1016a5c5c3704f2e8908715a3cef66723fb95f3132ec4d2d05cd84fb4022025ac49287b0861ec21932405f5600cbce94313dbde0e6c5d5af1b3366d8afbfc01483045022100be6ae1977fd7b630a53623f3f25c542317ccfc2b971782802a4f1ef538eb22b402207edc4d0408f8f38fd3c7365d1cfc26511b7cd2d4fecd8b005fba3cd5bc70439001008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #1 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100e769cb156aa2f7515d126cef7a69968629620ce82afcaa9e210969de6850df4602200b16b3f3486a229a48aadde520dbee31ae340dbadaffae74fbb56681fef27b92\n# local_htlc_signature = 30440220665b9cb4a978c09d1ca8977a534999bc8a49da624d0c5439451dd69cde1a003d022070eae0620f01f3c1bd029cc1488da13fb40fdab76f396ccd335479a11c5276d8\nhtlc_success_tx (htlc #4): 020000000001014e16c488fa158431c1a82e8f661240ec0a71ba0ce92f2721a6538c510226ad5c0100000000000000000199090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e769cb156aa2f7515d126cef7a69968629620ce82afcaa9e210969de6850df4602200b16b3f3486a229a48aadde520dbee31ae340dbadaffae74fbb56681fef27b92014730440220665b9cb4a978c09d1ca8977a534999bc8a49da624d0c5439451dd69cde1a003d022070eae0620f01f3c1bd029cc1488da13fb40fdab76f396ccd335479a11c5276d8012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with four outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 3702\n# base commitment transaction fee = 3953\n# actual commitment transaction fee = 8953\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6984047 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3045022100c1a3b0b60ca092ed5080121f26a74a20cec6bdee3f8e47bae973fcdceb3eda5502207d467a9873c939bf3aa758014ae67295fedbca52412633f7e5b2670fc7c381c1\n# local_signature = 304402200e930a43c7951162dc15a2b7344f48091c74c70f7024e7116e900d8bcfba861c022066fa6cbda3929e21daa2e7e16a4b948db7e8919ef978402360d1095ffdaff7b0\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8004b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de8431106f916a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402200e930a43c7951162dc15a2b7344f48091c74c70f7024e7116e900d8bcfba861c022066fa6cbda3929e21daa2e7e16a4b948db7e8919ef978402360d1095ffdaff7b001483045022100c1a3b0b60ca092ed5080121f26a74a20cec6bdee3f8e47bae973fcdceb3eda5502207d467a9873c939bf3aa758014ae67295fedbca52412633f7e5b2670fc7c381c101475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 2\n# signature for output #0 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100dfb73b4fe961b31a859b2bb1f4f15cabab9265016dd0272323dc6a9e85885c54022059a7b87c02861ee70662907f25ce11597d7b68d3399443a831ae40e777b76bdb\n# local_htlc_signature = 304402202765b9c9ece4f127fa5407faf66da4c5ce2719cdbe47cd3175fc7d48b482e43d02205605125925e07bad1e41c618a4b434d72c88a164981c4b8af5eaf4ee9142ec3a\nhtlc_timeout_tx (htlc #3): 02000000000101b8de11eb51c22498fe39722c7227b6e55ff1a94146cf638458cb9bc6a060d3a30000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100dfb73b4fe961b31a859b2bb1f4f15cabab9265016dd0272323dc6a9e85885c54022059a7b87c02861ee70662907f25ce11597d7b68d3399443a831ae40e777b76bdb0147304402202765b9c9ece4f127fa5407faf66da4c5ce2719cdbe47cd3175fc7d48b482e43d02205605125925e07bad1e41c618a4b434d72c88a164981c4b8af5eaf4ee9142ec3a01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #1 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100ea9dc2a7c3c3640334dab733bb4e036e32a3106dc707b24227874fa4f7da746802204d672f7ac0fe765931a8df10b81e53a3242dd32bd9dc9331eb4a596da87954e9\n# local_htlc_signature = 30440220048a41c660c4841693de037d00a407810389f4574b3286afb7bc392a438fa3f802200401d71fa87c64fe621b49ac07e3bf85157ac680acb977124da28652cc7f1a5c\nhtlc_success_tx (htlc #4): 02000000000101b8de11eb51c22498fe39722c7227b6e55ff1a94146cf638458cb9bc6a060d3a30100000000000000000176050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100ea9dc2a7c3c3640334dab733bb4e036e32a3106dc707b24227874fa4f7da746802204d672f7ac0fe765931a8df10b81e53a3242dd32bd9dc9331eb4a596da87954e9014730440220048a41c660c4841693de037d00a407810389f4574b3286afb7bc392a438fa3f802200401d71fa87c64fe621b49ac07e3bf85157ac680acb977124da28652cc7f1a5c012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with three outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 3703\n# base commitment transaction fee = 3317\n# actual commitment transaction fee = 11317\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6984683 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 30450221008b7c191dd46893b67b628e618d2dc8e81169d38bade310181ab77d7c94c6675e02203b4dd131fd7c9deb299560983dcdc485545c98f989f7ae8180c28289f9e6bdb0\n# local_signature = 3044022047305531dd44391dce03ae20f8735005c615eb077a974edb0059ea1a311857d602202e0ed6972fbdd1e8cb542b06e0929bc41b2ddf236e04cb75edd56151f4197506\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8003a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110eb936a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022047305531dd44391dce03ae20f8735005c615eb077a974edb0059ea1a311857d602202e0ed6972fbdd1e8cb542b06e0929bc41b2ddf236e04cb75edd56151f4197506014830450221008b7c191dd46893b67b628e618d2dc8e81169d38bade310181ab77d7c94c6675e02203b4dd131fd7c9deb299560983dcdc485545c98f989f7ae8180c28289f9e6bdb001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 1\n# signature for output #0 (htlc-success for htlc #4)\nremote_htlc_signature = 3044022044f65cf833afdcb9d18795ca93f7230005777662539815b8a601eeb3e57129a902206a4bf3e53392affbba52640627defa8dc8af61c958c9e827b2798ab45828abdd\n# local_htlc_signature = 3045022100b94d931a811b32eeb885c28ddcf999ae1981893b21dd1329929543fe87ce793002206370107fdd151c5f2384f9ceb71b3107c69c74c8ed5a28a94a4ab2d27d3b0724\nhtlc_success_tx (htlc #4): 020000000001011c076aa7fb3d7460d10df69432c904227ea84bbf3134d4ceee5fb0f135ef206d0000000000000000000175050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022044f65cf833afdcb9d18795ca93f7230005777662539815b8a601eeb3e57129a902206a4bf3e53392affbba52640627defa8dc8af61c958c9e827b2798ab45828abdd01483045022100b94d931a811b32eeb885c28ddcf999ae1981893b21dd1329929543fe87ce793002206370107fdd151c5f2384f9ceb71b3107c69c74c8ed5a28a94a4ab2d27d3b0724012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with three outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 4914\n# base commitment transaction fee = 4402\n# actual commitment transaction fee = 12402\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6983598 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 304402206d6cb93969d39177a09d5d45b583f34966195b77c7e585cf47ac5cce0c90cefb022031d71ae4e33a4e80df7f981d696fbdee517337806a3c7138b7491e2cbb077a0e\n# local_signature = 304402206a2679efa3c7aaffd2a447fd0df7aba8792858b589750f6a1203f9259173198a022008d52a0e77a99ab533c36206cb15ad7aeb2aa72b93d4b571e728cb5ec2f6fe26\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8003a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110ae8f6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402206a2679efa3c7aaffd2a447fd0df7aba8792858b589750f6a1203f9259173198a022008d52a0e77a99ab533c36206cb15ad7aeb2aa72b93d4b571e728cb5ec2f6fe260147304402206d6cb93969d39177a09d5d45b583f34966195b77c7e585cf47ac5cce0c90cefb022031d71ae4e33a4e80df7f981d696fbdee517337806a3c7138b7491e2cbb077a0e01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 1\n# signature for output #0 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100fcb38506bfa11c02874092a843d0cc0a8613c23b639832564a5f69020cb0f6ba02206508b9e91eaa001425c190c68ee5f887e1ad5b1b314002e74db9dbd9e42dbecf\n# local_htlc_signature = 304502210086e76b460ddd3cea10525fba298405d3fe11383e56966a5091811368362f689a02200f72ee75657915e0ede89c28709acd113ede9e1b7be520e3bc5cda425ecd6e68\nhtlc_success_tx (htlc #4): 0200000000010110a3fdcbcd5db477cd3ad465e7f501ffa8c437e8301f00a6061138590add757f0000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100fcb38506bfa11c02874092a843d0cc0a8613c23b639832564a5f69020cb0f6ba02206508b9e91eaa001425c190c68ee5f887e1ad5b1b314002e74db9dbd9e42dbecf0148304502210086e76b460ddd3cea10525fba298405d3fe11383e56966a5091811368362f689a02200f72ee75657915e0ede89c28709acd113ede9e1b7be520e3bc5cda425ecd6e68012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with two outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 4915\n# base commitment transaction fee = 3558\n# actual commitment transaction fee = 15558\n# to_local amount 6984442 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 304402200769ba89c7330dfa4feba447b6e322305f12ac7dac70ec6ba997ed7c1b598d0802204fe8d337e7fee781f9b7b1a06e580b22f4f79d740059560191d7db53f8765552\n# local_signature = 3045022100a012691ba6cea2f73fa8bac37750477e66363c6d28813b0bb6da77c8eb3fb0270220365e99c51304b0b1a6ab9ea1c8500db186693e39ec1ad5743ee231b0138384b9\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8002c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110fa926a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100a012691ba6cea2f73fa8bac37750477e66363c6d28813b0bb6da77c8eb3fb0270220365e99c51304b0b1a6ab9ea1c8500db186693e39ec1ad5743ee231b0138384b90147304402200769ba89c7330dfa4feba447b6e322305f12ac7dac70ec6ba997ed7c1b598d0802204fe8d337e7fee781f9b7b1a06e580b22f4f79d740059560191d7db53f876555201475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with two outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 9651180\n# base commitment transaction fee = 6987454\n# actual commitment transaction fee = 6999454\n# to_local amount 546 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3044022037f83ff00c8e5fb18ae1f918ffc24e54581775a20ff1ae719297ef066c71caa9022039c529cccd89ff6c5ed1db799614533844bd6d101da503761c45c713996e3bbd\n# local_signature = 30440220514f977bf7edc442de8ce43ace9686e5ebdc0f893033f13e40fb46c8b8c6e1f90220188006227d175f5c35da0b092c57bea82537aed89f7778204dc5bacf4f29f2b9\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b800222020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80ec0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de84311004004730440220514f977bf7edc442de8ce43ace9686e5ebdc0f893033f13e40fb46c8b8c6e1f90220188006227d175f5c35da0b092c57bea82537aed89f7778204dc5bacf4f29f2b901473044022037f83ff00c8e5fb18ae1f918ffc24e54581775a20ff1ae719297ef066c71caa9022039c529cccd89ff6c5ed1db799614533844bd6d101da503761c45c713996e3bbd01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with one output untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 9651181\n# base commitment transaction fee = 6987455\n# actual commitment transaction fee = 7000000\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3044022064901950be922e62cbe3f2ab93de2b99f37cff9fc473e73e394b27f88ef0731d02206d1dfa227527b4df44a07599289e207d6fd9cca60c0365682dcd3deaf739567e\n# local_signature = 3044022031a82b51bd014915fe68928d1abf4b9885353fb896cac10c3fdd88d7f9c7f2e00220716bda819641d2c63e65d3549b6120112e1aeaf1742eed94a471488e79e206b1\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8001c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de8431100400473044022031a82b51bd014915fe68928d1abf4b9885353fb896cac10c3fdd88d7f9c7f2e00220716bda819641d2c63e65d3549b6120112e1aeaf1742eed94a471488e79e206b101473044022064901950be922e62cbe3f2ab93de2b99f37cff9fc473e73e394b27f88ef0731d02206d1dfa227527b4df44a07599289e207d6fd9cca60c0365682dcd3deaf739567e01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with fee greater than funder amount\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 9651936\n# base commitment transaction fee = 6988001\n# actual commitment transaction fee = 7000000\n# to_remote amount 3000000 P2WPKH(0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b)\nremote_signature = 3044022064901950be922e62cbe3f2ab93de2b99f37cff9fc473e73e394b27f88ef0731d02206d1dfa227527b4df44a07599289e207d6fd9cca60c0365682dcd3deaf739567e\n# local_signature = 3044022031a82b51bd014915fe68928d1abf4b9885353fb896cac10c3fdd88d7f9c7f2e00220716bda819641d2c63e65d3549b6120112e1aeaf1742eed94a471488e79e206b1\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8001c0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de8431100400473044022031a82b51bd014915fe68928d1abf4b9885353fb896cac10c3fdd88d7f9c7f2e00220716bda819641d2c63e65d3549b6120112e1aeaf1742eed94a471488e79e206b101473044022064901950be922e62cbe3f2ab93de2b99f37cff9fc473e73e394b27f88ef0731d02206d1dfa227527b4df44a07599289e207d6fd9cca60c0365682dcd3deaf739567e01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with 3 htlc outputs, 2 offered having the same amount and preimage\nto_local_msat: 6987999999\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 253\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #5 offered amount 5000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868\n# HTLC #6 offered amount 5000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868\n# HTLC #5 and 6 have CLTV 506 and 505, respectively, and preimage 0505050505050505050505050505050505050505050505050505050505050505\nremote_signature = 304402206cda85b2811a211aa70fb74abf23303d87c4355ccf2c2c7954d4137c4fb26a830220719402ab3fef1cbaf42ba42fe437e9bed1e45f84547d603bf7af3fb88f501933\n# local_signature = 3045022100d25455151be075bae8b3400d0825341a3c25a1a5258b84ad2546c09539a83bc602203c1a4ac19c3ac415af7f6a98348f8d7e94fc0ab82dbed54c3c40134f465d027f\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2d8813000000000000220020305c12e1a0bc21e283c131cea1c66d68857d28b7b2fce0a6fbc40c164852121b8813000000000000220020305c12e1a0bc21e283c131cea1c66d68857d28b7b2fce0a6fbc40c164852121bc0c62d0000000000160014ccf1af2f2aabee14bb40fa3851ab2301de843110a69f6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100d25455151be075bae8b3400d0825341a3c25a1a5258b84ad2546c09539a83bc602203c1a4ac19c3ac415af7f6a98348f8d7e94fc0ab82dbed54c3c40134f465d027f0147304402206cda85b2811a211aa70fb74abf23303d87c4355ccf2c2c7954d4137c4fb26a830220719402ab3fef1cbaf42ba42fe437e9bed1e45f84547d603bf7af3fb88f50193301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 3\n# signature for output #0 (htlc-success for htlc #1)\nremote_htlc_signature = 30450221008117770f1d750a8af7a23f27c51a22f66386ea8f074115d0feeac7fe0f077f6102203d4d8dab53ef695b634786224ae5138c81d223b0493fd4637a448e31f734bb30\n# local_htlc_signature = 3045022100f2868e4380ac389960b96a8d01bd0d7ae845d24ad67993f1680e207864d5d3ae0220779ad0a943f73951d628a4f931c3044c51d393de1ab6f8283df41b68485f2b1b\nhtlc_success_tx (htlc #1): 0200000000010129253160416b9b2a2ecc303421b7fd1dee52d2e0b08d1a697f3979608334dbb9000000000000000000011f070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221008117770f1d750a8af7a23f27c51a22f66386ea8f074115d0feeac7fe0f077f6102203d4d8dab53ef695b634786224ae5138c81d223b0493fd4637a448e31f734bb3001483045022100f2868e4380ac389960b96a8d01bd0d7ae845d24ad67993f1680e207864d5d3ae0220779ad0a943f73951d628a4f931c3044c51d393de1ab6f8283df41b68485f2b1b012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #1 (htlc-timeout for htlc #6)\nremote_htlc_signature = 30440220620b37379e587447e7ee9c8eed9e71b2d2ec29cadc89a4b5411ee6f9b013ca1b02201aaf26d1a03d901425fc44562bff77d5645cb54498e4d9a56c39456825974a3d\n# local_htlc_signature = 304402204db4a1266aa8f0df66d35cd8b4269feef47f1cccebf7fdbb2b64cef35d72d79f022021b6d270a6d623cfec4cd0186096596d8deb17505d8c1c9785c719e0dbfa7e84\nhtlc_timeout_tx (htlc #6): 0200000000010129253160416b9b2a2ecc303421b7fd1dee52d2e0b08d1a697f3979608334dbb901000000000000000001e1120000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220620b37379e587447e7ee9c8eed9e71b2d2ec29cadc89a4b5411ee6f9b013ca1b02201aaf26d1a03d901425fc44562bff77d5645cb54498e4d9a56c39456825974a3d0147304402204db4a1266aa8f0df66d35cd8b4269feef47f1cccebf7fdbb2b64cef35d72d79f022021b6d270a6d623cfec4cd0186096596d8deb17505d8c1c9785c719e0dbfa7e8401008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868f9010000\n# signature for output #2 (htlc-timeout for htlc #5)\nremote_htlc_signature = 30450221009353b1d7e6313dc57a3781671b7ed9dde668b30e6f438ff08b13580937264de202200654599d2b9839fe9c88553f7c164a517fc8f0892e942b615460325fee7e0747\n# local_htlc_signature = 3045022100c11a3f26356524b556bdfaeeae80f3cdef2cdb1c42c49047014a56af6916e2cb0220230d0667dc5b86015056a2ae5158ff29cbaf9cde419677e058d23c59a0a07d31\nhtlc_timeout_tx (htlc #5): 0200000000010129253160416b9b2a2ecc303421b7fd1dee52d2e0b08d1a697f3979608334dbb902000000000000000001e1120000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221009353b1d7e6313dc57a3781671b7ed9dde668b30e6f438ff08b13580937264de202200654599d2b9839fe9c88553f7c164a517fc8f0892e942b615460325fee7e074701483045022100c11a3f26356524b556bdfaeeae80f3cdef2cdb1c42c49047014a56af6916e2cb0220230d0667dc5b86015056a2ae5158ff29cbaf9cde419677e058d23c59a0a07d3101008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868fa010000\n\nHere are the same test vectors, but when option_static_remotekey is used:\nname: simple commitment tx with no HTLCs\nto_local_msat: 7000000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 15000\n# base commitment transaction fee = 10860\n# actual commitment transaction fee = 10860\n# to_local amount 6989140 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 3045022100c3127b33dcc741dd6b05b1e63cbd1a9a7d816f37af9b6756fa2376b056f032370220408b96279808fe57eb7e463710804cdf4f108388bc5cf722d8c848d2c7f9f3b0\n# local_signature = 30440220616210b2cc4d3afb601013c373bbd8aac54febd9f15400379a8cb65ce7deca60022034236c010991beb7ff770510561ae8dc885b8d38d1947248c38f2ae055647142\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8002c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e48454a56a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004730440220616210b2cc4d3afb601013c373bbd8aac54febd9f15400379a8cb65ce7deca60022034236c010991beb7ff770510561ae8dc885b8d38d1947248c38f2ae05564714201483045022100c3127b33dcc741dd6b05b1e63cbd1a9a7d816f37af9b6756fa2376b056f032370220408b96279808fe57eb7e463710804cdf4f108388bc5cf722d8c848d2c7f9f3b001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with all five HTLCs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 0\n# base commitment transaction fee = 0\n# actual commitment transaction fee = 0\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #0 received amount 1000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6988000 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 3044022009b048187705a8cbc9ad73adbe5af148c3d012e1f067961486c822c7af08158c022006d66f3704cfab3eb2dc49dae24e4aa22a6910fc9b424007583204e3621af2e5\n# local_signature = 304402206fc2d1f10ea59951eefac0b4b7c396a3c3d87b71ff0b019796ef4535beaf36f902201765b0181e514d04f4c8ad75659d7037be26cdb3f8bb6f78fe61decef484c3ea\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8007e80300000000000022002052bfef0479d7b293c27e0f1eb294bea154c63a3294ef092c19af51409bce0e2ad007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484e0a06a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402206fc2d1f10ea59951eefac0b4b7c396a3c3d87b71ff0b019796ef4535beaf36f902201765b0181e514d04f4c8ad75659d7037be26cdb3f8bb6f78fe61decef484c3ea01473044022009b048187705a8cbc9ad73adbe5af148c3d012e1f067961486c822c7af08158c022006d66f3704cfab3eb2dc49dae24e4aa22a6910fc9b424007583204e3621af2e501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 5\n# signature for output #0 (htlc-success for htlc #0)\nremote_htlc_signature = 3045022100d9e29616b8f3959f1d3d7f7ce893ffedcdc407717d0de8e37d808c91d3a7c50d022078c3033f6d00095c8720a4bc943c1b45727818c082e4e3ddbc6d3116435b624b\n# local_htlc_signature = 30440220636de5682ef0c5b61f124ec74e8aa2461a69777521d6998295dcea36bc3338110220165285594b23c50b28b82df200234566628a27bcd17f7f14404bd865354eb3ce\nhtlc_success_tx (htlc #0): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b00000000000000000001e8030000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100d9e29616b8f3959f1d3d7f7ce893ffedcdc407717d0de8e37d808c91d3a7c50d022078c3033f6d00095c8720a4bc943c1b45727818c082e4e3ddbc6d3116435b624b014730440220636de5682ef0c5b61f124ec74e8aa2461a69777521d6998295dcea36bc3338110220165285594b23c50b28b82df200234566628a27bcd17f7f14404bd865354eb3ce012000000000000000000000000000000000000000000000000000000000000000008a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac686800000000\n# signature for output #1 (htlc-timeout for htlc #2)\nremote_htlc_signature = 30440220649fe8b20e67e46cbb0d09b4acea87dbec001b39b08dee7bdd0b1f03922a8640022037c462dff79df501cecfdb12ea7f4de91f99230bb544726f6e04527b1f896004\n# local_htlc_signature = 3045022100803159dee7935dba4a1d36a61055ce8fd62caa528573cc221ae288515405a252022029c59e7cffce374fe860100a4a63787e105c3cf5156d40b12dd53ff55ac8cf3f\nhtlc_timeout_tx (htlc #2): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b01000000000000000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220649fe8b20e67e46cbb0d09b4acea87dbec001b39b08dee7bdd0b1f03922a8640022037c462dff79df501cecfdb12ea7f4de91f99230bb544726f6e04527b1f89600401483045022100803159dee7935dba4a1d36a61055ce8fd62caa528573cc221ae288515405a252022029c59e7cffce374fe860100a4a63787e105c3cf5156d40b12dd53ff55ac8cf3f01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #2 (htlc-success for htlc #1)\nremote_htlc_signature = 30440220770fc321e97a19f38985f2e7732dd9fe08d16a2efa4bcbc0429400a447faf49102204d40b417f3113e1b0944ae0986f517564ab4acd3d190503faf97a6e420d43352\n# local_htlc_signature = 3045022100a437cc2ce77400ecde441b3398fea3c3ad8bdad8132be818227fe3c5b8345989022069d45e7fa0ae551ec37240845e2c561ceb2567eacf3076a6a43a502d05865faa\nhtlc_success_tx (htlc #1): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b02000000000000000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220770fc321e97a19f38985f2e7732dd9fe08d16a2efa4bcbc0429400a447faf49102204d40b417f3113e1b0944ae0986f517564ab4acd3d190503faf97a6e420d4335201483045022100a437cc2ce77400ecde441b3398fea3c3ad8bdad8132be818227fe3c5b8345989022069d45e7fa0ae551ec37240845e2c561ceb2567eacf3076a6a43a502d05865faa012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #3 (htlc-timeout for htlc #3)\nremote_htlc_signature = 304402207bcbf4f60a9829b05d2dbab84ed593e0291836be715dc7db6b72a64caf646af802201e489a5a84f7c5cc130398b841d138d031a5137ac8f4c49c770a4959dc3c1363\n# local_htlc_signature = 304402203121d9b9c055f354304b016a36662ee99e1110d9501cb271b087ddb6f382c2c80220549882f3f3b78d9c492de47543cb9a697cecc493174726146536c5954dac7487\nhtlc_timeout_tx (htlc #3): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b03000000000000000001b80b0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207bcbf4f60a9829b05d2dbab84ed593e0291836be715dc7db6b72a64caf646af802201e489a5a84f7c5cc130398b841d138d031a5137ac8f4c49c770a4959dc3c13630147304402203121d9b9c055f354304b016a36662ee99e1110d9501cb271b087ddb6f382c2c80220549882f3f3b78d9c492de47543cb9a697cecc493174726146536c5954dac748701008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #4 (htlc-success for htlc #4)\nremote_htlc_signature = 3044022076dca5cb81ba7e466e349b7128cdba216d4d01659e29b96025b9524aaf0d1899022060de85697b88b21c749702b7d2cfa7dfeaa1f472c8f1d7d9c23f2bf968464b87\n# local_htlc_signature = 3045022100d9080f103cc92bac15ec42464a95f070c7fb6925014e673ee2ea1374d36a7f7502200c65294d22eb20d48564954d5afe04a385551919d8b2ddb4ae2459daaeee1d95\nhtlc_success_tx (htlc #4): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b04000000000000000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022076dca5cb81ba7e466e349b7128cdba216d4d01659e29b96025b9524aaf0d1899022060de85697b88b21c749702b7d2cfa7dfeaa1f472c8f1d7d9c23f2bf968464b8701483045022100d9080f103cc92bac15ec42464a95f070c7fb6925014e673ee2ea1374d36a7f7502200c65294d22eb20d48564954d5afe04a385551919d8b2ddb4ae2459daaeee1d95012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with seven outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 647\n# base commitment transaction fee = 1024\n# actual commitment transaction fee = 1024\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #0 received amount 1000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6986976 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 3045022100a135f9e8a5ed25f7277446c67956b00ce6f610ead2bdec2c2f686155b7814772022059f1f6e1a8b336a68efcc1af3fe4d422d4827332b5b067501b099c47b7b5b5ee\n# local_signature = 30450221009ec15c687898bb4da8b3a833e5ab8bfc51ec6e9202aaa8e66611edfd4a85ed1102203d7183e45078b9735c93450bc3415d3e5a8c576141a711ec6ddcb4a893926bb7\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8007e80300000000000022002052bfef0479d7b293c27e0f1eb294bea154c63a3294ef092c19af51409bce0e2ad007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484e09c6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221009ec15c687898bb4da8b3a833e5ab8bfc51ec6e9202aaa8e66611edfd4a85ed1102203d7183e45078b9735c93450bc3415d3e5a8c576141a711ec6ddcb4a893926bb701483045022100a135f9e8a5ed25f7277446c67956b00ce6f610ead2bdec2c2f686155b7814772022059f1f6e1a8b336a68efcc1af3fe4d422d4827332b5b067501b099c47b7b5b5ee01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 5\n# signature for output #0 (htlc-success for htlc #0)\nremote_htlc_signature = 30450221008437627f9ad84ac67052e2a414a4367b8556fd1f94d8b02590f89f50525cd33502205b9c21ff6e7fc864f2352746ad8ba59182510819acb644e25b8a12fc37bbf24f\n# local_htlc_signature = 30440220344b0deb055230d01703e6c7acd45853c4af2328b49b5d8af4f88a060733406602202ea64f2a43d5751edfe75503cbc35a62e3141b5ed032fa03360faf4ca66f670b\nhtlc_success_tx (htlc #0): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe0000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221008437627f9ad84ac67052e2a414a4367b8556fd1f94d8b02590f89f50525cd33502205b9c21ff6e7fc864f2352746ad8ba59182510819acb644e25b8a12fc37bbf24f014730440220344b0deb055230d01703e6c7acd45853c4af2328b49b5d8af4f88a060733406602202ea64f2a43d5751edfe75503cbc35a62e3141b5ed032fa03360faf4ca66f670b012000000000000000000000000000000000000000000000000000000000000000008a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac686800000000\n# signature for output #1 (htlc-timeout for htlc #2)\nremote_htlc_signature = 304402205a67f92bf6845cf2892b48d874ac1daf88a36495cf8a06f93d83180d930a6f75022031da1621d95c3f335cc06a3056cf960199dae600b7cf89088f65fc53cdbef28c\n# local_htlc_signature = 30450221009e5e3822b0185c6799a95288c597b671d6cc69ab80f43740f00c6c3d0752bdda02206da947a74bd98f3175324dc56fdba86cc783703a120a6f0297537e60632f4c7f\nhtlc_timeout_tx (htlc #2): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe0100000000000000000124060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402205a67f92bf6845cf2892b48d874ac1daf88a36495cf8a06f93d83180d930a6f75022031da1621d95c3f335cc06a3056cf960199dae600b7cf89088f65fc53cdbef28c014830450221009e5e3822b0185c6799a95288c597b671d6cc69ab80f43740f00c6c3d0752bdda02206da947a74bd98f3175324dc56fdba86cc783703a120a6f0297537e60632f4c7f01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #2 (htlc-success for htlc #1)\nremote_htlc_signature = 30440220437e21766054a3eef7f65690c5bcfa9920babbc5af92b819f772f6ea96df6c7402207173622024bd97328cfb26c6665e25c2f5d67c319443ccdc60c903217005d8c8\n# local_htlc_signature = 3045022100fcfc47e36b712624677626cef3dc1d67f6583bd46926a6398fe6b00b0c9a37760220525788257b187fc775c6370d04eadf34d06f3650a63f8df851cee0ecb47a1673\nhtlc_success_tx (htlc #1): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe020000000000000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220437e21766054a3eef7f65690c5bcfa9920babbc5af92b819f772f6ea96df6c7402207173622024bd97328cfb26c6665e25c2f5d67c319443ccdc60c903217005d8c801483045022100fcfc47e36b712624677626cef3dc1d67f6583bd46926a6398fe6b00b0c9a37760220525788257b187fc775c6370d04eadf34d06f3650a63f8df851cee0ecb47a1673012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #3 (htlc-timeout for htlc #3)\nremote_htlc_signature = 304402207436e10737e4df499fc051686d3e11a5bb2310e4d1f1e691d287cef66514791202207cb58e71a6b7a42dd001b7e3ae672ea4f71ea3e1cd412b742e9124abb0739c64\n# local_htlc_signature = 3045022100e78211b8409afb7255ffe37337da87f38646f1faebbdd61bc1920d69e3ead67a02201a626305adfcd16bfb7e9340928d9b6305464eab4aa4c4a3af6646e9b9f69dee\nhtlc_timeout_tx (htlc #3): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe030000000000000000010c0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207436e10737e4df499fc051686d3e11a5bb2310e4d1f1e691d287cef66514791202207cb58e71a6b7a42dd001b7e3ae672ea4f71ea3e1cd412b742e9124abb0739c6401483045022100e78211b8409afb7255ffe37337da87f38646f1faebbdd61bc1920d69e3ead67a02201a626305adfcd16bfb7e9340928d9b6305464eab4aa4c4a3af6646e9b9f69dee01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #4 (htlc-success for htlc #4)\nremote_htlc_signature = 30450221009acd6a827a76bfee50806178dfe0495cd4e1d9c58279c194c7b01520fe68cb8d022024d439047c368883e570997a7d40f0b430cb5a742f507965e7d3063ae3feccca\n# local_htlc_signature = 3044022048762cf546bbfe474f1536365ea7c416e3c0389d60558bc9412cb148fb6ab68202207215d7083b75c96ff9d2b08c59c34e287b66820f530b486a9aa4cdd9c347d5b9\nhtlc_success_tx (htlc #4): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe04000000000000000001da0d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221009acd6a827a76bfee50806178dfe0495cd4e1d9c58279c194c7b01520fe68cb8d022024d439047c368883e570997a7d40f0b430cb5a742f507965e7d3063ae3feccca01473044022048762cf546bbfe474f1536365ea7c416e3c0389d60558bc9412cb148fb6ab68202207215d7083b75c96ff9d2b08c59c34e287b66820f530b486a9aa4cdd9c347d5b9012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with six outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 648\n# base commitment transaction fee = 914\n# actual commitment transaction fee = 1914\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6987086 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402203948f900a5506b8de36a4d8502f94f21dd84fd9c2314ab427d52feaa7a0a19f2022059b6a37a4adaa2c5419dc8aea63c6e2a2ec4c4bde46207f6dc1fcd22152fc6e5\n# local_signature = 3045022100b15f72908ba3382a34ca5b32519240a22300cc6015b6f9418635fb41f3d01d8802207adb331b9ed1575383dca0f2355e86c173802feecf8298fbea53b9d4610583e9\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8006d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e4844e9d6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100b15f72908ba3382a34ca5b32519240a22300cc6015b6f9418635fb41f3d01d8802207adb331b9ed1575383dca0f2355e86c173802feecf8298fbea53b9d4610583e90147304402203948f900a5506b8de36a4d8502f94f21dd84fd9c2314ab427d52feaa7a0a19f2022059b6a37a4adaa2c5419dc8aea63c6e2a2ec4c4bde46207f6dc1fcd22152fc6e501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 4\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 3045022100a031202f3be94678f0e998622ee95ebb6ada8da1e9a5110228b5e04a747351e4022010ca6a21e18314ed53cfaae3b1f51998552a61a468e596368829a50ce40110e0\n# local_htlc_signature = 304502210097e1873b57267730154595187a34949d3744f52933070c74757005e61ce2112e02204ecfba2aa42d4f14bdf8bad4206bb97217b702e6c433e0e1b0ce6587e6d46ec6\nhtlc_timeout_tx (htlc #2): 020000000001010f44041fdfba175987cf4e6135ba2a154e3b7fb96483dc0ed5efc0678e5b6bf10000000000000000000123060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100a031202f3be94678f0e998622ee95ebb6ada8da1e9a5110228b5e04a747351e4022010ca6a21e18314ed53cfaae3b1f51998552a61a468e596368829a50ce40110e00148304502210097e1873b57267730154595187a34949d3744f52933070c74757005e61ce2112e02204ecfba2aa42d4f14bdf8bad4206bb97217b702e6c433e0e1b0ce6587e6d46ec601008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-success for htlc #1)\nremote_htlc_signature = 304402202361012a634aee7835c5ecdd6413dcffa8f404b7e77364c792cff984e4ee71e90220715c5e90baa08daa45a7439b1ee4fa4843ed77b19c058240b69406606d384124\n# local_htlc_signature = 3044022019de73b00f1d818fb388e83b2c8c31f6bce35ac624e215bc12f88f9dc33edf48022006ff814bb9f700ee6abc3294e146fac3efd4f13f0005236b41c0a946ee00c9ae\nhtlc_success_tx (htlc #1): 020000000001010f44041fdfba175987cf4e6135ba2a154e3b7fb96483dc0ed5efc0678e5b6bf10100000000000000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202361012a634aee7835c5ecdd6413dcffa8f404b7e77364c792cff984e4ee71e90220715c5e90baa08daa45a7439b1ee4fa4843ed77b19c058240b69406606d38412401473044022019de73b00f1d818fb388e83b2c8c31f6bce35ac624e215bc12f88f9dc33edf48022006ff814bb9f700ee6abc3294e146fac3efd4f13f0005236b41c0a946ee00c9ae012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #2 (htlc-timeout for htlc #3)\nremote_htlc_signature = 304402207e8e82cd71ed4febeb593732c260456836e97d81896153ecd2b3cf320ca6861702202dd4a30f68f98ced7cc56a36369ac1fdd978248c5ff4ed204fc00cc625532989\n# local_htlc_signature = 3045022100bd0be6100c4fd8f102ec220e1b053e4c4e2ecca25615490150007b40d314dc3902201a1e0ea266965b43164d9e6576f58fa6726d42883dd1c3996d2925c2e2260796\nhtlc_timeout_tx (htlc #3): 020000000001010f44041fdfba175987cf4e6135ba2a154e3b7fb96483dc0ed5efc0678e5b6bf1020000000000000000010b0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207e8e82cd71ed4febeb593732c260456836e97d81896153ecd2b3cf320ca6861702202dd4a30f68f98ced7cc56a36369ac1fdd978248c5ff4ed204fc00cc62553298901483045022100bd0be6100c4fd8f102ec220e1b053e4c4e2ecca25615490150007b40d314dc3902201a1e0ea266965b43164d9e6576f58fa6726d42883dd1c3996d2925c2e226079601008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #3 (htlc-success for htlc #4)\nremote_htlc_signature = 3044022024cd52e4198c8ae0e414a86d86b5a65ea7450f2eb4e783096736d93395eca5ce022078f0094745b45be4d4b2b04dd5978c9e66ba49109e5704403e84aaf5f387d6be\n# local_htlc_signature = 3045022100bbfb9d0a946d420807c86e985d636cceb16e71c3694ed186316251a00cbd807202207773223f9a337e145f64673825be9b30d07ef1542c82188b264bedcf7cda78c6\nhtlc_success_tx (htlc #4): 020000000001010f44041fdfba175987cf4e6135ba2a154e3b7fb96483dc0ed5efc0678e5b6bf103000000000000000001d90d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022024cd52e4198c8ae0e414a86d86b5a65ea7450f2eb4e783096736d93395eca5ce022078f0094745b45be4d4b2b04dd5978c9e66ba49109e5704403e84aaf5f387d6be01483045022100bbfb9d0a946d420807c86e985d636cceb16e71c3694ed186316251a00cbd807202207773223f9a337e145f64673825be9b30d07ef1542c82188b264bedcf7cda78c6012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with six outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2069\n# base commitment transaction fee = 2921\n# actual commitment transaction fee = 3921\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985079 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304502210090b96a2498ce0c0f2fadbec2aab278fed54c1a7838df793ec4d2c78d96ec096202204fdd439c50f90d483baa7b68feeef4bd33bc277695405447bcd0bfb2ca34d7bc\n# local_signature = 3045022100ad9a9bbbb75d506ca3b716b336ee3cf975dd7834fcf129d7dd188146eb58a8b4022061a759ee417339f7fe2ea1e8deb83abb6a74db31a09b7648a932a639cda23e33\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8006d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e48477956a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100ad9a9bbbb75d506ca3b716b336ee3cf975dd7834fcf129d7dd188146eb58a8b4022061a759ee417339f7fe2ea1e8deb83abb6a74db31a09b7648a932a639cda23e330148304502210090b96a2498ce0c0f2fadbec2aab278fed54c1a7838df793ec4d2c78d96ec096202204fdd439c50f90d483baa7b68feeef4bd33bc277695405447bcd0bfb2ca34d7bc01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 4\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 3045022100f33513ee38abf1c582876f921f8fddc06acff48e04515532a32d3938de938ffd02203aa308a2c1863b7d6fdf53159a1465bf2e115c13152546cc5d74483ceaa7f699\n# local_htlc_signature = 3045022100a637902a5d4c9ba9e7c472a225337d5aac9e2e3f6744f76e237132e7619ba0400220035c60d784a031c0d9f6df66b7eab8726a5c25397399ee4aa960842059eb3f9d\nhtlc_timeout_tx (htlc #2): 02000000000101adbe717a63fb658add30ada1e6e12ed257637581898abe475c11d7bbcd65bd4d0000000000000000000175020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100f33513ee38abf1c582876f921f8fddc06acff48e04515532a32d3938de938ffd02203aa308a2c1863b7d6fdf53159a1465bf2e115c13152546cc5d74483ceaa7f69901483045022100a637902a5d4c9ba9e7c472a225337d5aac9e2e3f6744f76e237132e7619ba0400220035c60d784a031c0d9f6df66b7eab8726a5c25397399ee4aa960842059eb3f9d01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-success for htlc #1)\nremote_htlc_signature = 3045022100ce07682cf4b90093c22dc2d9ab2a77ad6803526b655ef857221cc96af5c9e0bf02200f501cee22e7a268af40b555d15a8237c9f36ad67ef1841daf9f6a0267b1e6df\n# local_htlc_signature = 3045022100e57e46234f8782d3ff7aa593b4f7446fb5316c842e693dc63ee324fd49f6a1c302204a2f7b44c48bd26e1554422afae13153eb94b29d3687b733d18930615fb2db61\nhtlc_success_tx (htlc #1): 02000000000101adbe717a63fb658add30ada1e6e12ed257637581898abe475c11d7bbcd65bd4d0100000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100ce07682cf4b90093c22dc2d9ab2a77ad6803526b655ef857221cc96af5c9e0bf02200f501cee22e7a268af40b555d15a8237c9f36ad67ef1841daf9f6a0267b1e6df01483045022100e57e46234f8782d3ff7aa593b4f7446fb5316c842e693dc63ee324fd49f6a1c302204a2f7b44c48bd26e1554422afae13153eb94b29d3687b733d18930615fb2db61012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #2 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100e3e35492e55f82ec0bc2f317ffd7a486d1f7024330fe9743c3559fc39f32ef0c02203d1d4db651fc388a91d5ad8ecdd8e83673063bc8eefe27cfd8c189090e3a23e0\n# local_htlc_signature = 3044022068613fb1b98eb3aec7f44c5b115b12343c2f066c4277c82b5f873dfe68f37f50022028109b4650f3f528ca4bfe9a467aff2e3e43893b61b5159157119d5d95cf1c18\nhtlc_timeout_tx (htlc #3): 02000000000101adbe717a63fb658add30ada1e6e12ed257637581898abe475c11d7bbcd65bd4d020000000000000000015d060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e3e35492e55f82ec0bc2f317ffd7a486d1f7024330fe9743c3559fc39f32ef0c02203d1d4db651fc388a91d5ad8ecdd8e83673063bc8eefe27cfd8c189090e3a23e001473044022068613fb1b98eb3aec7f44c5b115b12343c2f066c4277c82b5f873dfe68f37f50022028109b4650f3f528ca4bfe9a467aff2e3e43893b61b5159157119d5d95cf1c1801008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #3 (htlc-success for htlc #4)\nremote_htlc_signature = 304402207475aeb0212ef9bf5130b60937817ad88c9a87976988ef1f323f026148cc4a850220739fea17ad3257dcad72e509c73eebe86bee30b178467b9fdab213d631b109df\n# local_htlc_signature = 3045022100d315522e09e7d53d2a659a79cb67fef56d6c4bddf3f46df6772d0d20a7beb7c8022070bcc17e288607b6a72be0bd83368bb6d53488db266c1cdb4d72214e4f02ac33\nhtlc_success_tx (htlc #4): 02000000000101adbe717a63fb658add30ada1e6e12ed257637581898abe475c11d7bbcd65bd4d03000000000000000001f2090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207475aeb0212ef9bf5130b60937817ad88c9a87976988ef1f323f026148cc4a850220739fea17ad3257dcad72e509c73eebe86bee30b178467b9fdab213d631b109df01483045022100d315522e09e7d53d2a659a79cb67fef56d6c4bddf3f46df6772d0d20a7beb7c8022070bcc17e288607b6a72be0bd83368bb6d53488db266c1cdb4d72214e4f02ac33012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with five outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2070\n# base commitment transaction fee = 2566\n# actual commitment transaction fee = 5566\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985434 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402204ca1ba260dee913d318271d86e10ca0f5883026fb5653155cff600fb40895223022037b145204b7054a40e08bb1fefbd826f827b40838d3e501423bcc57924bcb50c\n# local_signature = 3044022001014419b5ba00e083ac4e0a85f19afc848aacac2d483b4b525d15e2ae5adbfe022015ebddad6ee1e72b47cb09f3e78459da5be01ccccd95dceca0e056a00cc773c1\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484da966a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022001014419b5ba00e083ac4e0a85f19afc848aacac2d483b4b525d15e2ae5adbfe022015ebddad6ee1e72b47cb09f3e78459da5be01ccccd95dceca0e056a00cc773c10147304402204ca1ba260dee913d318271d86e10ca0f5883026fb5653155cff600fb40895223022037b145204b7054a40e08bb1fefbd826f827b40838d3e501423bcc57924bcb50c01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 3\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 304402205f6b6d12d8d2529fb24f4445630566cf4abbd0f9330ab6c2bdb94222d6a2a0c502202f556258ae6f05b193749e4c541dfcc13b525a5422f6291f073f15617ba8579b\n# local_htlc_signature = 30440220150b11069454da70caf2492ded9e0065c9a57f25ac2a4c52657b1d15b6c6ed85022068a38833b603c8892717206383611bad210f1cbb4b1f87ea29c6c65b9e1cb3e5\nhtlc_timeout_tx (htlc #2): 02000000000101403ad7602b43293497a3a2235a12ecefda4f3a1f1d06e49b1786d945685de1ff0000000000000000000174020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402205f6b6d12d8d2529fb24f4445630566cf4abbd0f9330ab6c2bdb94222d6a2a0c502202f556258ae6f05b193749e4c541dfcc13b525a5422f6291f073f15617ba8579b014730440220150b11069454da70caf2492ded9e0065c9a57f25ac2a4c52657b1d15b6c6ed85022068a38833b603c8892717206383611bad210f1cbb4b1f87ea29c6c65b9e1cb3e501008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100f960dfb1c9aee7ce1437efa65b523e399383e8149790e05d8fed27ff6e42fe0002202fe8613e062ffe0b0c518cc4101fba1c6de70f64a5bcc7ae663f2efae43b8546\n# local_htlc_signature = 30450221009a6ed18e6873bc3644332a6ee21c152a5b102821865350df7a8c74451a51f9f2022050d801fb4895d7d7fbf452824c0168347f5c0cbe821cf6a97a63af5b8b2563c6\nhtlc_timeout_tx (htlc #3): 02000000000101403ad7602b43293497a3a2235a12ecefda4f3a1f1d06e49b1786d945685de1ff010000000000000000015c060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100f960dfb1c9aee7ce1437efa65b523e399383e8149790e05d8fed27ff6e42fe0002202fe8613e062ffe0b0c518cc4101fba1c6de70f64a5bcc7ae663f2efae43b8546014830450221009a6ed18e6873bc3644332a6ee21c152a5b102821865350df7a8c74451a51f9f2022050d801fb4895d7d7fbf452824c0168347f5c0cbe821cf6a97a63af5b8b2563c601008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #2 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100ae5fc7717ae684bc1fcf9020854e5dbe9842c9e7472879ac06ff95ac2bb10e4e022057728ada4c00083a3e65493fb5d50a232165948a1a0f530ef63185c2c8c56504\n# local_htlc_signature = 30440220408ad3009827a8fccf774cb285587686bfb2ed041f89a89453c311ce9c8ee0f902203c7392d9f8306d3a46522a66bd2723a7eb2628cb2d9b34d4c104f1766bf37502\nhtlc_success_tx (htlc #4): 02000000000101403ad7602b43293497a3a2235a12ecefda4f3a1f1d06e49b1786d945685de1ff02000000000000000001f1090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100ae5fc7717ae684bc1fcf9020854e5dbe9842c9e7472879ac06ff95ac2bb10e4e022057728ada4c00083a3e65493fb5d50a232165948a1a0f530ef63185c2c8c56504014730440220408ad3009827a8fccf774cb285587686bfb2ed041f89a89453c311ce9c8ee0f902203c7392d9f8306d3a46522a66bd2723a7eb2628cb2d9b34d4c104f1766bf37502012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with five outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2194\n# base commitment transaction fee = 2720\n# actual commitment transaction fee = 5720\n# HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985280 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402204bb3d6e279d71d9da414c82de42f1f954267c762b2e2eb8b76bc3be4ea07d4b0022014febc009c5edc8c3fc5d94015de163200f780046f1c293bfed8568f08b70fb3\n# local_signature = 3044022072c2e2b1c899b2242656a537dde2892fa3801be0d6df0a87836c550137acde8302201654aa1974d37a829083c3ba15088689f30b56d6a4f6cb14c7bad0ee3116d398\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e48440966a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022072c2e2b1c899b2242656a537dde2892fa3801be0d6df0a87836c550137acde8302201654aa1974d37a829083c3ba15088689f30b56d6a4f6cb14c7bad0ee3116d3980147304402204bb3d6e279d71d9da414c82de42f1f954267c762b2e2eb8b76bc3be4ea07d4b0022014febc009c5edc8c3fc5d94015de163200f780046f1c293bfed8568f08b70fb301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 3\n# signature for output #0 (htlc-timeout for htlc #2)\nremote_htlc_signature = 3045022100939726680351a7856c1bc386d4a1f422c7d29bd7b56afc139570f508474e6c40022023175a799ccf44c017fbaadb924c40b2a12115a5b7d0dfd3228df803a2de8450\n# local_htlc_signature = 304502210099c98c2edeeee6ec0fb5f3bea8b79bb016a2717afa9b5072370f34382de281d302206f5e2980a995e045cf90a547f0752a7ee99d48547bc135258fe7bc07e0154301\nhtlc_timeout_tx (htlc #2): 02000000000101153cd825fdb3aa624bfe513e8031d5d08c5e582fb3d1d1fe8faf27d3eed410cd0000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100939726680351a7856c1bc386d4a1f422c7d29bd7b56afc139570f508474e6c40022023175a799ccf44c017fbaadb924c40b2a12115a5b7d0dfd3228df803a2de84500148304502210099c98c2edeeee6ec0fb5f3bea8b79bb016a2717afa9b5072370f34382de281d302206f5e2980a995e045cf90a547f0752a7ee99d48547bc135258fe7bc07e015430101008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n# signature for output #1 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3044022021bb883bf324553d085ba2e821cad80c28ef8b303dbead8f98e548783c02d1600220638f9ef2a9bba25869afc923f4b5dc38be3bb459f9efa5d869392d5f7779a4a0\n# local_htlc_signature = 3045022100fd85bd7697b89c08ec12acc8ba89b23090637d83abd26ca37e01ae93e67c367302202b551fe69386116c47f984aab9c8dfd25d864dcde5d3389cfbef2447a85c4b77\nhtlc_timeout_tx (htlc #3): 02000000000101153cd825fdb3aa624bfe513e8031d5d08c5e582fb3d1d1fe8faf27d3eed410cd010000000000000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022021bb883bf324553d085ba2e821cad80c28ef8b303dbead8f98e548783c02d1600220638f9ef2a9bba25869afc923f4b5dc38be3bb459f9efa5d869392d5f7779a4a001483045022100fd85bd7697b89c08ec12acc8ba89b23090637d83abd26ca37e01ae93e67c367302202b551fe69386116c47f984aab9c8dfd25d864dcde5d3389cfbef2447a85c4b7701008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #2 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100c9e6f0454aa598b905a35e641a70cc9f67b5f38cc4b00843a041238c4a9f1c4a0220260a2822a62da97e44583e837245995ca2e36781769c52f19e498efbdcca262b\n# local_htlc_signature = 30450221008a9f2ea24cd455c2b64c1472a5fa83865b0a5f49a62b661801e884cf2849af8302204d44180e50bf6adfcf1c1e581d75af91aba4e28681ce4a5ee5f3cbf65eca10f3\nhtlc_success_tx (htlc #4): 02000000000101153cd825fdb3aa624bfe513e8031d5d08c5e582fb3d1d1fe8faf27d3eed410cd020000000000000000019a090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100c9e6f0454aa598b905a35e641a70cc9f67b5f38cc4b00843a041238c4a9f1c4a0220260a2822a62da97e44583e837245995ca2e36781769c52f19e498efbdcca262b014830450221008a9f2ea24cd455c2b64c1472a5fa83865b0a5f49a62b661801e884cf2849af8302204d44180e50bf6adfcf1c1e581d75af91aba4e28681ce4a5ee5f3cbf65eca10f3012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with four outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 2195\n# base commitment transaction fee = 2344\n# actual commitment transaction fee = 7344\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6985656 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402201a8c1b1f9671cd9e46c7323a104d7047cc48d3ee80d40d4512e0c72b8dc65666022066d7f9a2ce18c9eb22d2739ffcce05721c767f9b607622a31b6ea5793ddce403\n# local_signature = 3044022044d592025b610c0d678f65032e87035cdfe89d1598c522cc32524ae8172417c30220749fef9d5b2ae8cdd91ece442ba8809bc891efedae2291e578475f97715d1767\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8004b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484b8976a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022044d592025b610c0d678f65032e87035cdfe89d1598c522cc32524ae8172417c30220749fef9d5b2ae8cdd91ece442ba8809bc891efedae2291e578475f97715d17670147304402201a8c1b1f9671cd9e46c7323a104d7047cc48d3ee80d40d4512e0c72b8dc65666022066d7f9a2ce18c9eb22d2739ffcce05721c767f9b607622a31b6ea5793ddce40301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 2\n# signature for output #0 (htlc-timeout for htlc #3)\nremote_htlc_signature = 3045022100e57b845066a06ee7c2cbfc29eabffe52daa9bf6f6de760066d04df9f9b250e0002202ffb197f0e6e0a77a75a9aff27014bd3de83b7f748d7efef986abe655e1dd50e\n# local_htlc_signature = 3045022100ecc8c6529d0b2316d046f0f0757c1e1c25a636db168ec4f3aa1b9278df685dc0022067ae6b65e936f1337091f7b18a15935b608c5f2cdddb2f892ed0babfdd376d76\nhtlc_timeout_tx (htlc #3): 020000000001018130a10f09b13677ba2885a8bca32860f3a952e5912b829a473639b5a2c07b900000000000000000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e57b845066a06ee7c2cbfc29eabffe52daa9bf6f6de760066d04df9f9b250e0002202ffb197f0e6e0a77a75a9aff27014bd3de83b7f748d7efef986abe655e1dd50e01483045022100ecc8c6529d0b2316d046f0f0757c1e1c25a636db168ec4f3aa1b9278df685dc0022067ae6b65e936f1337091f7b18a15935b608c5f2cdddb2f892ed0babfdd376d7601008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #1 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100d193b7ecccad8057571620a0b1ffa6c48e9483311723b59cf536043b20bc51550220546d4bd37b3b101ecda14f6c907af46ec391abce1cd9c7ce22b1a62b534f2f2a\n# local_htlc_signature = 3044022014d66f11f9cacf923807eba49542076c5fe5cccf252fb08fe98c78ef3ca6ab5402201b290dbe043cc512d9d78de074a5a129b8759bc6a6c546b190d120b690bd6e82\nhtlc_success_tx (htlc #4): 020000000001018130a10f09b13677ba2885a8bca32860f3a952e5912b829a473639b5a2c07b900100000000000000000199090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100d193b7ecccad8057571620a0b1ffa6c48e9483311723b59cf536043b20bc51550220546d4bd37b3b101ecda14f6c907af46ec391abce1cd9c7ce22b1a62b534f2f2a01473044022014d66f11f9cacf923807eba49542076c5fe5cccf252fb08fe98c78ef3ca6ab5402201b290dbe043cc512d9d78de074a5a129b8759bc6a6c546b190d120b690bd6e82012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with four outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 3702\n# base commitment transaction fee = 3953\n# actual commitment transaction fee = 8953\n# HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6984047 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304502210092a587aeb777f869e7ff0d7898ea619ee26a3dacd1f3672b945eea600be431100220077ee9eae3528d15251f2a52b607b189820e57a6ccfac8d1af502b132ee40169\n# local_signature = 3045022100e5efb73c32d32da2d79702299b6317de6fb24a60476e3855926d78484dd1b3c802203557cb66a42c944ef06e00bcc4da35a5bcb2f185aab0f8e403e519e1d66aaf75\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8004b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e4846f916a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100e5efb73c32d32da2d79702299b6317de6fb24a60476e3855926d78484dd1b3c802203557cb66a42c944ef06e00bcc4da35a5bcb2f185aab0f8e403e519e1d66aaf750148304502210092a587aeb777f869e7ff0d7898ea619ee26a3dacd1f3672b945eea600be431100220077ee9eae3528d15251f2a52b607b189820e57a6ccfac8d1af502b132ee4016901475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 2\n# signature for output #0 (htlc-timeout for htlc #3)\nremote_htlc_signature = 304402206fa54c11f98c3bae1e93df43fc7affeb05b476bf8060c03e29c377c69bc08e8b0220672701cce50d5c379ff45a5d2cfe48ac44973adb066ac32608e21221d869bb89\n# local_htlc_signature = 304402206e36c683ebf2cb16bcef3d5439cf8b53cd97280a365ed8acd7abb85a8ba5f21c02206e8621edfc2a5766cbc96eb67fd501127ff163eb6b85518a39f7d4974aef126f\nhtlc_timeout_tx (htlc #3): 020000000001018db483bff65c70ee71d8282aeec5a880e2e2b39e45772bda5460403095c62e3f0000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402206fa54c11f98c3bae1e93df43fc7affeb05b476bf8060c03e29c377c69bc08e8b0220672701cce50d5c379ff45a5d2cfe48ac44973adb066ac32608e21221d869bb890147304402206e36c683ebf2cb16bcef3d5439cf8b53cd97280a365ed8acd7abb85a8ba5f21c02206e8621edfc2a5766cbc96eb67fd501127ff163eb6b85518a39f7d4974aef126f01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n# signature for output #1 (htlc-success for htlc #4)\nremote_htlc_signature = 3044022057649739b0eb74d541ead0dfdb3d4b2c15aa192720031044c3434c67812e5ca902201e5ede42d960ae551707f4a6b34b09393cf4dee2418507daa022e3550dbb5817\n# local_htlc_signature = 304402207faad26678c8850e01b4a0696d60841f7305e1832b786110ee9075cb92ed14a30220516ef8ee5dfa80824ea28cbcec0dd95f8b847146257c16960db98507db15ffdc\nhtlc_success_tx (htlc #4): 020000000001018db483bff65c70ee71d8282aeec5a880e2e2b39e45772bda5460403095c62e3f0100000000000000000176050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022057649739b0eb74d541ead0dfdb3d4b2c15aa192720031044c3434c67812e5ca902201e5ede42d960ae551707f4a6b34b09393cf4dee2418507daa022e3550dbb58170147304402207faad26678c8850e01b4a0696d60841f7305e1832b786110ee9075cb92ed14a30220516ef8ee5dfa80824ea28cbcec0dd95f8b847146257c16960db98507db15ffdc012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with three outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 3703\n# base commitment transaction fee = 3317\n# actual commitment transaction fee = 11317\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6984683 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 3045022100b495d239772a237ff2cf354b1b11be152fd852704cb184e7356d13f2fb1e5e430220723db5cdb9cbd6ead7bfd3deb419cf41053a932418cbb22a67b581f40bc1f13e\n# local_signature = 304402201b736d1773a124c745586217a75bed5f66c05716fbe8c7db4fdb3c3069741cdd02205083f39c321c1bcadfc8d97e3c791a66273d936abac0c6a2fde2ed46019508e1\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8003a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484eb936a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402201b736d1773a124c745586217a75bed5f66c05716fbe8c7db4fdb3c3069741cdd02205083f39c321c1bcadfc8d97e3c791a66273d936abac0c6a2fde2ed46019508e101483045022100b495d239772a237ff2cf354b1b11be152fd852704cb184e7356d13f2fb1e5e430220723db5cdb9cbd6ead7bfd3deb419cf41053a932418cbb22a67b581f40bc1f13e01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 1\n# signature for output #0 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100c34c61735f93f2e324cc873c3b248111ccf8f6db15d5969583757010d4ad2b4602207867bb919b2ddd6387873e425345c9b7fd18d1d66aba41f3607bc2896ef3c30a\n# local_htlc_signature = 3045022100988c143e2110067117d2321bdd4bd16ca1734c98b29290d129384af0962b634e02206c1b02478878c5f547018b833986578f90c3e9be669fe5788ad0072a55acbb05\nhtlc_success_tx (htlc #4): 0200000000010120060e4a29579d429f0f27c17ee5f1ee282f20d706d6f90b63d35946d8f3029a0000000000000000000175050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100c34c61735f93f2e324cc873c3b248111ccf8f6db15d5969583757010d4ad2b4602207867bb919b2ddd6387873e425345c9b7fd18d1d66aba41f3607bc2896ef3c30a01483045022100988c143e2110067117d2321bdd4bd16ca1734c98b29290d129384af0962b634e02206c1b02478878c5f547018b833986578f90c3e9be669fe5788ad0072a55acbb05012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with three outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 4914\n# base commitment transaction fee = 4402\n# actual commitment transaction fee = 12402\n# HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n# to_local amount 6983598 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 3045022100b4b16d5f8cc9fc4c1aff48831e832a0d8990e133978a66e302c133550954a44d022073573ce127e2200d316f6b612803a5c0c97b8d20e1e44dbe2ac0dd2fb8c95244\n# local_signature = 3045022100d72638bc6308b88bb6d45861aae83e5b9ff6e10986546e13bce769c70036e2620220320be7c6d66d22f30b9fcd52af66531505b1310ca3b848c19285b38d8a1a8c19\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8003a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484ae8f6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100d72638bc6308b88bb6d45861aae83e5b9ff6e10986546e13bce769c70036e2620220320be7c6d66d22f30b9fcd52af66531505b1310ca3b848c19285b38d8a1a8c1901483045022100b4b16d5f8cc9fc4c1aff48831e832a0d8990e133978a66e302c133550954a44d022073573ce127e2200d316f6b612803a5c0c97b8d20e1e44dbe2ac0dd2fb8c9524401475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 1\n# signature for output #0 (htlc-success for htlc #4)\nremote_htlc_signature = 3045022100f43591c156038ba217756006bb3c55f7d113a325cdd7d9303c82115372858d68022016355b5aadf222bc8d12e426c75f4a03423917b2443a103eb2a498a3a2234374\n# local_htlc_signature = 30440220585dee80fafa264beac535c3c0bb5838ac348b156fdc982f86adc08dfc9bfd250220130abb82f9f295cc9ef423dcfef772fde2acd85d9df48cc538981d26a10a9c10\nhtlc_success_tx (htlc #4): 02000000000101a9172908eace869cc35128c31fc2ab502f72e4dff31aab23e0244c4b04b11ab00000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100f43591c156038ba217756006bb3c55f7d113a325cdd7d9303c82115372858d68022016355b5aadf222bc8d12e426c75f4a03423917b2443a103eb2a498a3a2234374014730440220585dee80fafa264beac535c3c0bb5838ac348b156fdc982f86adc08dfc9bfd250220130abb82f9f295cc9ef423dcfef772fde2acd85d9df48cc538981d26a10a9c10012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\nname: commitment tx with two outputs untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 4915\n# base commitment transaction fee = 3558\n# actual commitment transaction fee = 15558\n# to_local amount 6984442 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402203a286936e74870ca1459c700c71202af0381910a6bfab687ef494ef1bc3e02c902202506c362d0e3bee15e802aa729bf378e051644648253513f1c085b264cc2a720\n# local_signature = 30450221008a953551f4d67cb4df3037207fc082ddaf6be84d417b0bd14c80aab66f1b01a402207508796dc75034b2dee876fe01dc05a08b019f3e5d689ac8842ade2f1befccf5\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8002c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484fa926a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221008a953551f4d67cb4df3037207fc082ddaf6be84d417b0bd14c80aab66f1b01a402207508796dc75034b2dee876fe01dc05a08b019f3e5d689ac8842ade2f1befccf50147304402203a286936e74870ca1459c700c71202af0381910a6bfab687ef494ef1bc3e02c902202506c362d0e3bee15e802aa729bf378e051644648253513f1c085b264cc2a72001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with two outputs untrimmed (maximum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 9651180\n# base commitment transaction fee = 6987454\n# actual commitment transaction fee = 6999454\n# to_local amount 546 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402200a8544eba1d216f5c5e530597665fa9bec56943c0f66d98fc3d028df52d84f7002201e45fa5c6bc3a506cc2553e7d1c0043a9811313fc39c954692c0d47cfce2bbd3\n# local_signature = 3045022100e11b638c05c650c2f63a421d36ef8756c5ce82f2184278643520311cdf50aa200220259565fb9c8e4a87ccaf17f27a3b9ca4f20625754a0920d9c6c239d8156a11de\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b800222020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80ec0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e4840400483045022100e11b638c05c650c2f63a421d36ef8756c5ce82f2184278643520311cdf50aa200220259565fb9c8e4a87ccaf17f27a3b9ca4f20625754a0920d9c6c239d8156a11de0147304402200a8544eba1d216f5c5e530597665fa9bec56943c0f66d98fc3d028df52d84f7002201e45fa5c6bc3a506cc2553e7d1c0043a9811313fc39c954692c0d47cfce2bbd301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with one output untrimmed (minimum feerate)\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 9651181\n# base commitment transaction fee = 6987455\n# actual commitment transaction fee = 7000000\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402202ade0142008309eb376736575ad58d03e5b115499709c6db0b46e36ff394b492022037b63d78d66404d6504d4c4ac13be346f3d1802928a6d3ad95a6a944227161a2\n# local_signature = 304402207e8d51e0c570a5868a78414f4e0cbfaed1106b171b9581542c30718ee4eb95ba02203af84194c97adf98898c9afe2f2ed4a7f8dba05a2dfab28ac9d9c604aa49a379\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8001c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484040047304402207e8d51e0c570a5868a78414f4e0cbfaed1106b171b9581542c30718ee4eb95ba02203af84194c97adf98898c9afe2f2ed4a7f8dba05a2dfab28ac9d9c604aa49a3790147304402202ade0142008309eb376736575ad58d03e5b115499709c6db0b46e36ff394b492022037b63d78d66404d6504d4c4ac13be346f3d1802928a6d3ad95a6a944227161a201475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with fee greater than funder amount\nto_local_msat: 6988000000\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 9651936\n# base commitment transaction fee = 6988001\n# actual commitment transaction fee = 7000000\n# to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\nremote_signature = 304402202ade0142008309eb376736575ad58d03e5b115499709c6db0b46e36ff394b492022037b63d78d66404d6504d4c4ac13be346f3d1802928a6d3ad95a6a944227161a2\n# local_signature = 304402207e8d51e0c570a5868a78414f4e0cbfaed1106b171b9581542c30718ee4eb95ba02203af84194c97adf98898c9afe2f2ed4a7f8dba05a2dfab28ac9d9c604aa49a379\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8001c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484040047304402207e8d51e0c570a5868a78414f4e0cbfaed1106b171b9581542c30718ee4eb95ba02203af84194c97adf98898c9afe2f2ed4a7f8dba05a2dfab28ac9d9c604aa49a3790147304402202ade0142008309eb376736575ad58d03e5b115499709c6db0b46e36ff394b492022037b63d78d66404d6504d4c4ac13be346f3d1802928a6d3ad95a6a944227161a201475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 0\n\nname: commitment tx with 3 htlc outputs, 2 offered having the same amount and preimage\nto_local_msat: 6987999999\nto_remote_msat: 3000000000\nlocal_feerate_per_kw: 253\n# HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n# HTLC #5 offered amount 5000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868\n# HTLC #6 offered amount 5000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868\n# HTLC #5 and 6 have CLTV 506 and 505, respectively, and preimage 0505050505050505050505050505050505050505050505050505050505050505\nremote_signature = 304402207d0870964530f97b62497b11153c551dca0a1e226815ef0a336651158da0f82402200f5378beee0e77759147b8a0a284decd11bfd2bc55c8fafa41c134fe996d43c8\n# local_signature = 304402200d10bf5bc5397fc59d7188ae438d80c77575595a2d488e41bd6363a810cc8d72022012b57e714fbbfdf7a28c47d5b370cb8ac37c8545f596216e5b21e9b236ef457c\noutput commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2d8813000000000000220020305c12e1a0bc21e283c131cea1c66d68857d28b7b2fce0a6fbc40c164852121b8813000000000000220020305c12e1a0bc21e283c131cea1c66d68857d28b7b2fce0a6fbc40c164852121bc0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484a69f6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402200d10bf5bc5397fc59d7188ae438d80c77575595a2d488e41bd6363a810cc8d72022012b57e714fbbfdf7a28c47d5b370cb8ac37c8545f596216e5b21e9b236ef457c0147304402207d0870964530f97b62497b11153c551dca0a1e226815ef0a336651158da0f82402200f5378beee0e77759147b8a0a284decd11bfd2bc55c8fafa41c134fe996d43c801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\nnum_htlcs: 3\n# signature for output #0 (htlc-success for htlc #1)\nremote_htlc_signature = 3045022100b470fe12e5b7fea9eccb8cbff1972cea4f96758041898982a02bcc7f9d56d50b0220338a75b2afaab4ec00cdd2d9273c68c7581ff5a28bcbb40c4d138b81f1d45ce5\n# local_htlc_signature = 3044022017b90c65207522a907fb6a137f9dd528b3389465a8ae72308d9e1d564f512cf402204fc917b4f0e88604a3e994f85bfae7c7c1f9d9e9f78e8cd112e0889720d9405b\nhtlc_success_tx (htlc #1): 020000000001014bdccf28653066a2c554cafeffdfe1e678e64a69b056684deb0c4fba909423ec000000000000000000011f070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100b470fe12e5b7fea9eccb8cbff1972cea4f96758041898982a02bcc7f9d56d50b0220338a75b2afaab4ec00cdd2d9273c68c7581ff5a28bcbb40c4d138b81f1d45ce501473044022017b90c65207522a907fb6a137f9dd528b3389465a8ae72308d9e1d564f512cf402204fc917b4f0e88604a3e994f85bfae7c7c1f9d9e9f78e8cd112e0889720d9405b012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n# signature for output #1 (htlc-timeout for htlc #6)\nremote_htlc_signature = 3045022100b575379f6d8743cb0087648f81cfd82d17a97fbf8f67e058c65ce8b9d25df9500220554a210d65b02d9f36c6adf0f639430ca8293196ba5089bf67cc3a9813b7b00a\n# local_htlc_signature = 3045022100ee2e16b90930a479b13f8823a7f14b600198c838161160b9436ed086d3fc57e002202a66fa2324f342a17129949c640bfe934cbc73a869ba7c06aa25c5a3d0bfb53d\nhtlc_timeout_tx (htlc #6): 020000000001014bdccf28653066a2c554cafeffdfe1e678e64a69b056684deb0c4fba909423ec01000000000000000001e1120000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100b575379f6d8743cb0087648f81cfd82d17a97fbf8f67e058c65ce8b9d25df9500220554a210d65b02d9f36c6adf0f639430ca8293196ba5089bf67cc3a9813b7b00a01483045022100ee2e16b90930a479b13f8823a7f14b600198c838161160b9436ed086d3fc57e002202a66fa2324f342a17129949c640bfe934cbc73a869ba7c06aa25c5a3d0bfb53d01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868f9010000\n# signature for output #2 (htlc-timeout for htlc #5)\nremote_htlc_signature = 30440220471c9f3ad92e49b13b7b8059f43ecf8f7887b0dccbb9fdb54bfe23d62a8ae332022024bd22fae0740e86a44228c35330da9526fd7306dffb2b9dc362d5e78abef7cc\n# local_htlc_signature = 304402207157f452f2506d73c315192311893800cfb3cc235cc1185b1cfcc136b55230db022014be242dbc6c5da141fec4034e7f387f74d6ff1899453d72ba957467540e1ecb\nhtlc_timeout_tx (htlc #5): 020000000001014bdccf28653066a2c554cafeffdfe1e678e64a69b056684deb0c4fba909423ec02000000000000000001e1120000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220471c9f3ad92e49b13b7b8059f43ecf8f7887b0dccbb9fdb54bfe23d62a8ae332022024bd22fae0740e86a44228c35330da9526fd7306dffb2b9dc362d5e78abef7cc0147304402207157f452f2506d73c315192311893800cfb3cc235cc1185b1cfcc136b55230db022014be242dbc6c5da141fec4034e7f387f74d6ff1899453d72ba957467540e1ecb01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868fa010000\n\nAppendix D: Per-commitment Secret Generation Test Vectors\nThese test the generation algorithm that all nodes use.\nGeneration Tests\nname: generate_from_seed 0 final node\nseed: 0x0000000000000000000000000000000000000000000000000000000000000000\nI: 281474976710655\noutput: 0x02a40c85b6f28da08dfdbe0926c53fab2de6d28c10301f8f7c4073d5e42e3148\n\nname: generate_from_seed FF final node\nseed: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nI: 281474976710655\noutput: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\n\nname: generate_from_seed FF alternate bits 1\nseed: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nI: 0xaaaaaaaaaaa\noutput: 0x56f4008fb007ca9acf0e15b054d5c9fd12ee06cea347914ddbaed70d1c13a528\n\nname: generate_from_seed FF alternate bits 2\nseed: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nI: 0x555555555555\noutput: 0x9015daaeb06dba4ccc05b91b2f73bd54405f2be9f217fbacd3c5ac2e62327d31\n\nname: generate_from_seed 01 last nontrivial node\nseed: 0x0101010101010101010101010101010101010101010101010101010101010101\nI: 1\noutput: 0x915c75942a26bb3a433a8ce2cb0427c29ec6c1775cfc78328b57f6ba7bfeaa9c\n\nStorage Tests\nThese test the optional compact storage system. In many cases, an\nincorrect entry cannot be determined until its parent is revealed: an entry is\nspecifically corrupted, along with all its children.\nFor\nthese tests a seed of 0xFFF...FF is used, and incorrect entries are\nseeded with 0x000...00.\nname: insert_secret correct sequence\nI: 281474976710655\nsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\noutput: OK\nI: 281474976710654\nsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\noutput: OK\nI: 281474976710653\nsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\noutput: OK\nI: 281474976710652\nsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\noutput: OK\nI: 281474976710651\nsecret: 0xc65716add7aa98ba7acb236352d665cab17345fe45b55fb879ff80e6bd0c41dd\noutput: OK\nI: 281474976710650\nsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\noutput: OK\nI: 281474976710649\nsecret: 0xa5a64476122ca0925fb344bdc1854c1c0a59fc614298e50a33e331980a220f32\noutput: OK\nI: 281474976710648\nsecret: 0x05cde6323d949933f7f7b78776bcc1ea6d9b31447732e3802e1f7ac44b650e17\noutput: OK\n\nname: insert_secret #1 incorrect\nI: 281474976710655\nsecret: 0x02a40c85b6f28da08dfdbe0926c53fab2de6d28c10301f8f7c4073d5e42e3148\noutput: OK\nI: 281474976710654\nsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\noutput: ERROR\n\nname: insert_secret #2 incorrect (#1 derived from incorrect)\nI: 281474976710655\nsecret: 0x02a40c85b6f28da08dfdbe0926c53fab2de6d28c10301f8f7c4073d5e42e3148\noutput: OK\nI: 281474976710654\nsecret: 0xdddc3a8d14fddf2b68fa8c7fbad2748274937479dd0f8930d5ebb4ab6bd866a3\noutput: OK\nI: 281474976710653\nsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\noutput: OK\nI: 281474976710652\nsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\noutput: ERROR\n\nname: insert_secret #3 incorrect\nI: 281474976710655\nsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\noutput: OK\nI: 281474976710654\nsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\noutput: OK\nI: 281474976710653\nsecret: 0xc51a18b13e8527e579ec56365482c62f180b7d5760b46e9477dae59e87ed423a\noutput: OK\nI: 281474976710652\nsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\noutput: ERROR\n\nname: insert_secret #4 incorrect (1,2,3 derived from incorrect)\nI: 281474976710655\nsecret: 0x02a40c85b6f28da08dfdbe0926c53fab2de6d28c10301f8f7c4073d5e42e3148\noutput: OK\nI: 281474976710654\nsecret: 0xdddc3a8d14fddf2b68fa8c7fbad2748274937479dd0f8930d5ebb4ab6bd866a3\noutput: OK\nI: 281474976710653\nsecret: 0xc51a18b13e8527e579ec56365482c62f180b7d5760b46e9477dae59e87ed423a\noutput: OK\nI: 281474976710652\nsecret: 0xba65d7b0ef55a3ba300d4e87af29868f394f8f138d78a7011669c79b37b936f4\noutput: OK\nI: 281474976710651\nsecret: 0xc65716add7aa98ba7acb236352d665cab17345fe45b55fb879ff80e6bd0c41dd\noutput: OK\nI: 281474976710650\nsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\noutput: OK\nI: 281474976710649\nsecret: 0xa5a64476122ca0925fb344bdc1854c1c0a59fc614298e50a33e331980a220f32\noutput: OK\nI: 281474976710648\nsecret: 0x05cde6323d949933f7f7b78776bcc1ea6d9b31447732e3802e1f7ac44b650e17\noutput: ERROR\n\nname: insert_secret #5 incorrect\nI: 281474976710655\nsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\noutput: OK\nI: 281474976710654\nsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\noutput: OK\nI: 281474976710653\nsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\noutput: OK\nI: 281474976710652\nsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\noutput: OK\nI: 281474976710651\nsecret: 0x631373ad5f9ef654bb3dade742d09504c567edd24320d2fcd68e3cc47e2ff6a6\noutput: OK\nI: 281474976710650\nsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\noutput: ERROR\n\nname: insert_secret #6 incorrect (5 derived from incorrect)\nI: 281474976710655\nsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\noutput: OK\nI: 281474976710654\nsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\noutput: OK\nI: 281474976710653\nsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\noutput: OK\nI: 281474976710652\nsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\noutput: OK\nI: 281474976710651\nsecret: 0x631373ad5f9ef654bb3dade742d09504c567edd24320d2fcd68e3cc47e2ff6a6\noutput: OK\nI: 281474976710650\nsecret: 0xb7e76a83668bde38b373970155c868a653304308f9896692f904a23731224bb1\noutput: OK\nI: 281474976710649\nsecret: 0xa5a64476122ca0925fb344bdc1854c1c0a59fc614298e50a33e331980a220f32\noutput: OK\nI: 281474976710648\nsecret: 0x05cde6323d949933f7f7b78776bcc1ea6d9b31447732e3802e1f7ac44b650e17\noutput: ERROR\n\nname: insert_secret #7 incorrect\nI: 281474976710655\nsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\noutput: OK\nI: 281474976710654\nsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\noutput: OK\nI: 281474976710653\nsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\noutput: OK\nI: 281474976710652\nsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\noutput: OK\nI: 281474976710651\nsecret: 0xc65716add7aa98ba7acb236352d665cab17345fe45b55fb879ff80e6bd0c41dd\noutput: OK\nI: 281474976710650\nsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\noutput: OK\nI: 281474976710649\nsecret: 0xe7971de736e01da8ed58b94c2fc216cb1dca9e326f3a96e7194fe8ea8af6c0a3\noutput: OK\nI: 281474976710648\nsecret: 0x05cde6323d949933f7f7b78776bcc1ea6d9b31447732e3802e1f7ac44b650e17\noutput: ERROR\n\nname: insert_secret #8 incorrect\nI: 281474976710655\nsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\noutput: OK\nI: 281474976710654\nsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\noutput: OK\nI: 281474976710653\nsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\noutput: OK\nI: 281474976710652\nsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\noutput: OK\nI: 281474976710651\nsecret: 0xc65716add7aa98ba7acb236352d665cab17345fe45b55fb879ff80e6bd0c41dd\noutput: OK\nI: 281474976710650\nsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\noutput: OK\nI: 281474976710649\nsecret: 0xa5a64476122ca0925fb344bdc1854c1c0a59fc614298e50a33e331980a220f32\noutput: OK\nI: 281474976710648\nsecret: 0xa7efbc61aac46d34f77778bac22c8a20c6a46ca460addc49009bda875ec88fa4\noutput: ERROR\n\nAppendix E: Key Derivation Test Vectors\nThese test the derivation for localpubkey, remotepubkey, local_htlcpubkey, remote_htlcpubkey, local_delayedpubkey, and\nremote_delayedpubkey (which use the same formula), as well as the revocationpubkey.\nAll of them use the following secrets (and thus the derived points):\nbase_secret: 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\nper_commitment_secret: 0x1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100\nbase_point: 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2\nper_commitment_point: 0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486\n\nname: derivation of pubkey from basepoint and per_commitment_point\n# SHA256(per_commitment_point || basepoint)\n# => SHA256(0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486 || 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n# = 0xcbcdd70fcfad15ea8e9e5c5a12365cf00912504f08ce01593689dd426bca9ff0\n# + basepoint (0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n# = 0x0235f2dbfaa89b57ec7b055afe29849ef7ddfeb1cefdb9ebdc43f5494984db29e5\nlocalpubkey: 0x0235f2dbfaa89b57ec7b055afe29849ef7ddfeb1cefdb9ebdc43f5494984db29e5\n\nname: derivation of private key from basepoint secret and per_commitment_secret\n# SHA256(per_commitment_point || basepoint)\n# => SHA256(0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486 || 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n# = 0xcbcdd70fcfad15ea8e9e5c5a12365cf00912504f08ce01593689dd426bca9ff0\n# + basepoint_secret (0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f)\n# = 0xcbced912d3b21bf196a766651e436aff192362621ce317704ea2f75d87e7be0f\nlocalprivkey: 0xcbced912d3b21bf196a766651e436aff192362621ce317704ea2f75d87e7be0f\n\nname: derivation of revocation pubkey from basepoint and per_commitment_point\n# SHA256(revocation_basepoint || per_commitment_point)\n# => SHA256(0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2 || 0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486)\n# = 0xefbf7ba5a074276701798376950a64a90f698997cce0dff4d24a6d2785d20963\n# x revocation_basepoint = 0x02c00c4aadc536290422a807250824a8d87f19d18da9d610d45621df22510db8ce\n# SHA256(per_commitment_point || revocation_basepoint)\n# => SHA256(0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486 || 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n# = 0xcbcdd70fcfad15ea8e9e5c5a12365cf00912504f08ce01593689dd426bca9ff0\n# x per_commitment_point = 0x0325ee7d3323ce52c4b33d4e0a73ab637711057dd8866e3b51202a04112f054c43\n# 0x02c00c4aadc536290422a807250824a8d87f19d18da9d610d45621df22510db8ce + 0x0325ee7d3323ce52c4b33d4e0a73ab637711057dd8866e3b51202a04112f054c43 => 0x02916e326636d19c33f13e8c0c3a03dd157f332f3e99c317c141dd865eb01f8ff0\nrevocationpubkey: 0x02916e326636d19c33f13e8c0c3a03dd157f332f3e99c317c141dd865eb01f8ff0\n\nname: derivation of revocation secret from basepoint_secret and per_commitment_secret\n# SHA256(revocation_basepoint || per_commitment_point)\n# => SHA256(0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2 || 0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486)\n# = 0xefbf7ba5a074276701798376950a64a90f698997cce0dff4d24a6d2785d20963\n# * revocation_basepoint_secret (0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f)# = 0x44bfd55f845f885b8e60b2dca4b30272d5343be048d79ce87879d9863dedc842\n# SHA256(per_commitment_point || revocation_basepoint)\n# => SHA256(0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486 || 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n# = 0xcbcdd70fcfad15ea8e9e5c5a12365cf00912504f08ce01593689dd426bca9ff0\n# * per_commitment_secret (0x1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100)# = 0x8be02a96a97b9a3c1c9f59ebb718401128b72ec009d85ee1656319b52319b8ce\n# => 0xd09ffff62ddb2297ab000cc85bcb4283fdeb6aa052affbc9dddcf33b61078110\nrevocationprivkey: 0xd09ffff62ddb2297ab000cc85bcb4283fdeb6aa052affbc9dddcf33b61078110\n\nAppendix F: Commitment and HTLC Transaction Test Vectors (anchors)\nThe anchor test vectors are based on the test cases as defined in appendix C.\nNote that in appendix C, to_local_msat and to_remote_msat are balances\nbefore subtraction of:\n\nCommit fee (funder only)\nAnchor outputs (funder only)\nIn-flight htlcs\n\n[\n    {\n        "Name": "simple commitment tx with no HTLCs",\n        "LocalBalance": 7000000000,\n        "RemoteBalance": 3000000000,\n        "FeePerKw": 15000,\n        "UseTestHtlcs": false,\n        "HtlcDescs": [],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80044a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a508b6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221008266ac6db5ea71aac3c95d97b0e172ff596844851a3216eb88382a8dddfd33d2022050e240974cfd5d708708b4365574517c18e7ae535ef732a3484d43d0d82be9f701483045022100f89034eba16b2be0e5581f750a0a6309192b75cce0f202f0ee2b4ec0cc394850022076c65dc507fe42276152b7a3d90e961e678adbe966e916ecfe85e64d430e75f301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3045022100f89034eba16b2be0e5581f750a0a6309192b75cce0f202f0ee2b4ec0cc394850022076c65dc507fe42276152b7a3d90e961e678adbe966e916ecfe85e64d430e75f3"\n    },\n    {\n        "Name": "simple commitment tx with no HTLCs and single anchor",\n        "LocalBalance": 10000000000,\n        "RemoteBalance": 0,\n        "FeePerKw": 15000,\n        "UseTestHtlcs": false,\n        "HtlcDescs": [],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80024a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f10529800000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022007cf6b405e9c9b4f527b0ecad9d8bb661fabb8b12abf7d1c0b3ad1855db3ed490220616d5c1eeadccc63bd775a131149455d62d95a42c2a1b01cc7821fc42dce7778014730440220655bf909fb6fa81d086f1336ac72c97906dce29d1b166e305c99152d810e26e1022051f577faa46412c46707aaac46b65d50053550a66334e00a44af2706f27a865801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "30440220655bf909fb6fa81d086f1336ac72c97906dce29d1b166e305c99152d810e26e1022051f577faa46412c46707aaac46b65d50053550a66334e00a44af2706f27a8658"\n    },\n    {\n        "Name": "commitment tx with seven outputs untrimmed (maximum feerate)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "FeePerKw": 644,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "304402205912d91c58016f593d9e46fefcdb6f4125055c41a17b03101eaaa034b9028ab60220520d4d239c85c66e4c75c5b413620b62736e227659d7821b308e2b8ced3e728e",\n                "ResolutionTxHex": "02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a0200000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402205912d91c58016f593d9e46fefcdb6f4125055c41a17b03101eaaa034b9028ab60220520d4d239c85c66e4c75c5b413620b62736e227659d7821b308e2b8ced3e728e834730440220473166a5adcca68550bab80403f410a726b5bd855030527e3fefa8c1e4b4fd7b02203b1dc91d8d69039473036cb5c34398b99e8eb90ae500c22130a557b62294b188012000000000000000000000000000000000000000000000000000000000000000008d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6851b2756800000000"\n            },\n            {\n                "RemoteSigHex": "3045022100c6b4113678039ee1e43a6cba5e3224ed2355ffc05e365a393afe8843dc9a76860220566d01fd52d65a89ba8595023884f9e8f2e9a310a6b9b85281c0bce06863430c",\n                "ResolutionTxHex": "02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a0300000000010000000124060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100c6b4113678039ee1e43a6cba5e3224ed2355ffc05e365a393afe8843dc9a76860220566d01fd52d65a89ba8595023884f9e8f2e9a310a6b9b85281c0bce06863430c83483045022100d0d86307ea55d5daa80f453ad6d64b78fe8a6504aac25407c73e8502c0702c1602206a0809a02aa00c8dc4a53d976bb05d4605d8bb0b7b26b973a5c4e2734d8afbb401008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000"\n            },\n            {\n                "RemoteSigHex": "304402203c3a699fb80a38112aafd73d6e3a9b7d40bc2c3ed8b7fbc182a20f43b215172202204e71821b984d1af52c4b8e2cd4c572578c12a965866130c2345f61e4c2d3fef4",\n                "ResolutionTxHex": "02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a040000000001000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402203c3a699fb80a38112aafd73d6e3a9b7d40bc2c3ed8b7fbc182a20f43b215172202204e71821b984d1af52c4b8e2cd4c572578c12a965866130c2345f61e4c2d3fef48347304402205bcfa92f83c69289a412b0b6dd4f2a0fe0b0fc2d45bd74706e963257a09ea24902203783e47883e60b86240e877fcbf33d50b1742f65bc93b3162d1be26583b367ee012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000"\n            },\n            {\n                "RemoteSigHex": "304402200f089bcd20f25475216307d32aa5b6c857419624bfba1da07335f51f6ba4645b02206ce0f7153edfba23b0d4b2afc26bb3157d404368cb8ea0ca7cf78590dcdd28cf",\n                "ResolutionTxHex": "02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a050000000001000000010c0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402200f089bcd20f25475216307d32aa5b6c857419624bfba1da07335f51f6ba4645b02206ce0f7153edfba23b0d4b2afc26bb3157d404368cb8ea0ca7cf78590dcdd28cf83483045022100e4516da08f72c7a4f7b2f37aa84a0feb54ae2cc5b73f0da378e81ae0ca8119bf02207751b2628d8e2f62b4b9abccda4866246c1bfcc82e3d416ad562fd212102c28f01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000"\n            },\n            {\n                "RemoteSigHex": "3045022100aa72cfaf0965020c73a12c77276c6411ca68c4de36ac1998adf86c917a899a43022060da0a159fecfe0bed37c3962d767f12f90e30fed8a8f34b1301775c21a2bd3a",\n                "ResolutionTxHex": "02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a06000000000100000001da0d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100aa72cfaf0965020c73a12c77276c6411ca68c4de36ac1998adf86c917a899a43022060da0a159fecfe0bed37c3962d767f12f90e30fed8a8f34b1301775c21a2bd3a8347304402203cd12065c2a42963c762e6b1a981e17695616ecb6f9fb33d8b0717cdd7ca0ee4022065500005c491c1dcf2fe9c4024f74b1c90785d572527055a491278f901143904012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80094a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994e80300000000000022002010f88bf09e56f14fb4543fd26e47b0db50ea5de9cf3fc46434792471082621aed0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a4f996a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100ef82a405364bfc4007e63a7cc82925a513d79065bdbc216d60b6a4223a323f8a02200716730b8561f3c6d362eaf47f202e99fb30d0557b61b92b5f9134f8e2de368101483045022100e0106830467a558c07544a3de7715610c1147062e7d091deeebe8b5c661cda9402202ad049c1a6d04834317a78483f723c205c9f638d17222aafc620800cc1b6ae3501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3045022100e0106830467a558c07544a3de7715610c1147062e7d091deeebe8b5c661cda9402202ad049c1a6d04834317a78483f723c205c9f638d17222aafc620800cc1b6ae35"\n    },\n    {\n        "Name": "commitment tx with six outputs untrimmed (minimum feerate)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "FeePerKw": 645,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "30440220446f9e5c375db6a61d6eeee8b59219a30a4a37372afc2670a1a2889c78e9b943022061895f6088fb48b490ab2140a4842c277b64bf25ff591625dd0356e0c96ab7a8",\n                "ResolutionTxHex": "02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b28534856132000200000000010000000123060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220446f9e5c375db6a61d6eeee8b59219a30a4a37372afc2670a1a2889c78e9b943022061895f6088fb48b490ab2140a4842c277b64bf25ff591625dd0356e0c96ab7a883483045022100c1621ba26a99c263fd885feff5fda5ca2cc73df080b3a49ecf15164ee244d2a5022037f4cc7fd4441af39a83a0e44c3b1db7d64a4c8080e8697f9e952f85421a34d801008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000"\n            },\n            {\n                "RemoteSigHex": "3044022027a3ffcb8a007e3349d75382efbd4b3fb99fcbd479a18555e58697bd1278d5c402205c8303d46211c3ae8975fe84a0df08b4623119fecd03bc93b49d7f7a0c64c710",\n                "ResolutionTxHex": "02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b28534856132000300000000010000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022027a3ffcb8a007e3349d75382efbd4b3fb99fcbd479a18555e58697bd1278d5c402205c8303d46211c3ae8975fe84a0df08b4623119fecd03bc93b49d7f7a0c64c71083483045022100b697aca55c6fb15e5348bb7387b584815fd15e8dd306afe0c477cb550d0c2d40022050b0f7e370f7604d2fec781fefe86715dbe95dff4dab88d628f509d62f854de1012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000"\n            },\n            {\n                "RemoteSigHex": "30440220013975ae356e6daf22a86a29f21c4f35aca82ed8f731a1103c60c74f5ed1c5aa02200350d4e5455cdbcacb7ccf174db5bed8286019e509a113f6b4c5e606ee12c9d7",\n                "ResolutionTxHex": "02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b2853485613200040000000001000000010b0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220013975ae356e6daf22a86a29f21c4f35aca82ed8f731a1103c60c74f5ed1c5aa02200350d4e5455cdbcacb7ccf174db5bed8286019e509a113f6b4c5e606ee12c9d783483045022100e69a29f78779577830e73f327073c93168896f1b89432124b7846f5def9cd9cb02204433db3697e6ed7ac89574ca066a749640e0c9e114ac2e0ee4545741fcf7b7e901008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000"\n            },\n            {\n                "RemoteSigHex": "304402205257017423644c7e831f30bc0c334eecfe66e9a6d2e92d157c5bece576b2be4f022047b21cf8e955e22b7471940563922d1a5852fb95459ca32905c7d46a19141664",\n                "ResolutionTxHex": "02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320005000000000100000001d90d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402205257017423644c7e831f30bc0c334eecfe66e9a6d2e92d157c5bece576b2be4f022047b21cf8e955e22b7471940563922d1a5852fb95459ca32905c7d46a191416648347304402204f5de65a624e3f757adffb678bd887eb4e656538c5ea7044922f6ee3eed8a06202206ff6f7bfe73b565343cae76131ac658f1a9c60d3ca2343358cda60b9e35f94c8012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80084a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994abc996a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100d57697c707b6f6d053febf24b98e8989f186eea42e37e9e91663ec2c70bb8f70022079b0715a472118f262f43016a674f59c015d9cafccec885968e76d9d9c5d005101473044022025d97466c8049e955a5afce28e322f4b34d2561118e52332fb400f9b908cc0a402205dc6fba3a0d67ee142c428c535580cd1f2ff42e2f89b47e0c8a01847caffc31201475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3044022025d97466c8049e955a5afce28e322f4b34d2561118e52332fb400f9b908cc0a402205dc6fba3a0d67ee142c428c535580cd1f2ff42e2f89b47e0c8a01847caffc312"\n    },\n    {\n        "Name": "commitment tx with six outputs untrimmed (maximum feerate)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "FeePerKw": 2060,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "30440220011f999016570bbab9f3125377d0f35096b4dbe155f97c20f71829ead2817d1602201f23f7e17f6928734601c5d8613431eed5c90aa41c3106e8c1cb02ce32aacb5d",\n                "ResolutionTxHex": "02000000000101e7f364cf3a554b670767e723ef14b2af7a3eac70bd79dbde9256f384369c062d0200000000010000000175020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220011f999016570bbab9f3125377d0f35096b4dbe155f97c20f71829ead2817d1602201f23f7e17f6928734601c5d8613431eed5c90aa41c3106e8c1cb02ce32aacb5d83473044022017da96dfb0eb4061fa0162dc6fa6b2e07ecc5040ab5e6cb07be59838460b3e58022079371ffc95002cc1dc2891ec38198c9c25aca8164304fe114f1b55e2ffd1ddd501008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000"\n            },\n            {\n                "RemoteSigHex": "304402202d2d9681409b0a0987bd4a268ffeb112df85c4c988ac2a3a2475cb00a61912c302206aa4f4d1388b7d3282bc847871af3cca30766cc8f1064e3a41ec7e82221e10f7",\n                "ResolutionTxHex": "02000000000101e7f364cf3a554b670767e723ef14b2af7a3eac70bd79dbde9256f384369c062d0300000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202d2d9681409b0a0987bd4a268ffeb112df85c4c988ac2a3a2475cb00a61912c302206aa4f4d1388b7d3282bc847871af3cca30766cc8f1064e3a41ec7e82221e10f78347304402206426d67911aa6ff9b1cb147b093f3f65a37831a86d7c741d999afc0666e1773d022000bb71821650c70ea58d9bcdd03af736c41a5a8159d436c3ee0408a07394dcce012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000"\n            },\n            {\n                "RemoteSigHex": "3045022100f51cdaa525b7d4304548c642bb7945215eb5ae7d32874517cde67ca23ab0a12202206286d59e4b19926c6ac844be6f3ab8149a1ddb9c70f5026b7e83e40a6c08e6e1",\n                "ResolutionTxHex": "02000000000101e7f364cf3a554b670767e723ef14b2af7a3eac70bd79dbde9256f384369c062d040000000001000000015d060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100f51cdaa525b7d4304548c642bb7945215eb5ae7d32874517cde67ca23ab0a12202206286d59e4b19926c6ac844be6f3ab8149a1ddb9c70f5026b7e83e40a6c08e6e18348304502210091b16b1ac63b867e7a5ca0344f7b2aa1cdd49d4b72eac86a31e7ec6f069e20640220402bfb571ba3a9c49e3b0061c89303453803d0241059d899222aaac4799b507601008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000"\n            },\n            {\n                "RemoteSigHex": "304402202f058d99cb5a54f90773d43ba4e7a0089efd9f8269ef2da1b85d48a3e230555402205acc4bd6561830867d45cd7b84bba9fa35ad2b345016471c1737142bc99782c4",\n                "ResolutionTxHex": "02000000000101e7f364cf3a554b670767e723ef14b2af7a3eac70bd79dbde9256f384369c062d05000000000100000001f2090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202f058d99cb5a54f90773d43ba4e7a0089efd9f8269ef2da1b85d48a3e230555402205acc4bd6561830867d45cd7b84bba9fa35ad2b345016471c1737142bc99782c48347304402202913f9cacea54efd2316cffa91219def9e0e111977216c1e76e9da80befab14f022000a9a69e8f37ebe4a39107ab50fab0dde537334588f8f412bbaca57b179b87a6012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80084a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ab88f6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402201ce37a44b95213358c20f44404d6db7a6083bea6f58de6c46547ae41a47c9f8202206db1d45be41373e92f90d346381febbea8c78671b28c153e30ad1db3441a94970147304402206208aeb34e404bd052ce3f298dfa832891c9d42caec99fe2a0d2832e9690b94302201b034bfcc6fa9faec667a9b7cbfe0b8d85e954aa239b66277887b5088aff08c301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "304402206208aeb34e404bd052ce3f298dfa832891c9d42caec99fe2a0d2832e9690b94302201b034bfcc6fa9faec667a9b7cbfe0b8d85e954aa239b66277887b5088aff08c3"\n    },\n    {\n        "Name": "commitment tx with five outputs untrimmed (minimum feerate)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "FeePerKw": 2061,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "3045022100e10744f572a2cd1d787c969e894b792afaed21217ee0480df0112d2fa3ef96ea02202af4f66eb6beebc36d8e98719ed6b4be1b181659fcb561fc491d8cfebff3aa85",\n                "ResolutionTxHex": "02000000000101cf32732fe2d1387ed4e2335f69ddd3c0f337dabc03269e742531f89d35e161d10200000000010000000174020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e10744f572a2cd1d787c969e894b792afaed21217ee0480df0112d2fa3ef96ea02202af4f66eb6beebc36d8e98719ed6b4be1b181659fcb561fc491d8cfebff3aa8583483045022100c3dc3ea50a0ca20e350f97b50c52c5514717cfa36cb9600918caac5cb556842b022049af018d676dde0c8e28ecf325f3ff5c1594261c4f7511d501f9d62d0594d2a201008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000"\n            },\n            {\n                "RemoteSigHex": "3045022100e1f51fb72fec604b029b348a3bb6363454e1869f5b1e24fd736f860c8039f8070220030a2c90186437d8c9b47d4897798c024521b1274991c4cdc125970b346094b1",\n                "ResolutionTxHex": "02000000000101cf32732fe2d1387ed4e2335f69ddd3c0f337dabc03269e742531f89d35e161d1030000000001000000015c060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e1f51fb72fec604b029b348a3bb6363454e1869f5b1e24fd736f860c8039f8070220030a2c90186437d8c9b47d4897798c024521b1274991c4cdc125970b346094b183483045022100ec7ade6037e531629f24390ca9713782a04d648065d17fbe6b015981cdb296c202202d61049a6ecba2fb5314f3edcda2361cad187a89bea6e5d15185354d80c0c08501008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000"\n            },\n            {\n                "RemoteSigHex": "304402203479f81a1d83c516957679dc98bf91d35deada967739a8e3869e3e8db08246130220053c8e154b97e3019048dcec3d51bfaf396f36861fbda6d33f0e2a57155c8b9f",\n                "ResolutionTxHex": "02000000000101cf32732fe2d1387ed4e2335f69ddd3c0f337dabc03269e742531f89d35e161d104000000000100000001f1090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402203479f81a1d83c516957679dc98bf91d35deada967739a8e3869e3e8db08246130220053c8e154b97e3019048dcec3d51bfaf396f36861fbda6d33f0e2a57155c8b9f83483045022100a558eb5caa04e35a4417c1f0123ac12eec5f6badee28f5764dc6b69486e594f802201589b12784e242f205832d2d032149bd4e79433ec304c05394241fc7dcba5a71012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80074a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837eab80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a18916a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402204ab07c659412dd2cd6043b1ad811ab215e901b6b5653e08cb3d2fe63d3e3dc57022031c7b3d130f9380ef09581f4f5a15cb6f359a2e0a597146b96c3533a26d6f4cd01483045022100a2faf2ad7e323b2a82e07dc40b6847207ca6ad7b089f2c21dea9a4d37e52d59d02204c9480ce0358eb51d92a4342355a97e272e3cc45f86c612a76a3fe32fc3c4cb401475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3045022100a2faf2ad7e323b2a82e07dc40b6847207ca6ad7b089f2c21dea9a4d37e52d59d02204c9480ce0358eb51d92a4342355a97e272e3cc45f86c612a76a3fe32fc3c4cb4"\n    },\n    {\n        "Name": "commitment tx with five outputs untrimmed (maximum feerate)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "FeePerKw": 2184,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "304402202e03ba1390998b3487e9a7fefcb66814c09abea0ef1bcc915dbaefbcf310569a02206bd10493a105ac69048e9bcedcb8e3301ef81b55018d911a4afd297297f98d30",\n                "ResolutionTxHex": "020000000001015b03043e20eb467029305a22af4c3b915e793743f192c5d225cf1d3c6e8c03010200000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202e03ba1390998b3487e9a7fefcb66814c09abea0ef1bcc915dbaefbcf310569a02206bd10493a105ac69048e9bcedcb8e3301ef81b55018d911a4afd297297f98d308347304402200c3952ca04be0c60dcc0b7873a0829f560607524943554ae4a27d8d967166199022021a68657b88e22f9bf9ac6065be412685aff643d17049f04f2e99e86197dabb101008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000"\n            },\n            {\n                "RemoteSigHex": "304402201f8a6adda2403bc400c919ea69d72d315337291e00d02cde085ea32953dbc50002202d65230da98df7af8ebefd2b60b457d0945232988ee2d7460a94a77d414a9acc",\n                "ResolutionTxHex": "020000000001015b03043e20eb467029305a22af4c3b915e793743f192c5d225cf1d3c6e8c0301030000000001000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402201f8a6adda2403bc400c919ea69d72d315337291e00d02cde085ea32953dbc50002202d65230da98df7af8ebefd2b60b457d0945232988ee2d7460a94a77d414a9acc83483045022100ea69c9273b8914ac62b5b7082d6ac1da2b7b065ebf2ef3cd6403f5305ce3f26802203d98736ea97638895a898dfcc5ee0d0c55eb496b3964df0bb25d223688ea8b8701008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000"\n            },\n            {\n                "RemoteSigHex": "3045022100ea6e4c9b8f56dd9cf5799492a201cdd65b8bc9bc089c3cff34107896ae313f90022034760f7760975cc68e8917a7f62894e25583da7be11af557c4fc402661d0cbf8",\n                "ResolutionTxHex": "020000000001015b03043e20eb467029305a22af4c3b915e793743f192c5d225cf1d3c6e8c0301040000000001000000019b090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100ea6e4c9b8f56dd9cf5799492a201cdd65b8bc9bc089c3cff34107896ae313f90022034760f7760975cc68e8917a7f62894e25583da7be11af557c4fc402661d0cbf8834730440220717012f2f7ef6cac590aaf66c2109132c93ffba245959ac62d82e394ba80191302203f00fd9cb37c92c6b0ad4b33e62c3e55b04e5c2cfa0adcca5a9bc49774eeca8a012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80074a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837eab80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a4f906a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004730440220555c05261f72c5b4702d5c83a608630822b473048724b08640d6e75e345094250220448950b74a96a56963928ba5db8b457661a742c855e69d239b3b6ab73de307a301473044022013d326f80ff7607cf366c823fcbbcb7a2b10322484825f151e6c4c756af24b8f02201ba05b9d8beb7cea2947f9f4d9e03f90435e93db2dd48b32eb9ca3f3dd042c7901475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3044022013d326f80ff7607cf366c823fcbbcb7a2b10322484825f151e6c4c756af24b8f02201ba05b9d8beb7cea2947f9f4d9e03f90435e93db2dd48b32eb9ca3f3dd042c79"\n    },\n    {\n        "Name": "commitment tx with four outputs untrimmed (minimum feerate)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "FeePerKw": 2185,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "304502210094480e38afb41d10fae299224872f19c53abe23c7033a1c0642c48713e7863a10220726dd9456407682667dc4bd9c66975acb3744961770b5002f7eb9c0df9ef2f3e",\n                "ResolutionTxHex": "02000000000101ac13a7715f80b8e52dda43c6929cade5521bdced3a405da02b443f1ffb1e33cc0200000000010000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050048304502210094480e38afb41d10fae299224872f19c53abe23c7033a1c0642c48713e7863a10220726dd9456407682667dc4bd9c66975acb3744961770b5002f7eb9c0df9ef2f3e8347304402203148dac61513dc0361738cba30cb341a1e580f8acd5ab0149bf65bd670688cf002207e5d9a0fcbbea2c263bc714fa9e9c44d7f582ea447f366119fc614a23de32f1f01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000"\n            },\n            {\n                "RemoteSigHex": "304402200dbde868dbc20c6a2433fe8979ba5e3f966b1c2d1aeb615f1c42e9c938b3495402202eec5f663c8b601c2061c1453d35de22597c137d1907a2feaf714d551035cb6e",\n                "ResolutionTxHex": "02000000000101ac13a7715f80b8e52dda43c6929cade5521bdced3a405da02b443f1ffb1e33cc030000000001000000019a090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402200dbde868dbc20c6a2433fe8979ba5e3f966b1c2d1aeb615f1c42e9c938b3495402202eec5f663c8b601c2061c1453d35de22597c137d1907a2feaf714d551035cb6e83483045022100b896bded41d7feac7af25c19e35c53037c53b50e73cfd01eb4ba139c7fdf231602203a3be049d3d89396c4dc766d82ce31e237da8bc3a93e2c7d35992d1932d9cfeb012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80064a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994b80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ac5916a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100cd8479cfe1edb1e5a1d487391e0451a469c7171e51e680183f19eb4321f20e9b02204eab7d5a6384b1b08e03baa6e4d9748dfd2b5ab2bae7e39604a0d0055bbffdd501473044022040f63a16148cf35c8d3d41827f5ae7f7c3746885bb64d4d1b895892a83812b3e02202fcf95c2bf02c466163b3fa3ced6a24926fbb4035095a96842ef516e86ba54c001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3044022040f63a16148cf35c8d3d41827f5ae7f7c3746885bb64d4d1b895892a83812b3e02202fcf95c2bf02c466163b3fa3ced6a24926fbb4035095a96842ef516e86ba54c0"\n    },\n    {\n        "Name": "commitment tx with four outputs untrimmed (maximum feerate)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "FeePerKw": 3686,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "304402202cfe6618926ca9f1574f8c4659b425e9790b4677ba2248d77901290806130ffe02204ab37bb0287abcdb8b750b018d41a09effe37cb65ff801fa70d3f1a416599841",\n                "ResolutionTxHex": "020000000001012c32e55722e4b96324d8e5b398d583a20780b25202816adc32dc3157dee731c90200000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202cfe6618926ca9f1574f8c4659b425e9790b4677ba2248d77901290806130ffe02204ab37bb0287abcdb8b750b018d41a09effe37cb65ff801fa70d3f1a41659984183473044022030b318139715e3b34f19be852cc01c1c0e1599e8b926a73df2bfb70dd186ddee022062a2b7398aed9f563b4014da04a1a99debd0ff663ceece68a547df5982dc2d7201008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000"\n            },\n            {\n                "RemoteSigHex": "30440220687af8544d335376620a6f4b5412bfd0da48de047c1785674f26e669d4a3ff82022058591c1e3a6c50017427d38a8f756eb685bdab88ec73838eed3530048861f9d5",\n                "ResolutionTxHex": "020000000001012c32e55722e4b96324d8e5b398d583a20780b25202816adc32dc3157dee731c90300000000010000000176050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220687af8544d335376620a6f4b5412bfd0da48de047c1785674f26e669d4a3ff82022058591c1e3a6c50017427d38a8f756eb685bdab88ec73838eed3530048861f9d5834730440220109f1a62b5a13d28d5b7634dd7693b1d5994eb404c4bb4a9a80aa540d3984d170220307251107ff8499a23e99abce7dda4f1c707c98abddb9405a83de0081cde8ace012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80064a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994b80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a29896a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100c268496aad5c3f97f25cf41c1ba5483a12982de29b222051b6de3daa2229413b02207f3c82d77a2c14f0096ed9bb4c34649483bb20fa71f819f71af44de6593e8bb2014730440220784485cf7a0ad7979daf2c858ffdaf5298d0020cea7aea466843e7948223bd9902206031b81d25e02a178c64e62f843577fdcdfc7a1decbbfb54cd895de692df85ca01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "30440220784485cf7a0ad7979daf2c858ffdaf5298d0020cea7aea466843e7948223bd9902206031b81d25e02a178c64e62f843577fdcdfc7a1decbbfb54cd895de692df85ca"\n    },\n    {\n        "Name": "commitment tx with three outputs untrimmed (minimum feerate)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "FeePerKw": 3687,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "3045022100b287bb8e079a62dcb3aaa8b6c67c0f434a87ebf64ab0bcfb2fc14b55576b859f02206d37c2eb5fd04cfc9eb0534c76a28a98da251b84a931377cce307af39dfaed74",\n                "ResolutionTxHex": "02000000000101542562b326c08e3a076d9cfca2be175041366591da334d8d513ff1686fd95a600200000000010000000175050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100b287bb8e079a62dcb3aaa8b6c67c0f434a87ebf64ab0bcfb2fc14b55576b859f02206d37c2eb5fd04cfc9eb0534c76a28a98da251b84a931377cce307af39dfaed7483483045022100a497c64faea286ec4221f48628086dc6403fd7b60a23c4176e8ebbca15ae70dc0220754e20e968e96cf6421fd2a672c8c26d3bc6e19218cfc8fc2aa51fce026c14b1012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80054a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994aa28b6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100c970799bcb33f43179eb43b3378a0a61991cf2923f69b36ef12548c3df0e6d500220413dc27d2e39ee583093adfcb7799be680141738babb31cc7b0669a777a31f5d01483045022100ad6c71569856b2d7ff42e838b4abe74a713426b37f22fa667a195a4c88908c6902202b37272b02a42dc6d9f4f82cab3eaf84ac882d9ed762859e1e75455c2c22837701475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3045022100ad6c71569856b2d7ff42e838b4abe74a713426b37f22fa667a195a4c88908c6902202b37272b02a42dc6d9f4f82cab3eaf84ac882d9ed762859e1e75455c2c228377"\n    },\n    {\n        "Name": "commitment tx with three outputs untrimmed (maximum feerate)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "FeePerKw": 4893,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "30450221008db80f8531104820b3e894492b4463f074f965b542e1b5c153ddfb108a5ea642022030b203d857a2b3581c2087a7bf17c95d04fadc1c6cdae88c620477f2dccb1ee4",\n                "ResolutionTxHex": "02000000000101d515a15e9175fd315bb8d4e768f28684801a9e5a9acdfeba34f7b3b3b3a9ba1d0200000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221008db80f8531104820b3e894492b4463f074f965b542e1b5c153ddfb108a5ea642022030b203d857a2b3581c2087a7bf17c95d04fadc1c6cdae88c620477f2dccb1ee483483045022100e5fbae857c47dbfc050a05924bd449fc9804798bd6442002c578437dc34450810220296589bc387645512345299e307116aaac4ce9fc752abcd1936b802d03526312012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80054a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a87856a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004730440220086288faceab47461eb2d808e9e9b0cb3ffc24a03c2f18db7198247d38f10e58022031d1c2782a58c8c6ce187d0019eb47a83babdf3040e2caff299ab48f7e12b1fa01483045022100a8771147109e4d3f44a5976c3c3de98732bbb77308d21444dbe0d76faf06480e02200b4e916e850c3d1f918de87bbbbb07843ffea1d4658dfe060b6f9ccd96d34be801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3045022100a8771147109e4d3f44a5976c3c3de98732bbb77308d21444dbe0d76faf06480e02200b4e916e850c3d1f918de87bbbbb07843ffea1d4658dfe060b6f9ccd96d34be8"\n    },\n    {\n        "Name": "commitment tx with two outputs untrimmed (minimum feerate)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "FeePerKw": 4894,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80044a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ad0886a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221009f16ac85d232e4eddb3fcd750a68ebf0b58e3356eaada45d3513ede7e817bf4c02207c2b043b4e5f971261975406cb955219fa56bffe5d834a833694b5abc1ce4cfd01483045022100e784a66b1588575801e237d35e510fd92a81ae3a4a2a1b90c031ad803d07b3f3022021bc5f16501f167607d63b681442da193eb0a76b4b7fd25c2ed4f8b28fd35b9501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3045022100e784a66b1588575801e237d35e510fd92a81ae3a4a2a1b90c031ad803d07b3f3022021bc5f16501f167607d63b681442da193eb0a76b4b7fd25c2ed4f8b28fd35b95"\n    },\n    {\n        "Name": "commitment tx with one output untrimmed (minimum feerate)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "FeePerKw": 6216010,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80024a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a04004830450221009ad80792e3038fe6968d12ff23e6888a565c3ddd065037f357445f01675d63f3022018384915e5f1f4ae157e15debf4f49b61c8d9d2b073c7d6f97c4a68caa3ed4c1014830450221008fd5dbff02e4b59020d4cd23a3c30d3e287065fda75a0a09b402980adf68ccda022001e0b8b620cd915ddff11f1de32addf23d81d51b90e6841b2cb8dcaf3faa5ecf01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "30450221008fd5dbff02e4b59020d4cd23a3c30d3e287065fda75a0a09b402980adf68ccda022001e0b8b620cd915ddff11f1de32addf23d81d51b90e6841b2cb8dcaf3faa5ecf"\n    },\n    {\n        "Name": "commitment tx with 3 htlc outputs, 2 offered having the same amount and preimage",\n        "LocalBalance": 6987999999,\n        "RemoteBalance": 3000000000,\n        "FeePerKw": 253,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "30450221008c3060a17cb4799bc2290d692c8ae3d4a4ecbc7ed938d91709f7d3f4879987ea02201f32d763f52bee8b3362b2150d66a45c58fbe215160a4c271b4de17658e59d6e",\n                "ResolutionTxHex": "020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c4020000000001000000011e070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221008c3060a17cb4799bc2290d692c8ae3d4a4ecbc7ed938d91709f7d3f4879987ea02201f32d763f52bee8b3362b2150d66a45c58fbe215160a4c271b4de17658e59d6e83473044022045658d7072665bd8721859ea877d91587af138f9d3d6bc29339b972173521bb702205ccba02e9a2abd737af16abcfca3d9fd3fe6e0544e0efafddb634f3e30369c9e012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000"\n            },\n            {\n                "RemoteSigHex": "3044022030fa4ca0a8dfd47112aa04dfa76f5b30d1ec593b5d76d7c0f986603fb61c3a6d02203ae477dfbb5fba5959302faeb04b4e66cef2030e1ac8826e7034865059962b00",\n                "ResolutionTxHex": "020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c403000000000100000001e0120000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022030fa4ca0a8dfd47112aa04dfa76f5b30d1ec593b5d76d7c0f986603fb61c3a6d02203ae477dfbb5fba5959302faeb04b4e66cef2030e1ac8826e7034865059962b0083483045022100a6408b8db488d9f0a3bfd54087e447d19be77e54c849ac388c99b0d68fe90921022023052d488d814ee1c94a27df75aaa9b97a4fd789a5eb1ee989ee2a30663f447f01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6851b27568f9010000"\n            },\n            {\n                "RemoteSigHex": "304402203ba5761a9a145470c62beef6984b7c3d76e9f1ec9f2b69fa8ccc5f47781e25b202205913220be6eb80a436f78d9e1c8c048f41b7490e9f91e862f4a473c9a8cac022",\n                "ResolutionTxHex": "020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c404000000000100000001e0120000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402203ba5761a9a145470c62beef6984b7c3d76e9f1ec9f2b69fa8ccc5f47781e25b202205913220be6eb80a436f78d9e1c8c048f41b7490e9f91e862f4a473c9a8cac0228348304502210091f2bb95774acb4d51986d11c917fa7f51a39fe38b8aa880b430c9e629389ee202201e6bc67849075ec0fc8b5205380069b91097a4ad7a5bc1183384519ba05b3a2401008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6851b27568fa010000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80074a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5e881300000000000022002018e40f9072c44350f134bdc887bab4d9bdfc8aa468a25616c80e21757ba5dac7881300000000000022002018e40f9072c44350f134bdc887bab4d9bdfc8aa468a25616c80e21757ba5dac7c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994aad9c6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100b4014970d9d7962853f3f85196144671d7d5d87426250f0a5fdaf9a55292e92502205360910c9abb397467e19dbd63d081deb4a3240903114c98cec0a23591b79b7601473044022027b38dfb654c34032ffb70bb43022981652fce923cbbe3cbe7394e2ade8b34230220584195b78da6e25c2e8da6b4308d9db25b65b64975db9266163ef592abb7c72501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3044022027b38dfb654c34032ffb70bb43022981652fce923cbbe3cbe7394e2ade8b34230220584195b78da6e25c2e8da6b4308d9db25b65b64975db9266163ef592abb7c725"\n    }\n]\nAppendix G: Commitment and HTLC Transaction Test Vectors (anchors_zero_fee_htlc_tx)\nThe anchor test vectors are based on the test cases as defined in appendix C.\nNote that in appendix C, to_local_msat and to_remote_msat are balances\nbefore subtraction of:\n\nCommit fee (funder only)\nAnchor outputs (funder only)\nIn-flight htlcs\n\n[\n    {\n        "Name": "simple commitment tx with no HTLCs",\n        "LocalBalance": 7000000000,\n        "RemoteBalance": 3000000000,\n        "DustLimitSatoshis": 546,\n        "FeePerKw": 15000,\n        "UseTestHtlcs": false,\n        "HtlcDescs": [],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80044a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a508b6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221008266ac6db5ea71aac3c95d97b0e172ff596844851a3216eb88382a8dddfd33d2022050e240974cfd5d708708b4365574517c18e7ae535ef732a3484d43d0d82be9f701483045022100f89034eba16b2be0e5581f750a0a6309192b75cce0f202f0ee2b4ec0cc394850022076c65dc507fe42276152b7a3d90e961e678adbe966e916ecfe85e64d430e75f301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3045022100f89034eba16b2be0e5581f750a0a6309192b75cce0f202f0ee2b4ec0cc394850022076c65dc507fe42276152b7a3d90e961e678adbe966e916ecfe85e64d430e75f3"\n    },\n    {\n        "Name": "simple commitment tx with no HTLCs and single anchor",\n        "LocalBalance": 10000000000,\n        "RemoteBalance": 0,\n        "DustLimitSatoshis": 546,\n        "FeePerKw": 15000,\n        "UseTestHtlcs": false,\n        "HtlcDescs": [],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80024a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f10529800000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022007cf6b405e9c9b4f527b0ecad9d8bb661fabb8b12abf7d1c0b3ad1855db3ed490220616d5c1eeadccc63bd775a131149455d62d95a42c2a1b01cc7821fc42dce7778014730440220655bf909fb6fa81d086f1336ac72c97906dce29d1b166e305c99152d810e26e1022051f577faa46412c46707aaac46b65d50053550a66334e00a44af2706f27a865801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "30440220655bf909fb6fa81d086f1336ac72c97906dce29d1b166e305c99152d810e26e1022051f577faa46412c46707aaac46b65d50053550a66334e00a44af2706f27a8658"\n    },\n    {\n        "Name": "commitment tx with seven outputs untrimmed",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "DustLimitSatoshis": 546,\n        "FeePerKw": 644,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "30440220746dc89a593e1b50915db63359b50c3c404f8324f78075c87708c866ccefda2502202a11062012dc8607b17e8c46ea4eefdfcc6b89a35440de99432ba12788d7bb17",\n                "ResolutionTxHex": "02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a02000000000100000001e8030000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220746dc89a593e1b50915db63359b50c3c404f8324f78075c87708c866ccefda2502202a11062012dc8607b17e8c46ea4eefdfcc6b89a35440de99432ba12788d7bb1783473044022036f77f88b49bd03dc16d3a015efcc7acffc2a93b213324035d77a716f79013ff02203c218eb882a40402a8bb05dbb751a442345a4e56307be76b214b6d4db9ed3c92012000000000000000000000000000000000000000000000000000000000000000008d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6851b2756800000000"\n            },\n            {\n                "RemoteSigHex": "3045022100a847bc3b8cf2441013725ae32dc589c419835d069afd6d7f3d9834d8be7cea6e02204ce9d35ec7f0788da80e4d62e810c4ccd13617e58fa10832e38fb7ae87bdf338",\n                "ResolutionTxHex": "02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a03000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100a847bc3b8cf2441013725ae32dc589c419835d069afd6d7f3d9834d8be7cea6e02204ce9d35ec7f0788da80e4d62e810c4ccd13617e58fa10832e38fb7ae87bdf33883473044022026739b1adbfa34c485bf0e5a19e0cf7532f64545bcc5c95b95643ccc2d351e1902201743bb1b34f00e031cc15f6eff0f8ab764508d2681ff965ba62e76e540bca1e801008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000"\n            },\n            {\n                "RemoteSigHex": "3044022035977f2aa6d6ae12f1dae3366440faa17558e9c88c3188bfc8df7e276c6c65410220659f1f9070c725d9d46e43b99a36fc6d711d36069704add2d57fc1fa2818cf12",\n                "ResolutionTxHex": "02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a04000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022035977f2aa6d6ae12f1dae3366440faa17558e9c88c3188bfc8df7e276c6c65410220659f1f9070c725d9d46e43b99a36fc6d711d36069704add2d57fc1fa2818cf12834730440220191ba44e57b1601a59d99f85971d4801b286d428de275487c87ceeb8df1a4811022002215875d92833df0c9615c9096cf97152f87139ed9f82718bbb5b8b3d312524012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000"\n            },\n            {\n                "RemoteSigHex": "3044022002f3ff9a31270092c214d3d5b8b4f826599404bba64b87f7536ef6324d41551b022079dc4cb25f7ecd84b49f5cce03eae7e2655b59f39d543765daef0d4f11c93fa2",\n                "ResolutionTxHex": "02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a05000000000100000001b80b0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022002f3ff9a31270092c214d3d5b8b4f826599404bba64b87f7536ef6324d41551b022079dc4cb25f7ecd84b49f5cce03eae7e2655b59f39d543765daef0d4f11c93fa283483045022100f03047e38bc0aae2d80d53424b8c1d1b8139120e2bf09ad31a2803978745e6e102205b74c0eef0b472710b98c77e619ee9d0cc47a9dd786f4f214a564f44d79f9b9a01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000"\n            },\n            {\n                "RemoteSigHex": "30440220547937564288f64fb3e3c945a1348b912471f0c1c4cc7dc8ceca15a4cbd299b6022053c4f8e30832b13dfbe31e4091e313428625e0b5ac61eecba93f8f11c1e26225",\n                "ResolutionTxHex": "02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a06000000000100000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220547937564288f64fb3e3c945a1348b912471f0c1c4cc7dc8ceca15a4cbd299b6022053c4f8e30832b13dfbe31e4091e313428625e0b5ac61eecba93f8f11c1e2622583473044022022604660234aef9bd21284598ec50f070ac82a3a0152e0af5e98a02cd6e8976f022042b0b9112ee00806b856dff6de52a82c98b036a4fe14bb5fd2926725e2fc8191012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80094a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994e80300000000000022002010f88bf09e56f14fb4543fd26e47b0db50ea5de9cf3fc46434792471082621aed0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a4f996a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100ef82a405364bfc4007e63a7cc82925a513d79065bdbc216d60b6a4223a323f8a02200716730b8561f3c6d362eaf47f202e99fb30d0557b61b92b5f9134f8e2de368101483045022100e0106830467a558c07544a3de7715610c1147062e7d091deeebe8b5c661cda9402202ad049c1a6d04834317a78483f723c205c9f638d17222aafc620800cc1b6ae3501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3045022100e0106830467a558c07544a3de7715610c1147062e7d091deeebe8b5c661cda9402202ad049c1a6d04834317a78483f723c205c9f638d17222aafc620800cc1b6ae35"\n    },\n    {\n        "Name": "commitment tx with six outputs untrimmed (minimum dust limit)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "DustLimitSatoshis": 1001,\n        "FeePerKw": 645,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "3045022100e04d160a326432659fe9fb127304c1d348dfeaba840081bdc57d8efd902a48d8022008a824e7cf5492b97e4d9e03c06a09f822775a44f6b5b2533a2088904abfc282",\n                "ResolutionTxHex": "02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320002000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e04d160a326432659fe9fb127304c1d348dfeaba840081bdc57d8efd902a48d8022008a824e7cf5492b97e4d9e03c06a09f822775a44f6b5b2533a2088904abfc28283483045022100b7c49846466b13b190ff739bbe3005c105482fc55539e55b1c561f76b6982b6c02200e5c35808619cf543c8405cff9fedd25f333a4a2f6f6d5e8af8150090c40ef0901008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000"\n            },\n            {\n                "RemoteSigHex": "3045022100fbdc3c367ce3bf30796025cc590ee1f2ce0e72ae1ac19f5986d6d0a4fc76211f02207e45ae9267e8e820d188569604f71d1abd11bd385d58853dd7dc034cdb3e9a6e",\n                "ResolutionTxHex": "02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320003000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100fbdc3c367ce3bf30796025cc590ee1f2ce0e72ae1ac19f5986d6d0a4fc76211f02207e45ae9267e8e820d188569604f71d1abd11bd385d58853dd7dc034cdb3e9a6e83483045022100d29330f24db213b262068706099b39c15fa7e070c3fcdf8836c09723fc4d365602203ce57d01e9f28601e461a0b5c4a50119b270bde8b70148d133a6849c70b115ac012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000"\n            },\n            {\n                "RemoteSigHex": "3044022066c5ef625cee3ddd2bc7b6bfb354b5834cf1cc6d52dd972fb41b7b225437ae4a022066cb85647df65c6b87a54e416dcdcca778a776c36a9643d2b5dc793c9b29f4c1",\n                "ResolutionTxHex": "02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320004000000000100000001b80b0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022066c5ef625cee3ddd2bc7b6bfb354b5834cf1cc6d52dd972fb41b7b225437ae4a022066cb85647df65c6b87a54e416dcdcca778a776c36a9643d2b5dc793c9b29f4c18347304402202d4ce515cd9000ec37575972d70b8d24f73909fb7012e8ebd8c2066ef6fe187902202830b53e64ea565fecd0f398100691da6bb2a5cf9bb0d1926f1d71d05828a11e01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000"\n            },\n            {\n                "RemoteSigHex": "3044022022c7e11595c53ee89a57ca76baf0aed730da035952d6ab3fe6459f5eff3b337a022075e10cc5f5fd724a35ce4087a5d03cd616698626c69814032132b50bb97dc615",\n                "ResolutionTxHex": "02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320005000000000100000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022022c7e11595c53ee89a57ca76baf0aed730da035952d6ab3fe6459f5eff3b337a022075e10cc5f5fd724a35ce4087a5d03cd616698626c69814032132b50bb97dc61583483045022100b20cd63e0587d1711beaebda4730775c4ac8b8b2ec78fe18a0c44c3f168c25230220079abb7fc4924e2fca5950842e5b9e416735585026914570078c4ef62f286226012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80084a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994abc996a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100d57697c707b6f6d053febf24b98e8989f186eea42e37e9e91663ec2c70bb8f70022079b0715a472118f262f43016a674f59c015d9cafccec885968e76d9d9c5d005101473044022025d97466c8049e955a5afce28e322f4b34d2561118e52332fb400f9b908cc0a402205dc6fba3a0d67ee142c428c535580cd1f2ff42e2f89b47e0c8a01847caffc31201475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3044022025d97466c8049e955a5afce28e322f4b34d2561118e52332fb400f9b908cc0a402205dc6fba3a0d67ee142c428c535580cd1f2ff42e2f89b47e0c8a01847caffc312"\n    },\n    {\n        "Name": "commitment tx with four outputs untrimmed (minimum dust limit)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "DustLimitSatoshis": 2001,\n        "FeePerKw": 2185,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "304402206870514a72ad6e723ff7f1e0370d7a33c1cd2a0b9272674143ebaf6a1d02dee102205bd953c34faf5e7322e9a1c0103581cb090280fda4f1039ee8552668afa90ebb",\n                "ResolutionTxHex": "02000000000101ac13a7715f80b8e52dda43c6929cade5521bdced3a405da02b443f1ffb1e33cc02000000000100000001b80b0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402206870514a72ad6e723ff7f1e0370d7a33c1cd2a0b9272674143ebaf6a1d02dee102205bd953c34faf5e7322e9a1c0103581cb090280fda4f1039ee8552668afa90ebb834730440220669de9ca7910eff65a7773ebd14a9fc371fe88cde5b8e2a81609d85c87ac939b02201ac29472fa4067322e92d75b624942d60be5050139b20bb363db75be79eb946f01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000"\n            },\n            {\n                "RemoteSigHex": "3045022100949e8dd938da56445b1cdfdebe1b7efea086edd05d89910d205a1e2e033ce47102202cbd68b5262ab144d9ec12653f87dfb0bb6bd05d1f58ae1e523f028eaefd7271",\n                "ResolutionTxHex": "02000000000101ac13a7715f80b8e52dda43c6929cade5521bdced3a405da02b443f1ffb1e33cc03000000000100000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100949e8dd938da56445b1cdfdebe1b7efea086edd05d89910d205a1e2e033ce47102202cbd68b5262ab144d9ec12653f87dfb0bb6bd05d1f58ae1e523f028eaefd727183483045022100e3104ed8b239f8019e5f0a1a73d7782a94a8c36e7984f476c3a0b3cb0e62e27902207e3d52884600985f8a2098e53a5c30dd6a5e857733acfaa07ab2162421ed2688012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80064a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994b80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ac5916a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100cd8479cfe1edb1e5a1d487391e0451a469c7171e51e680183f19eb4321f20e9b02204eab7d5a6384b1b08e03baa6e4d9748dfd2b5ab2bae7e39604a0d0055bbffdd501473044022040f63a16148cf35c8d3d41827f5ae7f7c3746885bb64d4d1b895892a83812b3e02202fcf95c2bf02c466163b3fa3ced6a24926fbb4035095a96842ef516e86ba54c001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3044022040f63a16148cf35c8d3d41827f5ae7f7c3746885bb64d4d1b895892a83812b3e02202fcf95c2bf02c466163b3fa3ced6a24926fbb4035095a96842ef516e86ba54c0"\n    },\n    {\n        "Name": "commitment tx with three outputs untrimmed (minimum dust limit)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "DustLimitSatoshis": 3001,\n        "FeePerKw": 3687,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "3044022017b558a3cf5f0cb94269e2e927b29ed22bd2416abb8a7ce6de4d1256f359b93602202e9ca2b1a23ea3e69f433c704e327739e219804b8c188b1d52f74fd5a9de954c",\n                "ResolutionTxHex": "02000000000101542562b326c08e3a076d9cfca2be175041366591da334d8d513ff1686fd95a6002000000000100000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022017b558a3cf5f0cb94269e2e927b29ed22bd2416abb8a7ce6de4d1256f359b93602202e9ca2b1a23ea3e69f433c704e327739e219804b8c188b1d52f74fd5a9de954c83483045022100af7a8b7c7ff2080c68995254cb66d64d9954edcc5baac3bb4f27ed2d29aaa6120220421c27da7a60574a9263f271e0f3bd34594ec6011095190022b3b54596ea03de012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80054a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994aa28b6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100c970799bcb33f43179eb43b3378a0a61991cf2923f69b36ef12548c3df0e6d500220413dc27d2e39ee583093adfcb7799be680141738babb31cc7b0669a777a31f5d01483045022100ad6c71569856b2d7ff42e838b4abe74a713426b37f22fa667a195a4c88908c6902202b37272b02a42dc6d9f4f82cab3eaf84ac882d9ed762859e1e75455c2c22837701475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3045022100ad6c71569856b2d7ff42e838b4abe74a713426b37f22fa667a195a4c88908c6902202b37272b02a42dc6d9f4f82cab3eaf84ac882d9ed762859e1e75455c2c228377"\n    },\n    {\n        "Name": "commitment tx with two outputs untrimmed (minimum dust limit)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "DustLimitSatoshis": 4001,\n        "FeePerKw": 4894,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80044a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ad0886a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221009f16ac85d232e4eddb3fcd750a68ebf0b58e3356eaada45d3513ede7e817bf4c02207c2b043b4e5f971261975406cb955219fa56bffe5d834a833694b5abc1ce4cfd01483045022100e784a66b1588575801e237d35e510fd92a81ae3a4a2a1b90c031ad803d07b3f3022021bc5f16501f167607d63b681442da193eb0a76b4b7fd25c2ed4f8b28fd35b9501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3045022100e784a66b1588575801e237d35e510fd92a81ae3a4a2a1b90c031ad803d07b3f3022021bc5f16501f167607d63b681442da193eb0a76b4b7fd25c2ed4f8b28fd35b95"\n    },\n    {\n        "Name": "commitment tx with one output untrimmed (minimum dust limit)",\n        "LocalBalance": 6988000000,\n        "RemoteBalance": 3000000000,\n        "DustLimitSatoshis": 4001,\n        "FeePerKw": 6216010,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80024a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a04004830450221009ad80792e3038fe6968d12ff23e6888a565c3ddd065037f357445f01675d63f3022018384915e5f1f4ae157e15debf4f49b61c8d9d2b073c7d6f97c4a68caa3ed4c1014830450221008fd5dbff02e4b59020d4cd23a3c30d3e287065fda75a0a09b402980adf68ccda022001e0b8b620cd915ddff11f1de32addf23d81d51b90e6841b2cb8dcaf3faa5ecf01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "30450221008fd5dbff02e4b59020d4cd23a3c30d3e287065fda75a0a09b402980adf68ccda022001e0b8b620cd915ddff11f1de32addf23d81d51b90e6841b2cb8dcaf3faa5ecf"\n    },\n    {\n        "Name": "commitment tx with 3 htlc outputs, 2 offered having the same amount and preimage",\n        "LocalBalance": 6987999999,\n        "RemoteBalance": 3000000000,\n        "DustLimitSatoshis": 546,\n        "FeePerKw": 253,\n        "UseTestHtlcs": true,\n        "HtlcDescs": [\n            {\n                "RemoteSigHex": "30440220078fe5343dab88c348a3a8a9c1a9293259dbf35507ae971702cc39dd623ea9af022011ed0c0f35243cd0bb4d9ca3c772379b2b5f4af93140e9fdc5600dfec1cdb0c2",\n                "ResolutionTxHex": "020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c402000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220078fe5343dab88c348a3a8a9c1a9293259dbf35507ae971702cc39dd623ea9af022011ed0c0f35243cd0bb4d9ca3c772379b2b5f4af93140e9fdc5600dfec1cdb0c28347304402205df665e2908c7690d2d33eb70e6e119958c28febe141a94ed0dd9a55ce7c8cfc0220364d02663a5d019af35c5cd5fda9465d985d85bbd12db207738d61163449a424012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000"\n            },\n            {\n                "RemoteSigHex": "304402202df6bf0f98a42cfd0172a16bded7d1b16c14f5f42ba23f5c54648c14b647531302200fe1508626817f23925bb56951d5e4b2654c751743ab6db48a6cce7dda17c01c",\n                "ResolutionTxHex": "020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c40300000000010000000188130000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202df6bf0f98a42cfd0172a16bded7d1b16c14f5f42ba23f5c54648c14b647531302200fe1508626817f23925bb56951d5e4b2654c751743ab6db48a6cce7dda17c01c8347304402203f99ec05cdd89558a23683b471c1dcce8f6a92295f1fff3b0b5d21be4d4f97ea022019d29070690fc2c126fe27cc4ab2f503f289d362721b2efa7418e7fddb939a5b01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6851b27568f9010000"\n            },\n            {\n                "RemoteSigHex": "3045022100bd206b420c495f3aa714d3ea4766cbe95441deacb5d2f737f1913349aee7c2ae02200249d2c950dd3b15326bf378ae5d2b871d33d6737f5d70735f3de8383140f2a1",\n                "ResolutionTxHex": "020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c40400000000010000000188130000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100bd206b420c495f3aa714d3ea4766cbe95441deacb5d2f737f1913349aee7c2ae02200249d2c950dd3b15326bf378ae5d2b871d33d6737f5d70735f3de8383140f2a183483045022100f2cd35e385b9b7e15b92a5d78d120b6b2c5af4e974bc01e884c5facb3bb5966c0220706e0506477ce809a40022d6de8e041e9ef13136c45abee9c36f58a01fdb188b01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6851b27568fa010000"\n            }\n        ],\n        "ExpectedCommitmentTxHex": "02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80074a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5e881300000000000022002018e40f9072c44350f134bdc887bab4d9bdfc8aa468a25616c80e21757ba5dac7881300000000000022002018e40f9072c44350f134bdc887bab4d9bdfc8aa468a25616c80e21757ba5dac7c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994aad9c6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100b4014970d9d7962853f3f85196144671d7d5d87426250f0a5fdaf9a55292e92502205360910c9abb397467e19dbd63d081deb4a3240903114c98cec0a23591b79b7601473044022027b38dfb654c34032ffb70bb43022981652fce923cbbe3cbe7394e2ade8b34230220584195b78da6e25c2e8da6b4308d9db25b65b64975db9266163ef592abb7c72501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220",\n        "RemoteSigHex": "3044022027b38dfb654c34032ffb70bb43022981652fce923cbbe3cbe7394e2ade8b34230220584195b78da6e25c2e8da6b4308d9db25b65b64975db9266163ef592abb7c725"\n    }\n]\nReferences\nAuthors\n[ FIXME: ]\n\n\nThis work is licensed under a Creative Commons Attribution 4.0 International License.\n', 'body_type': 'markdown', 'authors': ['Spec'], 'domain': 'https://github.com', 'created_at': '2023-05-11T00:00:00', 'url': 'https://github.com/lightning/bolts/blob/master/03-transactions.md'}}, {'_index': 'bitcoin-search-scrapy-23', '_id': 'oDfTBokBCZBMBhppBdUI', '_score': 1.0, '_ignored': ['body.keyword', 'body_formatted.keyword'], '_source': {'id': 'grokkingbtc-602d8026-628a-4321-9b67-f8b5dc824b47', 'title': '[Grokking Bitcoin] Wallets', 'body_formatted': '<article><div>\n<h2><a><svg><path></path></svg></a>Wallets</h2>\n<div>\n<div>\n<p>This chapter covers</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Automating payments</p>\n</li>\n<li>\n<p>Creating and managing keys</p>\n</li>\n<li>\n<p>Making simple, secure key backups</p>\n</li>\n</ul>\n</div>\n<div>\n<p>So far, we’ve done nothing to improve the user experience for the\ncompany’s coworkers using the cookie token spreadsheet. The situation\nhas become worse for users because emails to Lisa now need more\ninformation than in the beginning. On top of this, users should take\nextra steps to use multiple addresses to preserve their privacy.</p>\n</div>\n<div>\n<p>In this chapter, we’ll build a mobile app, called a <em>wallet</em>\n(<a>Bitcoin wallets</a>), that handles many of the common tasks users want to\nperform. This wallet will create new addresses, store private keys,\nsimplify how addresses are transferred between users, and automate the\npayment process.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 1. Bitcoin wallets</div>\n</div>\n<div>\n<p>We’ll discuss different approaches to wallet backups. We’ll also look\nat a new way to generate keys, called <em>hierarchical deterministic\nwallets</em> (HD wallets), so backups become dead simple; you only need to\nback up a single random number, called a <em>seed</em>, once and\nfor all. We’ll finish the chapter with an optional deep dive into the\nmath behind public key derivation.</p>\n</div>\n<div>\n<p>This chapter won’t change anything regarding Lisa’s work or the\nspreadsheet. We focus only on users here.</p>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>First wallet version</h3>\n<div>\n<div>\n<div>Bitcoin wallets</div>\n<div>\n<p>Several different wallets are available for Bitcoin. Some popular ones are</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Bitcoin Core</p>\n</li>\n<li>\n<p>Electrum</p>\n</li>\n<li>\n<p>GreenBits</p>\n</li>\n<li>\n<p>BRD (Bread)</p>\n</li>\n</ul>\n</div>\n<div>\n<p>See <a>[web-bitcoin-wallets]</a> for a comprehensive list.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Among you and your coworkers, a group of software developers builds a\nmobile app called a <em>wallet</em> to simplify common tasks for themselves\nand other users. The group identifies the following tasks as the most\ncommon:</p>\n</div>\n<div>\n<dl>\n<dt>Create new addresses</dt>\n<dd>\n<p>Users must create new cookie token addresses\nevery now and then. They might want to use different addresses for\ndifferent purposes or even different addresses for all payments for\nprivacy and security reasons.</p>\n</dd>\n<dt>Manage private keys</dt>\n<dd>\n<p>For each address created, the wallet needs to\nstore and manage the corresponding private key. Keeping private keys\nsafe from intruders is a delicate task.</p>\n</dd>\n<dt>Transfer payment details from payee to payer</dt>\n<dd>\n<p>When John wants to buy\na cookie, he needs to get the cafe’s address and the payment amount into\nhis app. Writing it by hand is cumbersome and error-prone, so it would\nbe nice if John could scan the details with his camera instead.</p>\n</dd>\n<dt>Make a payment</dt>\n<dd>\n<p>The app should be able to send an email to Lisa with\nthe digitally signed payment details.</p>\n</dd>\n<dt>Keep track of funds</dt>\n<dd>\n<p>Users want to know how many cookies they can\nafford. The app should display the total number of cookie tokens a user\nhas.</p>\n</dd>\n<dt>Back up private keys</dt>\n<dd>\n<p>When private keys are created in the app, they\nonly exist in the app. If the mobile phone is lost or broken, the\nprivate keys are gone. You know by now what happens when you lose your\nkeys, don’t you? You need a backup facility for private keys.</p>\n</dd>\n</dl>\n</div>\n<div>\n<p>The development team builds an initial version of the app and calls it\nthe wallet. The term <em>wallet</em> isn’t perfect because the app doesn’t\nreally contain money. It contains the keys needed to spend money. The\nactual money is stored in the spreadsheet. The app is more akin to a\nphysical keyring; but the term <em>wallet</em> is widely used in the Bitcoin\nworld for all things that store private keys, so we should get over it\nand move on. Let’s go through this wallet’s features.</p>\n</div>\n<div>\n<p>Suppose, once again, that John wants to buy a cookie in the cafe\n(<a>John buys a cookie using the wallet app. The cafe generates a key and displays to John a QR code with payment details. John scans the payment details and taps OK to approve the payment. John’s wallet sends an email to Lisa.</a>). Both John and the cafe are using this new app.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 2. John buys a cookie using the wallet app. The cafe generates a key and displays to John a QR code with payment details. John scans the payment details and taps OK to approve the payment. John’s wallet sends an email to Lisa.</div>\n</div>\n<div>\n<p>The process goes through several steps:</p>\n</div>\n<div>\n<div>\n<div>QR codes</div>\n<div>\n<p>Quick response (QR) codes are a way to make text scan-able. This QR code\nsays “Hello”:</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<ol>\n<li>\n<p>The cafe asks its wallet to create a new address and request 10 CT\nto that address. This new address and the amount are displayed on the\nscreen as a QR code. The QR code contains information on how much to\npay, so John doesn’t have to type that in manually.</p>\n</li>\n<li>\n<p>John points his phone’s camera at the QR code to scan the payment\ndetails. It scans the <em>payment URI</em> (uniform resource identifier, a\ngeneral specification on how to identify stuff; a web URL is an\nexample of a URI):</p>\n<div>\n<div>\n<pre>ct:19UzNFW4Fq8wm8mtWmoPZAzE3tcB9tZVtN?amount=10</pre>\n</div>\n</div>\n</li>\n</ol>\n</div>\n<div>\n<p>This tells John’s phone to launch the cookie token wallet (<code>ct:</code>) and\npay 10 (<code>amount=10</code>) cookie tokens to the address\n<code>19UzNFW4Fq8wm8mtWmoPZAzE3tcB9tZVtN</code>.</p>\n</div>\n<div>\n<ol>\n<li>\n<p>John’s wallet displays the payment details to John, who checks that\nthey’re reasonable and clicks OK.</p>\n</li>\n</ol>\n</div>\n<div>\n<div>\n<div>BIP21</div>\n<div>\n<p>BIPs (Bitcoin Improvement Proposals) are used to communicate ideas\namong developers. Some BIPs are adopted in Bitcoin software projects;\nothers aren’t. All BIPs are available at <a>[web-bips]</a>.</p>\n</div>\n<div>\n<p>Bitcoin adopted BIP21 as a way to transfer payment details from one\nwallet to another using a URI. Bitcoin URIs start with <code>bitcoin:</code>\ninstead of <code>ct:</code>.</p>\n</div>\n</div>\n</div>\n<div>\n<ol>\n<li>\n<p>John’s wallet creates an email to Lisa that looks the same as\nbefore.  The wallet automatically selects an address to send from and\nsigns the message with the correct private key. On Lisa’s side,\nnothing has changed. She verifies and executes the payment exactly as\nbefore.</p>\n</li>\n</ol>\n</div>\n<div>\n<p>Let’s take a closer look at what John’s wallet does in step 4\n(<a>John has just clicked OK in his wallet to approve the payment. The wallet takes care of the rest. It selects a key with enough funds and signs a message to Lisa. It then automatically emails the signed message to Lisa.</a>). The wallet does the same thing a user would do manually\nin the earlier examples.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 3. John has just clicked OK in his wallet to approve the payment. The wallet takes care of the rest. It selects a key with enough funds and signs a message to Lisa. It then automatically emails the signed message to Lisa.</div>\n</div>\n<div>\n<p>Notice that the wallet manages three key pairs: two with funds and one\nwith no funds. With this new wallet, users can have as many addresses\nas they want, which is good for privacy. The wallet will keep track of\nthem for the user.</p>\n</div>\n<div>\n<p>The cafe’s wallet, as well as John’s wallet, will check the spreadsheet\nevery now and then to see if there are any new payments concerning any\nof the wallet’s keys, as a sender, a recipient, or both (<a>John’s and the cafe’s wallets check the spreadsheet every few seconds. If a new payment, either incoming or outgoing, is found, the wallet updates the balance of the concerned keys and notifies its user.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 4. John’s and the cafe’s wallets check the spreadsheet every few seconds. If a new payment, either incoming or outgoing, is found, the wallet updates the balance of the concerned keys and notifies its user.</div>\n</div>\n<div>\n<div>\n<div>Unconfirmed transactions</div>\n<div>\n<p><em>Unconfirmed</em> means a transaction is created and sent to the Bitcoin\nnetwork, but it isn’t yet part of the Bitcoin blockchain. You shouldn’t\ntrust a payment until it’s part of the blockchain. The same goes for\ncookie token payments—don’t trust payments that aren’t in the\nspreadsheet.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Even though John knows about the payment before Lisa confirms it in\nthe spreadsheet, his wallet won’t update the balance until it’s\nconfirmed.  Why? Lisa might not approve the payment. Maybe the payment\nbecame corrupted during transfer, or the email ended up in Lisa’s spam\nfolder, so she doesn’t see it.</p>\n</div>\n<div>\n<p>If the wallet updates the balance without first seeing it in the\nspreadsheet, it could give false information to John. The wallet\ncould, of course, be kind enough to inform John that a payment is\npending confirmation.</p>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Private key backups</h3>\n<div>\n<p>The development team creates a feature to back up the wallet’s private\nkeys. The idea is that the wallet creates a text file, the backup file,\nwith all private keys in it and sends this file to an email address the\nuser chooses.</p>\n</div>\n<div>\n<div>\n<div>Why back up?</div>\n<div>\n<p>Your keys hold your money. If you lose your keys, you lose your\nmoney. A proper backup is <em>not</em> optional. You must take immediate,\nactive steps to make sure your keys are backed up; otherwise you will\nsooner or later lose your money.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Imagine that John wants to back up his private keys. The wallet collects\nall the keys it has ever created and writes them into a text file\n(<a>John backs up his private keys. They’re sent in a text file to his email address.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 5. John backs up his private keys. They’re sent in a text file to his email address.</div>\n</div>\n<div>\n<p>The text file is emailed to John’s email address. Can you see any\nproblems with this? Yes, the biggest problem is that the keys have\nleft the privacy of the wallet application and are being sent into the\nwild.  Anyone with access to the email server or any other systems\ninvolved might be able to get the private keys without John noticing.</p>\n</div>\n<div>\n<div>\n<div>Problems</div>\n<div>\n<ul>\n<li>\n<p>Risk of theft</p>\n</li>\n<li>\n<p>Excessive backups</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div>\n<p>But another problem exists. As soon as John creates a new address\nafter the backup is made, this new address isn’t backed up. John must\nmake a new backup that includes the new key. For every new key, he\nmust make a new backup. Doing backups for every address becomes\ntiresome for the user.</p>\n</div>\n<div>\n<p>Let’s look at a few simple solutions to these two problems:</p>\n</div>\n<div>\n<ol>\n<li>\n<p>Automatically send a backup when an address is created. This\nincreases the risk of theft because you send more backups.</p>\n</li>\n<li>\n<p>Pre-create 100 addresses, and make a backup of them. Repeat when\nthe first 100 addresses are used. This also increases the risk of\ntheft, but not as much as solution 1.</p>\n</li>\n<li>\n<p>Encrypt the backup with a password. This will secure the backed-up\nkeys from theft.</p>\n</li>\n</ol>\n</div>\n<div>\n<p>A combination of solutions 2 and 3 seems like a good strategy; you\nseldom need to do a backup, and the backups are secured by a strong\npassword.</p>\n</div>\n<div>\n<p>The process is similar to the previous process, but this time John\nenters a password that’s used to encrypt the private keys\n(<a>John backs up his private keys. They’re sent in a file encrypted with a password that John enters into his phone.</a>).  If John loses his phone, he needs the password and the\nbackup file to restore his private keys.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 6. John backs up his private keys. They’re sent in a file encrypted with a password that John enters into his phone.</div>\n</div>\n<div>\n<p>If John loses his phone, he can easily install the wallet app on\nanother phone. John sends the backup file to the app and enters his\npassword; the keys are decrypted from the backup file and added to his\nwallet app.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>A few words on password strength</h4>\n<div>\n<p>A password’s strength is measured in <em>entropy</em>. The higher the\nentropy, the harder it is to guess the password. The word <em>entropy</em>,\nas used in information security, comes from thermodynamics and means\ndisorder or uncertainty. Suppose you construct a password of 8\ncharacters from among the following 64 characters:</p>\n</div>\n<div>\n<div>\n<pre>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</pre>\n</div>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Each character in the password would then represent 6 bits of entropy\nbecause there are 64 = 2<sup>6</sup> possible characters. If you select the 8\ncharacters randomly (no cherry-picking, please!), say <code>E3NrkbA7</code>, the\neight-character password will have 6 × 8 = 48 bits of entropy. This is\nequivalent in strength to 48 coin flips.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Suppose instead that you select random words from a dictionary of\n2<sup>11</sup>= 2,048 words. How many words do you need to use to beat the\n48-bit entropy of your eight-character password? Four words wouldn’t\nbe enough because 4 × 11 = 44 bits of entropy. But five words\ncorresponds to 55 bits of entropy, which beats the password’s entropy.</p>\n</div>\n<div>\n<p>A password’s real entropy also depends on what an attacker knows about\nthe password. For example, suppose an attacker, Mallory, steals John’s\nencrypted backup file and tries to perform a brute-force attack\non it. A <em>brute-force</em> attack means the attacker makes repeated\npassword guesses, over and over, until they find the correct\npassword. If Mallory knows the password’s length is exactly 8 and the\ncharacters are chosen from the 64 characters mentioned, the entropy is\n48 bits. If she happens to know that the second character is <code>3</code>, the\nentropy drops to 6 × 7 = 42 bits. On the other hand, if Mallory\ndoesn’t know how many characters the password has, it will be harder\nfor her, meaning the entropy will be higher.</p>\n</div>\n<div>\n<p>This is true only if password selection is truly random. If John uses\ncherry-picking to select the password <code>j0Hn4321</code>, the entropy\ndecreases dramatically. Typical password brute-force attack programs\nfirst try a lot of known words and names in different variations\nbefore trying more “random-looking” passwords. John is a well-known\nname, so an attacker will try a lot of different variations of that\nname as well as many other names and words. For example:</p>\n</div>\n<div>\n<div>\n<pre>butter122 … waLk129 … go0die muh4mm@d\njohn John JOhn JOHn JOHN j0hn j0Hn\njOhn jOHn jOHN … john1 …\n… john12 J0hn12 … j0Hn321 …\nj0Hn4321</pre>\n</div>\n</div>\n<div>\n<p>Bingo! Suppose there are 1,000,000 common words and names, and each word\ncan come in 100,000 variations, on average. That’s 100 billion different\npasswords to test, which corresponds to about 37 bits of entropy; 100\nbillion tries will take a high-end desktop computer a few days to\nperform. Let’s say, for simplicity, that it takes one day. If John uses\na truly random password, the entropy for the attacker is around 48 bits.\nIt would take around 2,000 days, or about 5.5 years, to crack the\npassword.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Problems with password-encrypted backups</h4>\n<div>\n<p>The process for password-encrypted backups works pretty well, but it\nalso introduces new problems:</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<dl>\n<dt>More things to secure</dt>\n<dd>\n<p>John now needs to keep track of two things: a\nbackup file and a password. In the first version, only a backup file was\nneeded.</p>\n</dd>\n</dl>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<dl>\n<dt>Forgotten password</dt>\n<dd>\n<p>Passwords that are rarely used, as is the case\nwith backup passwords, will eventually be forgotten. You can write them\ndown on paper and store them in a safe place to mitigate this issue. You\ncan also store them using password-manager software, such as LastPass or\nKeePass.</p>\n</dd>\n</dl>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<dl>\n<dt>Technology advancements</dt>\n<dd>\n<p>As time passes, new, more advanced hardware\nand software is built that makes password cracking faster. If your\neight-character password was safe five years ago, it’s not good enough\ntoday. Passwords need more entropy as technology improves. You can\nre-encrypt your backup files every two years with a stronger password,\nbut that’s a complicated process that few users will manage.</p>\n</dd>\n</dl>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<dl>\n<dt>Randomness is hard</dt>\n<dd>\n<p>Coming up with random passwords is really hard.\nWhen the app asks John for a password, he needs to produce one on the\nspot. He doesn’t have time to flip a coin 48 times to produce a good\npassword. He will most likely make up something with far less entropy.\nOne way to deal with this is to have the wallet give John a generated\npassword. But this password is likely harder to remember than a\nself-invented password, which will increase the likelihood of a\nforgotten password.</p>\n</dd>\n</dl>\n</div>\n<div>\n<p>It seems you haven’t yet come up with a good way of dealing with\nbackups. Let’s not settle for this half-bad solution—there are better\napproaches.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Hierarchical deterministic wallets</h3>\n<div>\n<div>\n<div>BIP32</div>\n<div>\n<p>This section describes a standard called BIP32, which is widely used\nby various Bitcoin wallet software. The BIPs are available online from\n<a>[web-bips]</a>.</p>\n</div>\n</div>\n</div>\n<div>\n<p>One of the brighter developers at the company, a cryptographer, comes\nup with a new way to handle key creation to improve the backup\nsituation and bring totally new features to wallets.</p>\n</div>\n<div>\n<p>She realizes that if all private keys in a wallet were generated from\na single random number called a <em>random seed</em>, the whole wallet\ncould be backed up by writing down the seed on a piece of paper and\nstoring it in a safe place (<a>Backing up a seed. This is how you want to make backups.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 7. Backing up a seed. This is how you want to make backups.</div>\n</div>\n<div>\n<p>She talks to some other cryptographers, and they decide on a strategy.\nThey’re going to make an HD wallet. Basically, keys are organized as a\ntree, in which one key is the root of the tree, and this root can have\nany number of child keys. Each child key can in turn have a large\nnumber of children of its own, and so on.</p>\n</div>\n<div>\n<div>\n<div>BIP44</div>\n<div>\n<p>BIP44, Multi-Account Hierarchy for Deterministic Wallets, describes\nwhich branches of the tree are used for which purposes. For now, let’s\nuse Rita’s chosen key organization.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Suppose Rita wants to organize her keys based on their purpose and\ngenerate five keys to use for shopping at the cafe and another three\nkeys to use as a savings account. <a>Rita creates two accounts, with five addresses in the shopping account and three addresses in the savings account.</a> shows how her keys could\nbe organized.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 8. Rita creates two accounts, with five addresses in the shopping account and three addresses in the savings account.</div>\n</div>\n<div>\n<p>The keys are organized as a tree, but it’s a tree turned upside down\nbecause that’s how computer geeks typically draw their trees. Anyway,\nthe root key of the tree (at the top) is called the <em>master private\nkey</em>. It’s the key from which all the rest of the keys are\nderived. The master private key has two <em>child keys</em>: one that\nrepresents the shopping account (left, in <a>Rita creates two accounts, with five addresses in the shopping account and three addresses in the savings account.</a>) and one that\nrepresents the savings account (right). Each of these children has, in\nturn, its own children. The shopping account key has five children,\nand the savings account key has three children. These eight children\nhave no children of their own, which is why they’re called <em>leaves</em> of\nthe tree. The leaves are the private keys Rita uses to store cookie\ntokens, so an address is generated from each of these eight private\nkeys.</p>\n</div>\n<div>\n<div>\n<div>Indexes</div>\n<div>\n<p>Computer programmers often use the term <em>index</em> to denote a position\nin a list. It’s usually zero-based, meaning the first item in the list\nhas index 0, the second item has index 1, and so on. We’ll use\nzero-based indexes throughout this book.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Note how the keys in the tree are numbered. Each set of children is\nnumbered from 0 and upwards. This is used to give each key a unique\nidentifier. For example the first, <em>index</em> 0, savings key is denoted\n<code>m/1/0</code>. <code>m</code> is special and refers to the master private key.</p>\n</div>\n<div>\n<p>How is a tree structure like this accomplished? Let’s look closer at\nthe creation of some parts of the tree.</p>\n</div>\n<div>\n<p>Three important processes are performed to create the tree, as\n<a>Creating the first two of Rita’s three savings keys. A random seed is used to create a master extended private key, which is then used to create child extended private keys.</a> shows:</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 9. Creating the first two of Rita’s three savings keys. A random seed is used to create a master extended private key, which is then used to create child extended private keys.</div>\n</div>\n<div>\n<ol>\n<li>\n<p>A random seed of 128 bits is generated. This seed is what the whole\ntree grows up (um, down) from.</p>\n</li>\n<li>\n<p>The <em>master extended private key</em> is derived from the seed.</p>\n</li>\n<li>\n<p>The descendant <em>extended private keys</em> of the master extended\nprivate key are derived.</p>\n</li>\n</ol>\n</div>\n<div>\n<p>An <em>extended private key</em> (xprv) contains two items: a private key and a\nchain code (<a>An xprv consists of a private key and a chain code.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 10. An xprv consists of a private key and a chain code.</div>\n</div>\n<div>\n<p>The private key is indistinguishable from an old-type private key\ngenerated directly from a random number generator. You can use it to\nderive a public key and a cookie token address. You usually make\naddresses only out of leaves, but you could use internal keys as well.\nThe other part of the xprv is the chain code. A chain code is the\nrightmost 256 bits of a 512-bit hash, hence the right-half hash icon\nin the figure. You’ll see soon how that hash is created. The chain\ncode’s purpose is to provide entropy when generating a child xprv. The\nmaster xprv doesn’t differ from other xprvs, but we give it a special\nname because it’s the ancestor of all keys in the tree. It is,\nhowever, created differently.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>In step 1, the random seed is created in the same way as when you\ncreated private keys in <a>[ch02]</a>. In this example, you generate 128\nbits of random data, but it could just as well be 256 bits depending\non the level of security you want—128 bits are enough for most users.\nYou’ll see later how the choice of seed size will affect the backup\nprocess; a longer seed means more writing on a piece of paper during\nbackup. We’ll get back to this in <a>Back to backup</a>.</p>\n</div>\n<div>\n<p>Steps 2 and 3 deserve their own subsections.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Deriving a master extended private key</h4>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Let’s look deeper into how to generate the master xprv (<a>Deriving Rita’s master xprv. The seed is hashed with HMAC-SHA512. The resulting hash of 512 bits is split into the left 256 bits, which become the master private key, and the right 256 bits, which become the chain code.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 11. Deriving Rita’s master xprv. The seed is hashed with HMAC-SHA512. The resulting hash of 512 bits is split into the left 256 bits, which become the master private key, and the right 256 bits, which become the chain code.</div>\n</div>\n<div>\n<div>\n<div>“CT seed”?</div>\n<div>\n<p>An HMAC needs two inputs: a value to hash and a key. You don’t have or\nneed a key for the master xprv because you have all the entropy you\nneed in the seed.  In <a>Deriving Rita’s master xprv. The seed is hashed with HMAC-SHA512. The resulting hash of 512 bits is split into the left 256 bits, which become the master private key, and the right 256 bits, which become the chain code.</a>, you input <code>CT seed</code> to give the\nHMAC <em>something</em>. A key is needed later, when you derive children of\nthe master xprv.</p>\n</div>\n</div>\n</div>\n<div>\n<p>To create the master private key, the seed is hashed using HMAC-SHA512\n(HMAC is short for Hash Based Message Authentication Code), which\nproduces a 512-bit hash value. HMAC-SHA512 is a special cryptographic\nhash function that, besides the normal single input, also takes a key.\nFrom a user’s perspective, you can regard HMAC-SHA512 as a normal\ncryptographic hash function but with multiple inputs. The hash value\nis split into the left 256 bits and the right 256 bits. The left 256\nbits become the master private key, which is a normal private key;\nit’s called the <em>master</em> private key because all other private keys\nare derived from this single private key (and the chain code). The\nright 256 bits become the <em>chain code</em>, used in the next step to\nderive children from the master xprv.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Deriving a child extended private key</h4>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>You just created Rita’s master xprv. It’s time to derive the child xprv\nthat groups together her three savings keys. The direct children of an\nxprv can be derived in any order. Let’s derive the savings account key,\n<code>m/1</code>, first. The process for deriving a child xprv from a parent xprv\nis as follows (<a>Deriving a child xprv from a parent xprv. The parent’s public key and chain code and the desired index are hashed together. The parent private key is added to the left half of the hash, and the sum becomes the child private key. The right half becomes the child chain code.</a>):</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 12. Deriving a child xprv from a parent xprv. The parent’s public key and chain code and the desired index are hashed together. The parent private key is added to the left half of the hash, and the sum becomes the child private key. The right half becomes the child chain code.</div>\n</div>\n<div>\n<ol>\n<li>\n<p>The desired index is appended to the parent public key.</p>\n</li>\n<li>\n<p>The public key and index become the input to HMAC-SHA512. The parent\nchain code acts as a source of entropy to the hash function. To\nsimplify, think of it as three pieces of data are hashed together.</p>\n</li>\n</ol>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<ol>\n<li>\n<p>The 512-bit hash value is split in half:</p>\n<div>\n<ul>\n<li>\n<p>The left 256 bits are added, with normal addition (modulo 2<sup>256</sup>), to\nthe parent private key. The sum becomes the child private key.</p>\n</li>\n<li>\n<p>The right 256 bits become the child chain code.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>The child private key and the child chain code together form the child\nxprv.</p>\n</li>\n</ol>\n</div>\n<div>\n<p>This same process is used for all children and grandchildren of the\nmaster xprv until you have all the keys Rita wanted in her wallet.</p>\n</div>\n<div>\n<p>You might be wondering why you need the addition—why not use the left\n256 bits as the child private key? The 512-bit hash is calculated from\nthe public key and the chain code—collectively called the <em>extended\npublic key</em> (xpub)—and an index. You’ll see later how to use the xpub\nin less secure environments, such as a web server, to generate a\ncorresponding tree of <em>public</em> keys. You need to add the parent\nprivate key to the left 256 bits to make it impossible for someone\nwith the xpub to generate child private keys.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Where were we?</h3>\n<div>\n<p>Let’s recall why you’re here: to create a wallet app that makes life\neasier for end users (<a>You’re working on making a great wallet for users.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 13. You’re working on making a great wallet for users.</div>\n</div>\n<div>\n<p>The main duties of a wallet are to</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Manage private keys</p>\n</li>\n<li>\n<p>Create new addresses</p>\n</li>\n<li>\n<p>Transfer payment details from payee to payer</p>\n</li>\n<li>\n<p>Make a payment</p>\n</li>\n<li>\n<p>Keep track of funds</p>\n</li>\n<li>\n<p>Back up private keys</p>\n</li>\n</ul>\n</div>\n<div>\n<p>We’ve covered the first five items, but we aren’t quite finished with\nbackups. We just looked at xprv derivation, which is the groundwork for\nbetter backups.</p>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Back to backup</h3>\n<div>\n<div>\n<div>But the key paths?</div>\n<div>\n<p>To restore keys, you also need their paths. In Bitcoin, those paths\nare standardized in BIP44. If a wallet uses that standard, you\nimplicitly know the keys’ paths.</p>\n</div>\n</div>\n</div>\n<div>\n<p>You want a safe, easy way to back up private keys. You’ve created an HD\nwallet to generate any number of private keys from a single seed. What’s\nthe minimum Rita needs to back up to restore all keys in her wallet,\nshould she lose it? Right: the seed (and the tree structure, see\nmargin). As long as her seed is safe, she can always re-create all her\nkeys.</p>\n</div>\n<div>\n<p>Suppose Rita’s 128-bit (16-byte) seed is</p>\n</div>\n<div>\n<div>\n<pre>16432a207785ec5c4e5a226e3bde819d</pre>\n</div>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>It’s a lot easier to write these 32-hex digits on a piece of paper than\nit would be to write her eight private keys. But the biggest win is that\nRita can write this down once and lock it in a safe. As long as that\npaper is safe, her wallet is safe from accidental loss. She can even\ncreate new keys from the same seed without having to make another\nbackup.</p>\n</div>\n<div>\n<p>But it’s still difficult to write this down without any typos. What if\nRita makes a typo and then loses her wallet? She won’t be able to\nrestore any of her keys! You need something even simpler that’s more\ncompatible with how humans work.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Mnemonic sentences</h4>\n<div>\n<div>\n<div>BIP39</div>\n<div>\n<p>Most Bitcoin wallets use mnemonic sentences for backup. This is\nstandardized in BIP39. Before that, wallets typically used\npassword-protected files with all keys, which caused a lot of\nheadache.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Recall that the seed is a sequence of bits. For example, Rita’s seed\nis 128 bits long. What if you could encode those bits in a more\nhuman-friendly way? You can!</p>\n</div>\n<div>\n<p>Rita’s wallet used to create a seed using a random number generator,\nin the most straight-forward way possible. But if it had done it in a\nslightly different way, it could display her seed as a sequence of 12\nEnglish words, called a <em>mnemonic sentence</em>:</p>\n</div>\n<div>\n<div>\n<pre>bind bone marine upper gain comfort\ndefense dust hotel ten parrot depend</pre>\n</div>\n</div>\n<div>\n<div>\n<div>\n<p><span><a><img/></a></span></p>\n</div>\n</div>\n</div>\n<div>\n<p>This mnemonic sentence presents the seed in a human-readable way. It’s\nmuch more approachable to write down 12 words than it is to write down\ncryptic hex code. If Rita loses her wallet, she can install the wallet\napp on another phone and restore the seed from those 12 words. Rita\ncan regenerate all her private keys from that seed.</p>\n</div>\n<div>\n<p>This is a three-step process as shown in <a>The three steps involved to create a seed from a random number generator.</a>.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 14. The three steps involved to create a seed from a random number generator.</div>\n</div>\n<div>\n<p>First, a random number is generated. Second, the mnemonic sentence,\nthat can be used for backup, is generated from the random number. In\nthe last and third step, you generate a seed from the mnemonic\nsentence. The last two steps are discussed more in detail in the next\ntwo subsections.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Generating a mnemonic sentence</h4>\n<div>\n<table>\n<tbody><tr>\n<td>\n<div>Warning</div>\n</td>\n<td>\nWe’re going to explore how the mnemonic sentence and seed\ngeneration works. It’s really fun, but if you think this section goes\ntoo deep, you can accept the previous section and skip to\n<a>Extended public keys</a>.\n</td>\n</tr>\n</tbody></table>\n</div>\n<div>\n<p>The encoding starts with the random number, as shown in\n<a>Generating a 12-word mnemonic sentence from a random number. The random number is checksummed, and every group of 11 bits is looked up in a word list of 2,048 words.</a>. The random number is hashed with SHA256, and the first 4\nbits of the hash—in this case, <code>0111</code>—are appended to the random\nnumber. Those 4 bits act as a checksum.  You then arrange the bits\ninto 12 groups of 11 bits, where each group encodes a number in the\nrange 0 to 2047. Eleven bits can encode 2<sup>11</sup> = 2,048 different\nvalues, remember?</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 15. Generating a 12-word mnemonic sentence from a random number. The random number is checksummed, and every group of 11 bits is looked up in a word list of 2,048 words.</div>\n</div>\n<div>\n<p>The 12 numbers are looked up in a standardized word list of 2,048\nwords numbered from 0 to 2047. You can find this list in BIP39 from\n<a>[web-bips]</a>; it contains commonly used English words. After looking\nup all 12 numbers, the result is the mnemonic sentence.</p>\n</div>\n<div>\n<div>\n<div>\n<p><span><a><img/></a></span></p>\n</div>\n</div>\n</div>\n<div>\n<p>The sentence doesn’t mean anything in particular. It’s 12 random words,\njust like the hex-encoded seed is 32 random hex digits.</p>\n</div>\n<div>\n<p>Rita’s wallet shows the mnemonic sentence to her, and she writes the 12\nwords down on a piece of paper. She puts the paper in a safe place and\ngets on with her life.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Generating a seed from a mnemonic sentence</h4>\n<div>\n<p>Rita’s wallet doesn’t stop there. It has yet to generate a seed that\nit can use to generate addresses for Rita. The wallet will generate\nthe seed in many steps (<a>A seed is generated from a mnemonic phrase in 2048 steps.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 16. A seed is generated from a mnemonic phrase in 2048 steps.</div>\n</div>\n<div>\n<p>The mnemonic sentence is used as the main input for each of the 2048\nHMAC-SHA512 functions. This is the same function as we used in\n<a>Deriving a master extended private key</a> to generate a master xprv from the seed. The\nother input, which is called the key, is <code>mnemonic1</code> in the first,\nleftmost, function. For subsequent functions the key input is the\noutput of the previous function.</p>\n</div>\n<div>\n<p>The output from each function is added using bitwise XOR (exclusive\nor) to form the final result, which is our 512 bit seed. In bitwise\nXOR, two numbers are compared bit by bit, and if the bits are equal\nthe resulting bit is <code>0</code>, otherwise <code>1</code>. This seed is then used to\ngenerate a master xprv as described in <a>Deriving a master extended private key</a>.</p>\n</div>\n<div>\n<p>You’re probably wondering why the seed generation uses 2048 steps of\nHMAC-SHA512. This process is called <em>PBKDF2</em> (Password-Based Key\nDerivation Function 2), which is a standardized way to achieve\nso-called key stretching. Key stretching makes brute-force attacking\nthe mnemonic sentence harder because each try becomes slower due to the\nmany steps involved.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>The next day, Rita drops her phone into the ocean, and it disappears\ninto the deep. She lost her wallet! But Rita isn’t very concerned. She\nbuys a new phone and installs the wallet app. She instructs her app to\nrestore from a backup. The wallet asks her for her mnemonic sentence.\nShe writes</p>\n</div>\n<div>\n<div>\n<pre>bind bone marine upper gain comfort\ndefense dust hotel ten parrot depend</pre>\n</div>\n</div>\n<div>\n<p>into the wallet app. The app uses the 4-bit checksum discussed in the\nprevious section to make sure it’s correct. It does that by running\nthe mnemonic sentence generation backwards as <a>Verifying the checksum of a mnemonic sentence</a> illustrates.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 17. Verifying the checksum of a mnemonic sentence</div>\n</div>\n<div>\n<p>If Rita accidentally writes the last word as <code>deposit</code> instead of\n<code>depend</code>, the checksum check will <em>probably</em> fail because she wrote\nthe wrong word at the end. If she types <code>depends</code> instead of <code>depend</code>,\nthe decoding will definitely fail because there’s no word <code>depends</code> in\nthe word list.</p>\n</div>\n<div>\n<p>The checksum is pretty weak—4 bits make only 16 possible checksums. A\nwrongly written mnemonic sentence, in which all words exist in the\nword list, would have a 1/16 probability of not being detected. This\nseems bad. But the probability that you’d write such a sentence is\nsmall, because your misspelled words have to exist in the word\nlist. This reduces the risk of an invalid mnemonic sentence being\nrestored.</p>\n</div>\n<div>\n<p>After the checksum has been verified, the app regenerates the seed as\nshown in <a>A seed is generated from a mnemonic phrase in 2048 steps.</a> and all of Rita’s private keys can be restored\nfrom that seed.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Extended public keys</h3>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Rita created her wallet from a random 128-bit seed, which she backed\nup with a 12-word mnemonic sentence. Her wallet can create any number\nof private keys from that seed. She can organize them into different\n“accounts” as she pleases. Very nice. But HD wallets have another\nfeature: you can create a tree of public keys and chain codes without\nknowing any of the private keys.</p>\n</div>\n<div>\n<p>Suppose the cafe uses an HD wallet. It wants to start selling cookies on\nits website and delivering those cookies to coworkers’ cubicles.</p>\n</div>\n<div>\n<p>For privacy reasons, the web server needs to be able to present a new\ncookie token address for every sale, but where does it get the\naddresses? The cafe could create an xprv for an <em>online sales</em>\naccount in its HD wallet and put that xprv on the web server, as\n<a>The cafe copies its online sales xprv to the web server.</a> shows.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 18. The cafe copies its online sales xprv to the web server.</div>\n</div>\n<div>\n<p>The web server can now create new addresses as the orders pour in.\nGreat! But what if Mallory, the gangster, gains access to the web\nserver’s hard drive? She can steal all the money in any of the addresses\nin the online sales account. She can’t steal from any other addresses in\nthe tree. For example, she can’t calculate any key in the <em>counter\nsales</em> account because she doesn’t have access to the master xprv, which\nis needed to calculate the counter sales account key and all its\nchildren.</p>\n</div>\n<div>\n<p>Typical web servers are prone to hacking attempts because they’re\nusually accessible from anywhere in the world. Storing money on the\nweb server would probably attract a lot of hacking attempts. Sooner or\nlater, someone would succeed in getting access to the web server’s\nhard drive, and steal the xprv.</p>\n</div>\n<div>\n<p>For this reason, the cafe wants to avoid having any private keys on\nthe web server. Thanks to the HD wallet, this is possible by using\nxpubs (<a>An xpub consists of a public key and a chain code.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 19. An xpub consists of a public key and a chain code.</div>\n</div>\n<div>\n<p>An xpub is similar to an xprv, but the xpub contains a public key and\na chain code, whereas the xprv contains a private key and a chain\ncode. An xprv shares the chain code with the xpub. You can create an\nxpub from an xprv, but you can’t create the xprv from the xpub. This\nis because public key derivation is a one-way function; a public key\ncan be derived from a private key, but a private key can’t be derived\nfrom a public key.</p>\n</div>\n<div>\n<p>The cafe puts the xpub <code>M/1</code> on the web server. By convention, we use\n<code>M</code> to denote an xpub path and <code>m</code> to denote an xprv path. <code>M/1</code> and\n<code>m/1</code> have the same chain code, but <code>M/1</code> doesn’t have the private key,\nonly the public key. You can create the whole xpub tree from the master\nxpub (<a>Generating the tree of xpubs from the master xpub. The general pattern is the same as when generating xprvs, but the child-derivation function differs.</a>), which means you can generate any and all addresses\nwithout any private key. You can create addresses, but not spend money\nfrom those addresses.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 20. Generating the tree of xpubs from the master xpub. The general pattern is the same as when generating xprvs, but the child-derivation function differs.</div>\n</div>\n<div>\n<p>This looks exactly like when you generated the tree of xprvs. The\ndifference is that you have no private keys. As <a>Xpub derivation. The private key addition from the xprv derivation is replaced by public key “addition.”</a> shows, the\nxpubs are generated differently than the xprvs. Please compare this to\nthe xprv derivation.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 21. Xpub derivation. The private key addition from the xprv derivation is replaced by public key “addition.”</div>\n</div>\n<div>\n<div>\n<div>xprv derivation</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>This resembles xprv derivation. The difference is what you do with the\nleft 256 bits of the 512-bit hash. To calculate the child public key,\nyou treat the left 256 bits as if they were a private key and derive a\npublic key from them. This public key is then added to the parent\npublic key using the special <em>public key addition</em> operation. The\nresult is the child public key. Let’s compare the child public key\nderivation to the child private key derivation (<a>The plus on the private side has a corresponding plus on the public side. The parent private key plus some value is the child private key. The parent public key plus the public key derived from the same value is the child public key.</a>) from the\npoint after generating the left 256 bits of the HMAC-SHA512 hash.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 22. The plus on the private side has a corresponding plus on the public side. The parent private key plus some value is the child private key. The parent public key plus the public key derived from the same value is the child public key.</div>\n</div>\n<div>\n<p>Normal addition is used for the private key. You add a 256-bit number\nto the parent private key to get the child private key. But to keep\nthe result within 256-bit numbers, you use addition <em>modulo</em> 2<sup>256</sup>.</p>\n</div>\n<div>\n<p>The addition used to derive the child public key isn’t exactly what most\npeople (including me) are used to. For now, let’s just say this addition\nworks. We’ll dig deeper into that in <a>Public key math</a>.</p>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Deriving hardened private keys</h3>\n<div>\n<table>\n<tbody><tr>\n<td>\n<div>Warning</div>\n</td>\n<td>\nThis section is challenging. If you had a hard time\nunderstanding xprv derivation and xpub derivation, I suggest skipping\nthis section and jumping to <a>Public key math</a>. You don’t need this\nsection to understand the rest of this book.\n</td>\n</tr>\n</tbody></table>\n</div>\n<div>\n<p>This section will explain how to prevent a potential security issue\nwith normal xprv derivation.</p>\n</div>\n<div>\n<p>The cafe’s online business works well. People are ordering cookies\nlike crazy! The online sales account grows, with a new public key for\nevery order. The xpub for the online sales account sits on the web\nserver, and the xprv is present only in the cafe’s wallet (and in a\nlocked-away mnemonic sentence).</p>\n</div>\n<div>\n<p>Suppose Mallory somehow steals the private key <code>m/1/1</code>, which contains\nonly 10 CT. This might seem harmless because that private key has so\nlittle money in it. But it could be worse than that. If Mallory has\nalso managed to get the xpub for the online sales account from the web\nserver, she can <em>calculate the online sales xprv</em>, as <a>Mallory has stolen the private key <code>m/1/1</code> from the cafe and the parent xpub from the web server. She can now steal all the money in the online sales account.</a>\nshows.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 23. Mallory has stolen the private key <code>m/1/1</code> from the cafe and the parent xpub from the web server. She can now steal all the money in the online sales account.</div>\n</div>\n<div>\n<p>Remember how the xprv derivation function used normal addition to\ncalculate a child private key from a parent private key?</p>\n</div>\n<div>\n<div>\n\\$\\text{"m/1"} + \\text{"left half hash of index 1"}=\\text{"m/1/1"}\\$\n</div>\n</div>\n<div>\n<p>You can write this just as well as</p>\n</div>\n<div>\n<div>\n\\$\\text{"m/1/1"}-\\text{"left half hash of index 1"}=\\text{"m/1"}\\$\n</div>\n</div>\n<div>\n<p>Mallory has everything she needs to calculate the left-half hash for any\nchild index of <code>M/1</code> she pleases, but she doesn’t know which index her\nstolen private key has, so she starts testing with index 0:</p>\n</div>\n<div>\n<div>\n\\$\\text{"m/1/1"} - \\text{"left half hash of index 0"} = \\text{"a private key"}\\$\n</div>\n</div>\n<div>\n<p>She derives the public key from this private key and notices that it\ndoesn’t match <code>M/1</code>, so <code>0</code> wasn’t the correct index. She then tries\nindex <code>1</code>:</p>\n</div>\n<div>\n<div>\n\\$\\text{"m/1/1"} - \\text{"left half hash of index 1"} = \\text{"another private key"}\\$\n</div>\n</div>\n<div>\n<p>This private key derives to the public key <code>M/1</code>. Bingo! She has\ncalculated the private key <code>m/1</code> for the online sales account. The xprv\nshares the chain code with the xpub, so she also has the xprv for <code>m/1</code>,\nand she can calculate the private key tree for the account. Mallory\nsteals all the money from the online sales account. Not good.</p>\n</div>\n<div>\n<p>Now think about what would happen if Mallory had the master xpub. She\ncould use the same technique to derive the master xprv from the master\nxpub and <code>m/1/1</code>. Mallory can re-create all the private keys of all\naccounts in the entire wallet. Can you do something to prevent such a\ncatastrophic scenario? Yes, with <em>yet another key-derivation\nfunction</em>! This new key-derivation function is called <em>hardened xprv\nderivation</em>.</p>\n</div>\n<div>\n<p>Suppose the cafe wants to prevent Mallory from accessing the master\nxprv, even if she got the master xpub and a private key in the online\nsales account. The cafe can generate the xprv for the online sales\naccount using hardened xprv derivation, as <a>Deriving a hardened child xprv for the online sales account. You use the parent private key as input to the hash function instead of the public key.</a> shows.</p>\n</div>\n<div>\n<div>\n<div>Normal child xprv derivation</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 24. Deriving a hardened child xprv for the online sales account. You use the parent private key as input to the hash function instead of the public key.</div>\n</div>\n<div>\n<p>The apostrophe in <code>m/1\'</code> isn’t a typo: it’s used to denote hardened\nkey derivation. The difference is that with hardened key derivation,\nyou hash the <em>private</em> key instead of the public key. An attacker\ncan’t do the “minus” trick anymore because the hash is derived from\nthe parent private key. Mallory can’t calculate the left-half hash to\nsubtract from the child private key because she doesn’t have the\nparent private key. <a>The master xpub can’t be used to generate any child keys because <code>m/0\'</code> and <code>m/1\'</code> are hardened keys.</a> illustrates the result.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 25. The master xpub can’t be used to generate any child keys because <code>m/0\'</code> and <code>m/1\'</code> are hardened keys.</div>\n</div>\n<div>\n<p>This also means you can’t derive a hardened child xpub from a parent\nxpub. You must have the parent xprv to generate any children, public\nor private. The children of <code>m/1\'</code> can’t be derived as hardened\nprivate keys because that would require the cafe to put the private\nkey <code>m/1\'</code> on the online sales web server, which would be\ninsecure. Using nonhardened leaf keys in the online sales account\nmakes the cafe vulnerable to an attacker stealing <code>m/1\'/1</code> and\n<code>M/1\'</code>. If that happens, all funds in the account will be stolen. With\nhardened xprv, you solve the case of a stolen <code>M</code> and <code>m/1\'/1</code> but not\nthe case with a stolen <code>M/1\'</code> and <code>m/1\'/1</code>.</p>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Public key math</h3>\n<div>\n<p>This section digs deeper into the math behind public keys. We’ll start\nby looking at how a public key is derived from a private key using\n<em>public key multiplication</em>. Later subsections will show why child\nxpub derivation, using <em>public key addition</em>, works, and how public\nkeys are encoded in Bitcoin.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Public key multiplication</h4>\n<div>\n<table>\n<tbody><tr>\n<td>\n<div>Warning</div>\n</td>\n<td>\nI’ll try to explain this topic in simple terms, but if you think it’s\ntoo much, you can skip this section and jump to <a>Recap</a>.\n</td>\n</tr>\n</tbody></table>\n</div>\n<div>\n<div>\n<div>Normal public key derivation</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Think back to when you derived a public key from a private key in\n<a>[ch02]</a>. I didn’t really tell you <em>how</em> the public key was derived.\nI’ll make an attempt here instead.</p>\n</div>\n<div>\n<p>A public key in Bitcoin is a whole-number solution to this equation:</p>\n</div>\n<div>\n<div>\n\\$y^2 = x^3 + 7 \\mod{(2^{256}-4294968273)}\\$\n</div>\n</div>\n<div>\n<p>Many such solutions exist, about \\$2^{256}\\$ of them, so let’s\nsimplify by using the solutions to \\$y^2 = x^3 + 7 \\mod{11}\\$\ninstead (<a>Whole-number solutions to the elliptic curve \\$y^2 = x^3 + 7 \\mod{11}\\$. Each such solution is a public key.</a>).</p>\n</div>\n<div>\n<div>\n<div>Bitcoin uses this curve</div>\n<div>\n<p>This specific elliptic curve is called <em>secp256k1</em> and is used in\nBitcoin. Plenty of other curves have similar properties.</p>\n</div>\n</div>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 26. Whole-number solutions to the elliptic curve \\$y^2 = x^3 + 7 \\mod{11}\\$. Each such solution is a public key.</div>\n</div>\n<div>\n<div>\n<div>Curve? I see only dots.</div>\n<div>\n<p>It’s called a <em>curve</em> because in the continuous, real-number world,\nthe solutions form a curve like this:</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>The previous equations are examples of a class of equations called\n<em>elliptic curves</em>, and a solution is often referred to as a <em>point\non the curve</em>. You can now calculate a public key, which is a point\non the curve, from a private key. To do this, start at a special\npoint, \\$G=(6,5)\\$, on the curve. \\$G\\$ is somewhat arbitrarily\nchosen, but it’s widely known by everybody to be the starting point\nfor public key derivation. <em>The public key is the private key\nmultiplied by \\$G\\$.</em></p>\n</div>\n<div>\n<p>Suppose your private key is \\$5\\$. Then your public key is \\$5G\\$.</p>\n</div>\n<div>\n<p>To calculate this multiplication, you need two basic public key\noperations: addition and doubling, where doubling can be seen as\nadding a point to itself.</p>\n</div>\n<div>\n<p>To add two points (<a>Point addition. You add \\$(x, y)=(6,5)\\$ to \\$(2, 2)\\$ by drawing a straight line through them that will intersect a third point.</a>), you draw a straight line that “wraps\naround” the edges of the diagram and that intersects your two points\nand one third point. This third point is the negative result of the\naddition. To get the final result of the addition, take the symmetric\npoint at the same \\$x\\$ value.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 27. Point addition. You add \\$(x, y)=(6,5)\\$ to \\$(2, 2)\\$ by drawing a straight line through them that will intersect a third point.</div>\n</div>\n<div>\n<div>\n<div>Is there always a third point?</div>\n<div>\n<p>Yes, there’s always a line that intersects a third point. It’s one of\nthe curve’s important properties.</p>\n</div>\n</div>\n</div>\n<div>\n<p>The result of \\$(6, 5) + (2, 2)\\$ is \\$(7, 8)\\$. The straight\nline between the two points crosses the point \\$(7, 3)\\$. The\ncomplement point to \\$(7, 3)\\$ is \\$(7, 8)\\$, which is the\nresult of the addition.</p>\n</div>\n<div>\n<p>To double a point (<a>Point doubling. To double a point P, draw a line through P with a special slope that’s calculated from P. The line crosses another point, \\$(3,10)\\$. The complement point \\$(3, 1)\\$ is the doubling result.</a>) is to add it to itself, but there’s no\nslope to be calculated from a single point. In this special case, you\ncalculate the slope from the single point \\$P=(6,5)\\$ as\n\\$3*x^2*(2y)^{-1} \\mod{11} = 2\\$. The process is almost the same as\nadding two different points, but you calculate the slope of the line\ndifferently.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 28. Point doubling. To double a point P, draw a line through P with a special slope that’s calculated from P. The line crosses another point, \\$(3,10)\\$. The complement point \\$(3, 1)\\$ is the doubling result.</div>\n</div>\n<div>\n<p>Using these two basic operations, adding and doubling, you can derive\nthe multiplication of \\$5\\$ and \\$G\\$. In binary form, \\$5\\$ is</p>\n</div>\n<div>\n<div>\n\\$101_{binary} = 1*2^2 + 0*2^1 + 1*2^0\\$\n</div>\n</div>\n<div>\n<p>Your public key is then</p>\n</div>\n<div>\n<div>\n\\$5G = 1*2^2*G + 0*2^1*G + 1*2^0*G\\$\n</div>\n</div>\n<div>\n<p>Start in \\$G\\$ and calculate the resulting public key point by taking\nterms from right to left:</p>\n</div>\n<div>\n<div>\n<div>Elliptic curve calculator</div>\n<div>\n<p>There’s a nice elliptic curve calculator at\n<a>[web-elliptic-curve-calculator]</a> that you can play with to get a\nbetter feel for how this works.</p>\n</div>\n</div>\n</div>\n<div>\n<ol>\n<li>\n<p>Calculate \\$2^0*G = 1*G = G\\$. Easy. Now remember this point.</p>\n</li>\n<li>\n<p>Calculate \\$2^1*G = 2*G\\$. This is a point doubling of the\npreviously remembered point <em>G</em> from step 1. Remember the point. Because\nthere is a 0 in front of \\$2^1*G\\$, you don’t do anything with\nit—just remember it.</p>\n</li>\n<li>\n<p>Calculate \\$2^2*G = 2*2*G\\$, which is a doubling of the\npreviously remembered point \\$2*G\\$. Because there is a 1 in front of\nthe \\$2^2*G\\$ term, you add this result to the result of step 1.</p>\n</li>\n</ol>\n</div>\n<div>\n<p>In short, multiplication is performed by a sequence of adding and\ndoubling operations.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Why is this secure?</h4>\n<div>\n<p>The multiplication process is pretty easy to complete; it takes about\n256 steps for a 256-bit private key. But to reverse this process is a\ntotally different story. No known way exists to get the private key by\npoint “division” (for example, point \\$(6,6)\\$ “divided by”\n\\$G\\$). The only known way is to try different private keys and see\nif the public key is what you’re looking for. This is what makes\npublic-key derivation a one-way function.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Xpub derivation</h4>\n<div>\n<p>You’ve seen how an ordinary public key is derived from a private key\nthrough public-key multiplication. But how can adding the parent public\nkey with the public key derived from the left 256 bits make the child\npublic key? See <a>The child public key is derived by adding the parent public key with the public key derived from the left 256 bits.</a>.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 29. The child public key is derived by adding the parent public key with the public key derived from the left 256 bits.</div>\n</div>\n<div>\n<p>You can convince yourself that it works by looking at both normal\npublic-key derivation and child public-key derivation in the same\npicture: see <a>Xpub derivation and normal public-key derivation. A normal public key is the starting point <em>G</em> multiplied by a private key. A child public key is the parent public key added to the public key derived from the left-half hash.</a>.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 30. Xpub derivation and normal public-key derivation. A normal public key is the starting point <em>G</em> multiplied by a private key. A child public key is the parent public key added to the public key derived from the left-half hash.</div>\n</div>\n<div>\n<p>The nice thing with elliptic curves is that the special public key\n“add” operation works a bit like normal add. The same goes for the\nspecial public key “multiplication.” You can thus solve some\nequations:</p>\n</div>\n<div>\n<div>\n\\$c=p+h \\\\$\n\\$C=Gh+Gp=G(h+p)=Gc\\$\n</div>\n</div>\n<div>\n<p>The result, \\$C=Gc\\$, is exactly how to derive the public key\n\\$C\\$ from the private key \\$c\\$.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Public key encoding</h4>\n<div>\n<p>Do you remember how John’s public key looked like a big number?</p>\n</div>\n<div>\n<div>\n<pre>035541a13851a3742489fdddeef21be13c1abb85e053222c0dbf3703ba218dc1f3</pre>\n</div>\n</div>\n<div>\n<p>That doesn’t look like a pair of coordinates, does it? The public key is\nencoded in a certain way. Because of the symmetry, exactly two points\nexist for every value of \\$x\\$, one with an even \\$y\\$ value and one\nwith an odd \\$y\\$ value (<a>Each point on the curve has a symmetric point at the same \\$x\\$ value.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 31. Each point on the curve has a symmetric point at the same \\$x\\$ value.</div>\n</div>\n<div>\n<p>You don’t need to store \\$y\\$ values, only whether the \\$y\\$\nvalue is even or odd. You do this by prefixing the \\$x\\$ value with\n<code>02</code> (even) or <code>03</code> (odd). In John’s case, the \\$y\\$ value happens\nto be odd, so the prefix is <code>03</code>.</p>\n</div>\n<div>\n<p>This is why public keys are 33 bytes and not 32 bytes. It’s a 256-bit\nnumber—the \\$x\\$-coordinate—prefixed by a byte specifying the odd/even\nproperty.</p>\n</div>\n<div>\n<p>The curve in the figure has a single point \\$x=5, y=0\\$. This\ndoesn’t look symmetric, but it’s a so-called <em>double-root</em> to the\ncurve—it’s two points with the same \\$y\\$ value 0. They’re symmetric\nbecause they’re at equal distance 5.5 from the symmetry line. In this\nspecial case, both these points will use <code>02</code> because 0 is even.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Recap</h3>\n<div>\n<p>Let’s look back at what you’ve learned in this chapter. An HD wallet\ngenerates a tree of keys from a random seed. It can use key hardening\nto isolate different branches of the tree from each other.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Users back up their keys by writing the random seed in the form of 12\nto 24 English words on a piece of paper and lock it up safely.</p>\n</div>\n<div>\n<p>The cafe accepts cookie tokens in its online shop. It only puts the\nxpub for the online sales account, <code>M/1\'</code>, on the web server, which\ncan now create as many addresses as needed without using any private\nkeys. The private keys are kept in the cafe’s wallet and never touch\nthe web server.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>System changes</h4>\n<div>\n<p>Our concept table (<a>Nothing new in the concept table</a>) isn’t updated in this chapter. The\nwallets described in this chapter work basically as they do in\nBitcoin, but they send an email to Lisa instead of sending a\ntransaction across the global Bitcoin network. We’ll get to that in\nthe next chapter.</p>\n</div>\n\nTable 1. Nothing new in the concept table\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Cookie Tokens</th>\n<th>Bitcoin</th>\n<th>Covered in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>1 cookie token</p></td>\n<td><p>1 bitcoin</p></td>\n<td><p><a>[ch02]</a></p></td>\n</tr>\n<tr>\n<td><p>The spreadsheet</p></td>\n<td><p>The blockchain</p></td>\n<td><p><a>[ch06]</a></p></td>\n</tr>\n<tr>\n<td><p>Email to Lisa</p></td>\n<td><p>A transaction</p></td>\n<td><p><a>[ch05]</a></p></td>\n</tr>\n<tr>\n<td><p>A row in the spreadsheet</p></td>\n<td><p>A transaction</p></td>\n<td><p><a>[ch05]</a></p></td>\n</tr>\n<tr>\n<td><p>Lisa</p></td>\n<td><p>A miner</p></td>\n<td><p><a>[ch07]</a></p></td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>Let’s have a release party! Cookie tokens 4.0, fresh from the lab!</p>\n</div>\n\nTable 2. Release notes, cookie tokens 4.0\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Version</th>\n<th>Feature</th>\n<th>How</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p><span><a><img/></a></span>4.0</p></td>\n<td><p>Easy to make payments and create new addresses</p></td>\n<td><p>Mobile app “wallet”</p></td>\n</tr>\n<tr>\n<td><p>Simplified backups</p></td>\n<td><p>HD wallets are generated from a seed. Only the seed, 12 to 24 English\nwords, needs to be backed up.</p></td>\n</tr>\n<tr>\n<td><p>Creating addresses in insecure environments</p></td>\n<td><p>HD wallets can generate public key trees without ever seeing any of\nthe private keys.</p></td>\n</tr>\n<tr>\n<td><p>3.0</p></td>\n<td><p>Safe from expensive typing errors</p></td>\n<td><p>Cookie token addresses</p></td>\n</tr>\n<tr>\n<td><p>Privacy improvements</p></td>\n<td><p>A PKH is stored in the spreadsheet instead of a personal name.</p></td>\n</tr>\n<tr>\n<td><p>2.0</p></td>\n<td><p>Secure payments</p></td>\n<td><p>Digital signatures solve the problem with imposters.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Exercises</h3>\n<div>\n<h4><a><svg><path></path></svg></a>Warm up</h4>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<ol>\n<li>\n<p>Suppose you use a bitcoin wallet app and want to receive 50 BTC\nfrom your friend to your Bitcoin address\n<code>155gWNamPrwKwu5D6JZdaLVKvxbpoKsp5S</code>. Construct a payment URI to give to\nyour friend. Hint: in Bitcoin, the URI starts with <code>bitcoin:</code> instead of\n<code>ct:</code>. Otherwise, they’re the same.</p>\n</li>\n<li>\n<p>How many coin flips does a random password of 10 characters\ncorrespond to? The password is selected from a 64-character alphabet.</p>\n</li>\n<li>\n<p>Name a few problems with password-protected backups. There are\nat least four.</p>\n</li>\n<li>\n<p>What three major steps are involved when a seed is created in an HD\nwallet that uses mnemonic sentences? You only need to answer this on a\nhigh level.</p>\n</li>\n<li>\n<p>What does an xprv consist of?</p>\n</li>\n<li>\n<p>What does an xpub consist of?</p>\n</li>\n</ol>\n</div>\n<div>\n<p>Exercises 4.7 and 4.8 assume that you read\n<a>Deriving hardened private keys</a>. If you skipped that section, you can\nskip these exercises, too.</p>\n</div>\n<div>\n<ol>\n<li>\n<p>Suppose you want to make a hardened xprv with index <code>7</code> from\n<code>m/2/1</code>. What information do you need to create <code>m/2/1/7\'</code>?</p>\n</li>\n<li>\n<p>Can you derive xpub <code>M/2/1/7\'</code> from <code>M/2/1</code>? If not, how would\nyou derive <code>M/2/1/7\'</code>?</p>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Dig in</h4>\n<div>\n<ol>\n<li>\n<p>Suppose you’re a bad guy and have the master xpub of a clueless\nvictim. You’ve also stolen the private key <code>m/4/1</code> that contains 1 BTC.\nAssume you also know this private key has this specific path. Describe\nhow you’d go about calculating the master xprv. Use these hints:</p>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</li>\n<li>\n<p>Suppose instead that your clueless victim had 0 bitcoins on the\nprivate key <code>m/4/1</code>, but plenty of money on other addresses under the\nsame xprv. Would you be able to steal any money?</p>\n</li>\n</ol>\n</div>\n<div>\n<p>If you didn’t read <a>Deriving hardened private keys</a>, you can skip exercise\n4.11.</p>\n</div>\n<div>\n<ol>\n<li>\n<p>Suggest a better approach your victim could have used to prevent you\nfrom stealing all the money.</p>\n</li>\n</ol>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<ol>\n<li>\n<p>Say the cafe owner wants employees to have access to the counter\nsales account because they must be able to create a new address for\neach sale. But they must not have access to the private keys because\nthe owner doesn’t trust the employees to handle them securely. Suggest\nhow to achieve this. Hint: a wallet can import an xpub.</p>\n</li>\n<li>\n<p>Suppose you work at the cafe and have loaded an xpub into your\nwallet. Your colleague Anita has loaded the same xpub into her wallet.\nYou can both request payments from customers that go into the same\naccount. How would you notice when Anita has received money into a\npreviously empty key? Hint: you can create keys ahead of time.</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Summary</h3>\n<div>\n<ul>\n<li>\n<p>You usually use a mobile app, called a wallet, to send and receive\nmoney—cookie tokens or bitcoins.</p>\n</li>\n<li>\n<p>The wallet creates and stores keys, scans or shows payment details,\nsends payments, shows your balance, and backs up keys. You don’t have to\ndo any of this manually.</p>\n</li>\n<li>\n<p>Backups are hard to do right. Password-protected backups suffer from\nproblems with forgotten passwords, technology improvements, and humans\nbeing lousy random number generators.</p>\n</li>\n<li>\n<p>With HD wallets, you back up your random seed and store that seed in a\nsafe place. Do it only once.</p>\n</li>\n<li>\n<p>The seed can be encoded using a mnemonic sentence, which makes it easier\nto write down the seed.</p>\n</li>\n<li>\n<p>HD wallets generate multiple private keys from a seed and organize them\nin a tree structure to improve privacy.</p>\n</li>\n<li>\n<p>The tree of public keys—or any of its branches—can be generated from an\nxpub. This is useful for insecure environments such as web servers.</p>\n</li>\n<li>\n<p>Hardened private key derivation keeps “accounts” compartmental\xadized. It\nconfines an attacker to a single account.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div></article>', 'body': '\nWallets\n\n\nThis chapter covers\n\n\n\n\nAutomating payments\n\n\nCreating and managing keys\n\n\nMaking simple, secure key backups\n\n\n\n\nSo far, we’ve done nothing to improve the user experience for the\ncompany’s coworkers using the cookie token spreadsheet. The situation\nhas become worse for users because emails to Lisa now need more\ninformation than in the beginning. On top of this, users should take\nextra steps to use multiple addresses to preserve their privacy.\n\n\nIn this chapter, we’ll build a mobile app, called a wallet\n(Bitcoin wallets), that handles many of the common tasks users want to\nperform. This wallet will create new addresses, store private keys,\nsimplify how addresses are transferred between users, and automate the\npayment process.\n\n\n\n\n\nFigure 1. Bitcoin wallets\n\n\nWe’ll discuss different approaches to wallet backups. We’ll also look\nat a new way to generate keys, called hierarchical deterministic\nwallets (HD wallets), so backups become dead simple; you only need to\nback up a single random number, called a seed, once and\nfor all. We’ll finish the chapter with an optional deep dive into the\nmath behind public key derivation.\n\n\nThis chapter won’t change anything regarding Lisa’s work or the\nspreadsheet. We focus only on users here.\n\n\nFirst wallet version\n\n\nBitcoin wallets\n\nSeveral different wallets are available for Bitcoin. Some popular ones are\n\n\n\n\nBitcoin Core\n\n\nElectrum\n\n\nGreenBits\n\n\nBRD (Bread)\n\n\n\n\nSee [web-bitcoin-wallets] for a comprehensive list.\n\n\n\n\nAmong you and your coworkers, a group of software developers builds a\nmobile app called a wallet to simplify common tasks for themselves\nand other users. The group identifies the following tasks as the most\ncommon:\n\n\n\nCreate new addresses\n\nUsers must create new cookie token addresses\nevery now and then. They might want to use different addresses for\ndifferent purposes or even different addresses for all payments for\nprivacy and security reasons.\n\nManage private keys\n\nFor each address created, the wallet needs to\nstore and manage the corresponding private key. Keeping private keys\nsafe from intruders is a delicate task.\n\nTransfer payment details from payee to payer\n\nWhen John wants to buy\na cookie, he needs to get the cafe’s address and the payment amount into\nhis app. Writing it by hand is cumbersome and error-prone, so it would\nbe nice if John could scan the details with his camera instead.\n\nMake a payment\n\nThe app should be able to send an email to Lisa with\nthe digitally signed payment details.\n\nKeep track of funds\n\nUsers want to know how many cookies they can\nafford. The app should display the total number of cookie tokens a user\nhas.\n\nBack up private keys\n\nWhen private keys are created in the app, they\nonly exist in the app. If the mobile phone is lost or broken, the\nprivate keys are gone. You know by now what happens when you lose your\nkeys, don’t you? You need a backup facility for private keys.\n\n\n\n\nThe development team builds an initial version of the app and calls it\nthe wallet. The term wallet isn’t perfect because the app doesn’t\nreally contain money. It contains the keys needed to spend money. The\nactual money is stored in the spreadsheet. The app is more akin to a\nphysical keyring; but the term wallet is widely used in the Bitcoin\nworld for all things that store private keys, so we should get over it\nand move on. Let’s go through this wallet’s features.\n\n\nSuppose, once again, that John wants to buy a cookie in the cafe\n(John buys a cookie using the wallet app. The cafe generates a key and displays to John a QR code with payment details. John scans the payment details and taps OK to approve the payment. John’s wallet sends an email to Lisa.). Both John and the cafe are using this new app.\n\n\n\n\n\nFigure 2. John buys a cookie using the wallet app. The cafe generates a key and displays to John a QR code with payment details. John scans the payment details and taps OK to approve the payment. John’s wallet sends an email to Lisa.\n\n\nThe process goes through several steps:\n\n\n\nQR codes\n\nQuick response (QR) codes are a way to make text scan-able. This QR code\nsays “Hello”:\n\n\n\n\n\n\n\n\n\n\n\nThe cafe asks its wallet to create a new address and request 10 CT\nto that address. This new address and the amount are displayed on the\nscreen as a QR code. The QR code contains information on how much to\npay, so John doesn’t have to type that in manually.\n\n\nJohn points his phone’s camera at the QR code to scan the payment\ndetails. It scans the payment URI (uniform resource identifier, a\ngeneral specification on how to identify stuff; a web URL is an\nexample of a URI):\n\n\nct:19UzNFW4Fq8wm8mtWmoPZAzE3tcB9tZVtN?amount=10\n\n\n\n\n\n\nThis tells John’s phone to launch the cookie token wallet (ct:) and\npay 10 (amount=10) cookie tokens to the address\n19UzNFW4Fq8wm8mtWmoPZAzE3tcB9tZVtN.\n\n\n\n\nJohn’s wallet displays the payment details to John, who checks that\nthey’re reasonable and clicks OK.\n\n\n\n\n\nBIP21\n\nBIPs (Bitcoin Improvement Proposals) are used to communicate ideas\namong developers. Some BIPs are adopted in Bitcoin software projects;\nothers aren’t. All BIPs are available at [web-bips].\n\n\nBitcoin adopted BIP21 as a way to transfer payment details from one\nwallet to another using a URI. Bitcoin URIs start with bitcoin:\ninstead of ct:.\n\n\n\n\n\n\nJohn’s wallet creates an email to Lisa that looks the same as\nbefore.  The wallet automatically selects an address to send from and\nsigns the message with the correct private key. On Lisa’s side,\nnothing has changed. She verifies and executes the payment exactly as\nbefore.\n\n\n\n\nLet’s take a closer look at what John’s wallet does in step 4\n(John has just clicked OK in his wallet to approve the payment. The wallet takes care of the rest. It selects a key with enough funds and signs a message to Lisa. It then automatically emails the signed message to Lisa.). The wallet does the same thing a user would do manually\nin the earlier examples.\n\n\n\n\n\nFigure 3. John has just clicked OK in his wallet to approve the payment. The wallet takes care of the rest. It selects a key with enough funds and signs a message to Lisa. It then automatically emails the signed message to Lisa.\n\n\nNotice that the wallet manages three key pairs: two with funds and one\nwith no funds. With this new wallet, users can have as many addresses\nas they want, which is good for privacy. The wallet will keep track of\nthem for the user.\n\n\nThe cafe’s wallet, as well as John’s wallet, will check the spreadsheet\nevery now and then to see if there are any new payments concerning any\nof the wallet’s keys, as a sender, a recipient, or both (John’s and the cafe’s wallets check the spreadsheet every few seconds. If a new payment, either incoming or outgoing, is found, the wallet updates the balance of the concerned keys and notifies its user.).\n\n\n\n\n\nFigure 4. John’s and the cafe’s wallets check the spreadsheet every few seconds. If a new payment, either incoming or outgoing, is found, the wallet updates the balance of the concerned keys and notifies its user.\n\n\n\nUnconfirmed transactions\n\nUnconfirmed means a transaction is created and sent to the Bitcoin\nnetwork, but it isn’t yet part of the Bitcoin blockchain. You shouldn’t\ntrust a payment until it’s part of the blockchain. The same goes for\ncookie token payments—don’t trust payments that aren’t in the\nspreadsheet.\n\n\n\n\nEven though John knows about the payment before Lisa confirms it in\nthe spreadsheet, his wallet won’t update the balance until it’s\nconfirmed.  Why? Lisa might not approve the payment. Maybe the payment\nbecame corrupted during transfer, or the email ended up in Lisa’s spam\nfolder, so she doesn’t see it.\n\n\nIf the wallet updates the balance without first seeing it in the\nspreadsheet, it could give false information to John. The wallet\ncould, of course, be kind enough to inform John that a payment is\npending confirmation.\n\n\n\nPrivate key backups\n\nThe development team creates a feature to back up the wallet’s private\nkeys. The idea is that the wallet creates a text file, the backup file,\nwith all private keys in it and sends this file to an email address the\nuser chooses.\n\n\n\nWhy back up?\n\nYour keys hold your money. If you lose your keys, you lose your\nmoney. A proper backup is not optional. You must take immediate,\nactive steps to make sure your keys are backed up; otherwise you will\nsooner or later lose your money.\n\n\n\n\nImagine that John wants to back up his private keys. The wallet collects\nall the keys it has ever created and writes them into a text file\n(John backs up his private keys. They’re sent in a text file to his email address.).\n\n\n\n\n\nFigure 5. John backs up his private keys. They’re sent in a text file to his email address.\n\n\nThe text file is emailed to John’s email address. Can you see any\nproblems with this? Yes, the biggest problem is that the keys have\nleft the privacy of the wallet application and are being sent into the\nwild.  Anyone with access to the email server or any other systems\ninvolved might be able to get the private keys without John noticing.\n\n\n\nProblems\n\n\n\nRisk of theft\n\n\nExcessive backups\n\n\n\n\n\n\nBut another problem exists. As soon as John creates a new address\nafter the backup is made, this new address isn’t backed up. John must\nmake a new backup that includes the new key. For every new key, he\nmust make a new backup. Doing backups for every address becomes\ntiresome for the user.\n\n\nLet’s look at a few simple solutions to these two problems:\n\n\n\n\nAutomatically send a backup when an address is created. This\nincreases the risk of theft because you send more backups.\n\n\nPre-create 100 addresses, and make a backup of them. Repeat when\nthe first 100 addresses are used. This also increases the risk of\ntheft, but not as much as solution 1.\n\n\nEncrypt the backup with a password. This will secure the backed-up\nkeys from theft.\n\n\n\n\nA combination of solutions 2 and 3 seems like a good strategy; you\nseldom need to do a backup, and the backups are secured by a strong\npassword.\n\n\nThe process is similar to the previous process, but this time John\nenters a password that’s used to encrypt the private keys\n(John backs up his private keys. They’re sent in a file encrypted with a password that John enters into his phone.).  If John loses his phone, he needs the password and the\nbackup file to restore his private keys.\n\n\n\n\n\nFigure 6. John backs up his private keys. They’re sent in a file encrypted with a password that John enters into his phone.\n\n\nIf John loses his phone, he can easily install the wallet app on\nanother phone. John sends the backup file to the app and enters his\npassword; the keys are decrypted from the backup file and added to his\nwallet app.\n\n\nA few words on password strength\n\nA password’s strength is measured in entropy. The higher the\nentropy, the harder it is to guess the password. The word entropy,\nas used in information security, comes from thermodynamics and means\ndisorder or uncertainty. Suppose you construct a password of 8\ncharacters from among the following 64 characters:\n\n\n\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\n\n\n\n\n\n\n\n\n\n\n\n\nEach character in the password would then represent 6 bits of entropy\nbecause there are 64 = 26 possible characters. If you select the 8\ncharacters randomly (no cherry-picking, please!), say E3NrkbA7, the\neight-character password will have 6 × 8 = 48 bits of entropy. This is\nequivalent in strength to 48 coin flips.\n\n\n\n\n\n\n\n\n\n\n\nSuppose instead that you select random words from a dictionary of\n211= 2,048 words. How many words do you need to use to beat the\n48-bit entropy of your eight-character password? Four words wouldn’t\nbe enough because 4 × 11 = 44 bits of entropy. But five words\ncorresponds to 55 bits of entropy, which beats the password’s entropy.\n\n\nA password’s real entropy also depends on what an attacker knows about\nthe password. For example, suppose an attacker, Mallory, steals John’s\nencrypted backup file and tries to perform a brute-force attack\non it. A brute-force attack means the attacker makes repeated\npassword guesses, over and over, until they find the correct\npassword. If Mallory knows the password’s length is exactly 8 and the\ncharacters are chosen from the 64 characters mentioned, the entropy is\n48 bits. If she happens to know that the second character is 3, the\nentropy drops to 6 × 7 = 42 bits. On the other hand, if Mallory\ndoesn’t know how many characters the password has, it will be harder\nfor her, meaning the entropy will be higher.\n\n\nThis is true only if password selection is truly random. If John uses\ncherry-picking to select the password j0Hn4321, the entropy\ndecreases dramatically. Typical password brute-force attack programs\nfirst try a lot of known words and names in different variations\nbefore trying more “random-looking” passwords. John is a well-known\nname, so an attacker will try a lot of different variations of that\nname as well as many other names and words. For example:\n\n\n\nbutter122 … waLk129 … go0die muh4mm@d\njohn John JOhn JOHn JOHN j0hn j0Hn\njOhn jOHn jOHN … john1 …\n… john12 J0hn12 … j0Hn321 …\nj0Hn4321\n\n\n\nBingo! Suppose there are 1,000,000 common words and names, and each word\ncan come in 100,000 variations, on average. That’s 100 billion different\npasswords to test, which corresponds to about 37 bits of entropy; 100\nbillion tries will take a high-end desktop computer a few days to\nperform. Let’s say, for simplicity, that it takes one day. If John uses\na truly random password, the entropy for the attacker is around 48 bits.\nIt would take around 2,000 days, or about 5.5 years, to crack the\npassword.\n\n\n\nProblems with password-encrypted backups\n\nThe process for password-encrypted backups works pretty well, but it\nalso introduces new problems:\n\n\n\n\n\n\n\n\n\n\n\n\nMore things to secure\n\nJohn now needs to keep track of two things: a\nbackup file and a password. In the first version, only a backup file was\nneeded.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nForgotten password\n\nPasswords that are rarely used, as is the case\nwith backup passwords, will eventually be forgotten. You can write them\ndown on paper and store them in a safe place to mitigate this issue. You\ncan also store them using password-manager software, such as LastPass or\nKeePass.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTechnology advancements\n\nAs time passes, new, more advanced hardware\nand software is built that makes password cracking faster. If your\neight-character password was safe five years ago, it’s not good enough\ntoday. Passwords need more entropy as technology improves. You can\nre-encrypt your backup files every two years with a stronger password,\nbut that’s a complicated process that few users will manage.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRandomness is hard\n\nComing up with random passwords is really hard.\nWhen the app asks John for a password, he needs to produce one on the\nspot. He doesn’t have time to flip a coin 48 times to produce a good\npassword. He will most likely make up something with far less entropy.\nOne way to deal with this is to have the wallet give John a generated\npassword. But this password is likely harder to remember than a\nself-invented password, which will increase the likelihood of a\nforgotten password.\n\n\n\n\nIt seems you haven’t yet come up with a good way of dealing with\nbackups. Let’s not settle for this half-bad solution—there are better\napproaches.\n\n\n\n\nHierarchical deterministic wallets\n\n\nBIP32\n\nThis section describes a standard called BIP32, which is widely used\nby various Bitcoin wallet software. The BIPs are available online from\n[web-bips].\n\n\n\n\nOne of the brighter developers at the company, a cryptographer, comes\nup with a new way to handle key creation to improve the backup\nsituation and bring totally new features to wallets.\n\n\nShe realizes that if all private keys in a wallet were generated from\na single random number called a random seed, the whole wallet\ncould be backed up by writing down the seed on a piece of paper and\nstoring it in a safe place (Backing up a seed. This is how you want to make backups.).\n\n\n\n\n\nFigure 7. Backing up a seed. This is how you want to make backups.\n\n\nShe talks to some other cryptographers, and they decide on a strategy.\nThey’re going to make an HD wallet. Basically, keys are organized as a\ntree, in which one key is the root of the tree, and this root can have\nany number of child keys. Each child key can in turn have a large\nnumber of children of its own, and so on.\n\n\n\nBIP44\n\nBIP44, Multi-Account Hierarchy for Deterministic Wallets, describes\nwhich branches of the tree are used for which purposes. For now, let’s\nuse Rita’s chosen key organization.\n\n\n\n\nSuppose Rita wants to organize her keys based on their purpose and\ngenerate five keys to use for shopping at the cafe and another three\nkeys to use as a savings account. Rita creates two accounts, with five addresses in the shopping account and three addresses in the savings account. shows how her keys could\nbe organized.\n\n\n\n\n\nFigure 8. Rita creates two accounts, with five addresses in the shopping account and three addresses in the savings account.\n\n\nThe keys are organized as a tree, but it’s a tree turned upside down\nbecause that’s how computer geeks typically draw their trees. Anyway,\nthe root key of the tree (at the top) is called the master private\nkey. It’s the key from which all the rest of the keys are\nderived. The master private key has two child keys: one that\nrepresents the shopping account (left, in Rita creates two accounts, with five addresses in the shopping account and three addresses in the savings account.) and one that\nrepresents the savings account (right). Each of these children has, in\nturn, its own children. The shopping account key has five children,\nand the savings account key has three children. These eight children\nhave no children of their own, which is why they’re called leaves of\nthe tree. The leaves are the private keys Rita uses to store cookie\ntokens, so an address is generated from each of these eight private\nkeys.\n\n\n\nIndexes\n\nComputer programmers often use the term index to denote a position\nin a list. It’s usually zero-based, meaning the first item in the list\nhas index 0, the second item has index 1, and so on. We’ll use\nzero-based indexes throughout this book.\n\n\n\n\nNote how the keys in the tree are numbered. Each set of children is\nnumbered from 0 and upwards. This is used to give each key a unique\nidentifier. For example the first, index 0, savings key is denoted\nm/1/0. m is special and refers to the master private key.\n\n\nHow is a tree structure like this accomplished? Let’s look closer at\nthe creation of some parts of the tree.\n\n\nThree important processes are performed to create the tree, as\nCreating the first two of Rita’s three savings keys. A random seed is used to create a master extended private key, which is then used to create child extended private keys. shows:\n\n\n\n\n\nFigure 9. Creating the first two of Rita’s three savings keys. A random seed is used to create a master extended private key, which is then used to create child extended private keys.\n\n\n\n\nA random seed of 128 bits is generated. This seed is what the whole\ntree grows up (um, down) from.\n\n\nThe master extended private key is derived from the seed.\n\n\nThe descendant extended private keys of the master extended\nprivate key are derived.\n\n\n\n\nAn extended private key (xprv) contains two items: a private key and a\nchain code (An xprv consists of a private key and a chain code.).\n\n\n\n\n\nFigure 10. An xprv consists of a private key and a chain code.\n\n\nThe private key is indistinguishable from an old-type private key\ngenerated directly from a random number generator. You can use it to\nderive a public key and a cookie token address. You usually make\naddresses only out of leaves, but you could use internal keys as well.\nThe other part of the xprv is the chain code. A chain code is the\nrightmost 256 bits of a 512-bit hash, hence the right-half hash icon\nin the figure. You’ll see soon how that hash is created. The chain\ncode’s purpose is to provide entropy when generating a child xprv. The\nmaster xprv doesn’t differ from other xprvs, but we give it a special\nname because it’s the ancestor of all keys in the tree. It is,\nhowever, created differently.\n\n\n\n\n\n\n\n\n\n\n\nIn step 1, the random seed is created in the same way as when you\ncreated private keys in [ch02]. In this example, you generate 128\nbits of random data, but it could just as well be 256 bits depending\non the level of security you want—128 bits are enough for most users.\nYou’ll see later how the choice of seed size will affect the backup\nprocess; a longer seed means more writing on a piece of paper during\nbackup. We’ll get back to this in Back to backup.\n\n\nSteps 2 and 3 deserve their own subsections.\n\n\nDeriving a master extended private key\n\n\n\n\n\n\n\n\n\n\nLet’s look deeper into how to generate the master xprv (Deriving Rita’s master xprv. The seed is hashed with HMAC-SHA512. The resulting hash of 512 bits is split into the left 256 bits, which become the master private key, and the right 256 bits, which become the chain code.).\n\n\n\n\n\nFigure 11. Deriving Rita’s master xprv. The seed is hashed with HMAC-SHA512. The resulting hash of 512 bits is split into the left 256 bits, which become the master private key, and the right 256 bits, which become the chain code.\n\n\n\n“CT seed”?\n\nAn HMAC needs two inputs: a value to hash and a key. You don’t have or\nneed a key for the master xprv because you have all the entropy you\nneed in the seed.  In Deriving Rita’s master xprv. The seed is hashed with HMAC-SHA512. The resulting hash of 512 bits is split into the left 256 bits, which become the master private key, and the right 256 bits, which become the chain code., you input CT seed to give the\nHMAC something. A key is needed later, when you derive children of\nthe master xprv.\n\n\n\n\nTo create the master private key, the seed is hashed using HMAC-SHA512\n(HMAC is short for Hash Based Message Authentication Code), which\nproduces a 512-bit hash value. HMAC-SHA512 is a special cryptographic\nhash function that, besides the normal single input, also takes a key.\nFrom a user’s perspective, you can regard HMAC-SHA512 as a normal\ncryptographic hash function but with multiple inputs. The hash value\nis split into the left 256 bits and the right 256 bits. The left 256\nbits become the master private key, which is a normal private key;\nit’s called the master private key because all other private keys\nare derived from this single private key (and the chain code). The\nright 256 bits become the chain code, used in the next step to\nderive children from the master xprv.\n\n\n\nDeriving a child extended private key\n\n\n\n\n\n\n\n\n\n\nYou just created Rita’s master xprv. It’s time to derive the child xprv\nthat groups together her three savings keys. The direct children of an\nxprv can be derived in any order. Let’s derive the savings account key,\nm/1, first. The process for deriving a child xprv from a parent xprv\nis as follows (Deriving a child xprv from a parent xprv. The parent’s public key and chain code and the desired index are hashed together. The parent private key is added to the left half of the hash, and the sum becomes the child private key. The right half becomes the child chain code.):\n\n\n\n\n\nFigure 12. Deriving a child xprv from a parent xprv. The parent’s public key and chain code and the desired index are hashed together. The parent private key is added to the left half of the hash, and the sum becomes the child private key. The right half becomes the child chain code.\n\n\n\n\nThe desired index is appended to the parent public key.\n\n\nThe public key and index become the input to HMAC-SHA512. The parent\nchain code acts as a source of entropy to the hash function. To\nsimplify, think of it as three pieces of data are hashed together.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe 512-bit hash value is split in half:\n\n\n\nThe left 256 bits are added, with normal addition (modulo 2256), to\nthe parent private key. The sum becomes the child private key.\n\n\nThe right 256 bits become the child chain code.\n\n\n\n\n\nThe child private key and the child chain code together form the child\nxprv.\n\n\n\n\nThis same process is used for all children and grandchildren of the\nmaster xprv until you have all the keys Rita wanted in her wallet.\n\n\nYou might be wondering why you need the addition—why not use the left\n256 bits as the child private key? The 512-bit hash is calculated from\nthe public key and the chain code—collectively called the extended\npublic key (xpub)—and an index. You’ll see later how to use the xpub\nin less secure environments, such as a web server, to generate a\ncorresponding tree of public keys. You need to add the parent\nprivate key to the left 256 bits to make it impossible for someone\nwith the xpub to generate child private keys.\n\n\n\n\nWhere were we?\n\nLet’s recall why you’re here: to create a wallet app that makes life\neasier for end users (You’re working on making a great wallet for users.).\n\n\n\n\n\nFigure 13. You’re working on making a great wallet for users.\n\n\nThe main duties of a wallet are to\n\n\n\n\nManage private keys\n\n\nCreate new addresses\n\n\nTransfer payment details from payee to payer\n\n\nMake a payment\n\n\nKeep track of funds\n\n\nBack up private keys\n\n\n\n\nWe’ve covered the first five items, but we aren’t quite finished with\nbackups. We just looked at xprv derivation, which is the groundwork for\nbetter backups.\n\n\n\nBack to backup\n\n\nBut the key paths?\n\nTo restore keys, you also need their paths. In Bitcoin, those paths\nare standardized in BIP44. If a wallet uses that standard, you\nimplicitly know the keys’ paths.\n\n\n\n\nYou want a safe, easy way to back up private keys. You’ve created an HD\nwallet to generate any number of private keys from a single seed. What’s\nthe minimum Rita needs to back up to restore all keys in her wallet,\nshould she lose it? Right: the seed (and the tree structure, see\nmargin). As long as her seed is safe, she can always re-create all her\nkeys.\n\n\nSuppose Rita’s 128-bit (16-byte) seed is\n\n\n\n16432a207785ec5c4e5a226e3bde819d\n\n\n\n\n\n\n\n\n\n\n\n\nIt’s a lot easier to write these 32-hex digits on a piece of paper than\nit would be to write her eight private keys. But the biggest win is that\nRita can write this down once and lock it in a safe. As long as that\npaper is safe, her wallet is safe from accidental loss. She can even\ncreate new keys from the same seed without having to make another\nbackup.\n\n\nBut it’s still difficult to write this down without any typos. What if\nRita makes a typo and then loses her wallet? She won’t be able to\nrestore any of her keys! You need something even simpler that’s more\ncompatible with how humans work.\n\n\nMnemonic sentences\n\n\nBIP39\n\nMost Bitcoin wallets use mnemonic sentences for backup. This is\nstandardized in BIP39. Before that, wallets typically used\npassword-protected files with all keys, which caused a lot of\nheadache.\n\n\n\n\nRecall that the seed is a sequence of bits. For example, Rita’s seed\nis 128 bits long. What if you could encode those bits in a more\nhuman-friendly way? You can!\n\n\nRita’s wallet used to create a seed using a random number generator,\nin the most straight-forward way possible. But if it had done it in a\nslightly different way, it could display her seed as a sequence of 12\nEnglish words, called a mnemonic sentence:\n\n\n\nbind bone marine upper gain comfort\ndefense dust hotel ten parrot depend\n\n\n\n\n\n\n\n\n\n\nThis mnemonic sentence presents the seed in a human-readable way. It’s\nmuch more approachable to write down 12 words than it is to write down\ncryptic hex code. If Rita loses her wallet, she can install the wallet\napp on another phone and restore the seed from those 12 words. Rita\ncan regenerate all her private keys from that seed.\n\n\nThis is a three-step process as shown in The three steps involved to create a seed from a random number generator..\n\n\n\n\n\nFigure 14. The three steps involved to create a seed from a random number generator.\n\n\nFirst, a random number is generated. Second, the mnemonic sentence,\nthat can be used for backup, is generated from the random number. In\nthe last and third step, you generate a seed from the mnemonic\nsentence. The last two steps are discussed more in detail in the next\ntwo subsections.\n\n\n\nGenerating a mnemonic sentence\n\n\n\n\nWarning\n\n\nWe’re going to explore how the mnemonic sentence and seed\ngeneration works. It’s really fun, but if you think this section goes\ntoo deep, you can accept the previous section and skip to\nExtended public keys.\n\n\n\n\n\nThe encoding starts with the random number, as shown in\nGenerating a 12-word mnemonic sentence from a random number. The random number is checksummed, and every group of 11 bits is looked up in a word list of 2,048 words.. The random number is hashed with SHA256, and the first 4\nbits of the hash—in this case, 0111—are appended to the random\nnumber. Those 4 bits act as a checksum.  You then arrange the bits\ninto 12 groups of 11 bits, where each group encodes a number in the\nrange 0 to 2047. Eleven bits can encode 211 = 2,048 different\nvalues, remember?\n\n\n\n\n\nFigure 15. Generating a 12-word mnemonic sentence from a random number. The random number is checksummed, and every group of 11 bits is looked up in a word list of 2,048 words.\n\n\nThe 12 numbers are looked up in a standardized word list of 2,048\nwords numbered from 0 to 2047. You can find this list in BIP39 from\n[web-bips]; it contains commonly used English words. After looking\nup all 12 numbers, the result is the mnemonic sentence.\n\n\n\n\n\n\n\n\n\nThe sentence doesn’t mean anything in particular. It’s 12 random words,\njust like the hex-encoded seed is 32 random hex digits.\n\n\nRita’s wallet shows the mnemonic sentence to her, and she writes the 12\nwords down on a piece of paper. She puts the paper in a safe place and\ngets on with her life.\n\n\n\nGenerating a seed from a mnemonic sentence\n\nRita’s wallet doesn’t stop there. It has yet to generate a seed that\nit can use to generate addresses for Rita. The wallet will generate\nthe seed in many steps (A seed is generated from a mnemonic phrase in 2048 steps.).\n\n\n\n\n\nFigure 16. A seed is generated from a mnemonic phrase in 2048 steps.\n\n\nThe mnemonic sentence is used as the main input for each of the 2048\nHMAC-SHA512 functions. This is the same function as we used in\nDeriving a master extended private key to generate a master xprv from the seed. The\nother input, which is called the key, is mnemonic1 in the first,\nleftmost, function. For subsequent functions the key input is the\noutput of the previous function.\n\n\nThe output from each function is added using bitwise XOR (exclusive\nor) to form the final result, which is our 512 bit seed. In bitwise\nXOR, two numbers are compared bit by bit, and if the bits are equal\nthe resulting bit is 0, otherwise 1. This seed is then used to\ngenerate a master xprv as described in Deriving a master extended private key.\n\n\nYou’re probably wondering why the seed generation uses 2048 steps of\nHMAC-SHA512. This process is called PBKDF2 (Password-Based Key\nDerivation Function 2), which is a standardized way to achieve\nso-called key stretching. Key stretching makes brute-force attacking\nthe mnemonic sentence harder because each try becomes slower due to the\nmany steps involved.\n\n\n\n\n\n\n\n\n\n\n\nThe next day, Rita drops her phone into the ocean, and it disappears\ninto the deep. She lost her wallet! But Rita isn’t very concerned. She\nbuys a new phone and installs the wallet app. She instructs her app to\nrestore from a backup. The wallet asks her for her mnemonic sentence.\nShe writes\n\n\n\nbind bone marine upper gain comfort\ndefense dust hotel ten parrot depend\n\n\n\ninto the wallet app. The app uses the 4-bit checksum discussed in the\nprevious section to make sure it’s correct. It does that by running\nthe mnemonic sentence generation backwards as Verifying the checksum of a mnemonic sentence illustrates.\n\n\n\n\n\nFigure 17. Verifying the checksum of a mnemonic sentence\n\n\nIf Rita accidentally writes the last word as deposit instead of\ndepend, the checksum check will probably fail because she wrote\nthe wrong word at the end. If she types depends instead of depend,\nthe decoding will definitely fail because there’s no word depends in\nthe word list.\n\n\nThe checksum is pretty weak—4 bits make only 16 possible checksums. A\nwrongly written mnemonic sentence, in which all words exist in the\nword list, would have a 1/16 probability of not being detected. This\nseems bad. But the probability that you’d write such a sentence is\nsmall, because your misspelled words have to exist in the word\nlist. This reduces the risk of an invalid mnemonic sentence being\nrestored.\n\n\nAfter the checksum has been verified, the app regenerates the seed as\nshown in A seed is generated from a mnemonic phrase in 2048 steps. and all of Rita’s private keys can be restored\nfrom that seed.\n\n\n\n\nExtended public keys\n\n\n\n\n\n\n\n\n\n\nRita created her wallet from a random 128-bit seed, which she backed\nup with a 12-word mnemonic sentence. Her wallet can create any number\nof private keys from that seed. She can organize them into different\n“accounts” as she pleases. Very nice. But HD wallets have another\nfeature: you can create a tree of public keys and chain codes without\nknowing any of the private keys.\n\n\nSuppose the cafe uses an HD wallet. It wants to start selling cookies on\nits website and delivering those cookies to coworkers’ cubicles.\n\n\nFor privacy reasons, the web server needs to be able to present a new\ncookie token address for every sale, but where does it get the\naddresses? The cafe could create an xprv for an online sales\naccount in its HD wallet and put that xprv on the web server, as\nThe cafe copies its online sales xprv to the web server. shows.\n\n\n\n\n\nFigure 18. The cafe copies its online sales xprv to the web server.\n\n\nThe web server can now create new addresses as the orders pour in.\nGreat! But what if Mallory, the gangster, gains access to the web\nserver’s hard drive? She can steal all the money in any of the addresses\nin the online sales account. She can’t steal from any other addresses in\nthe tree. For example, she can’t calculate any key in the counter\nsales account because she doesn’t have access to the master xprv, which\nis needed to calculate the counter sales account key and all its\nchildren.\n\n\nTypical web servers are prone to hacking attempts because they’re\nusually accessible from anywhere in the world. Storing money on the\nweb server would probably attract a lot of hacking attempts. Sooner or\nlater, someone would succeed in getting access to the web server’s\nhard drive, and steal the xprv.\n\n\nFor this reason, the cafe wants to avoid having any private keys on\nthe web server. Thanks to the HD wallet, this is possible by using\nxpubs (An xpub consists of a public key and a chain code.).\n\n\n\n\n\nFigure 19. An xpub consists of a public key and a chain code.\n\n\nAn xpub is similar to an xprv, but the xpub contains a public key and\na chain code, whereas the xprv contains a private key and a chain\ncode. An xprv shares the chain code with the xpub. You can create an\nxpub from an xprv, but you can’t create the xprv from the xpub. This\nis because public key derivation is a one-way function; a public key\ncan be derived from a private key, but a private key can’t be derived\nfrom a public key.\n\n\nThe cafe puts the xpub M/1 on the web server. By convention, we use\nM to denote an xpub path and m to denote an xprv path. M/1 and\nm/1 have the same chain code, but M/1 doesn’t have the private key,\nonly the public key. You can create the whole xpub tree from the master\nxpub (Generating the tree of xpubs from the master xpub. The general pattern is the same as when generating xprvs, but the child-derivation function differs.), which means you can generate any and all addresses\nwithout any private key. You can create addresses, but not spend money\nfrom those addresses.\n\n\n\n\n\nFigure 20. Generating the tree of xpubs from the master xpub. The general pattern is the same as when generating xprvs, but the child-derivation function differs.\n\n\nThis looks exactly like when you generated the tree of xprvs. The\ndifference is that you have no private keys. As Xpub derivation. The private key addition from the xprv derivation is replaced by public key “addition.” shows, the\nxpubs are generated differently than the xprvs. Please compare this to\nthe xprv derivation.\n\n\n\n\n\nFigure 21. Xpub derivation. The private key addition from the xprv derivation is replaced by public key “addition.”\n\n\n\nxprv derivation\n\n\n\n\n\n\n\n\nThis resembles xprv derivation. The difference is what you do with the\nleft 256 bits of the 512-bit hash. To calculate the child public key,\nyou treat the left 256 bits as if they were a private key and derive a\npublic key from them. This public key is then added to the parent\npublic key using the special public key addition operation. The\nresult is the child public key. Let’s compare the child public key\nderivation to the child private key derivation (The plus on the private side has a corresponding plus on the public side. The parent private key plus some value is the child private key. The parent public key plus the public key derived from the same value is the child public key.) from the\npoint after generating the left 256 bits of the HMAC-SHA512 hash.\n\n\n\n\n\nFigure 22. The plus on the private side has a corresponding plus on the public side. The parent private key plus some value is the child private key. The parent public key plus the public key derived from the same value is the child public key.\n\n\nNormal addition is used for the private key. You add a 256-bit number\nto the parent private key to get the child private key. But to keep\nthe result within 256-bit numbers, you use addition modulo 2256.\n\n\nThe addition used to derive the child public key isn’t exactly what most\npeople (including me) are used to. For now, let’s just say this addition\nworks. We’ll dig deeper into that in Public key math.\n\n\n\nDeriving hardened private keys\n\n\n\n\nWarning\n\n\nThis section is challenging. If you had a hard time\nunderstanding xprv derivation and xpub derivation, I suggest skipping\nthis section and jumping to Public key math. You don’t need this\nsection to understand the rest of this book.\n\n\n\n\n\nThis section will explain how to prevent a potential security issue\nwith normal xprv derivation.\n\n\nThe cafe’s online business works well. People are ordering cookies\nlike crazy! The online sales account grows, with a new public key for\nevery order. The xpub for the online sales account sits on the web\nserver, and the xprv is present only in the cafe’s wallet (and in a\nlocked-away mnemonic sentence).\n\n\nSuppose Mallory somehow steals the private key m/1/1, which contains\nonly 10 CT. This might seem harmless because that private key has so\nlittle money in it. But it could be worse than that. If Mallory has\nalso managed to get the xpub for the online sales account from the web\nserver, she can calculate the online sales xprv, as Mallory has stolen the private key m/1/1 from the cafe and the parent xpub from the web server. She can now steal all the money in the online sales account.\nshows.\n\n\n\n\n\nFigure 23. Mallory has stolen the private key m/1/1 from the cafe and the parent xpub from the web server. She can now steal all the money in the online sales account.\n\n\nRemember how the xprv derivation function used normal addition to\ncalculate a child private key from a parent private key?\n\n\n\n\\$\\text{"m/1"} + \\text{"left half hash of index 1"}=\\text{"m/1/1"}\\$\n\n\n\nYou can write this just as well as\n\n\n\n\\$\\text{"m/1/1"}-\\text{"left half hash of index 1"}=\\text{"m/1"}\\$\n\n\n\nMallory has everything she needs to calculate the left-half hash for any\nchild index of M/1 she pleases, but she doesn’t know which index her\nstolen private key has, so she starts testing with index 0:\n\n\n\n\\$\\text{"m/1/1"} - \\text{"left half hash of index 0"} = \\text{"a private key"}\\$\n\n\n\nShe derives the public key from this private key and notices that it\ndoesn’t match M/1, so 0 wasn’t the correct index. She then tries\nindex 1:\n\n\n\n\\$\\text{"m/1/1"} - \\text{"left half hash of index 1"} = \\text{"another private key"}\\$\n\n\n\nThis private key derives to the public key M/1. Bingo! She has\ncalculated the private key m/1 for the online sales account. The xprv\nshares the chain code with the xpub, so she also has the xprv for m/1,\nand she can calculate the private key tree for the account. Mallory\nsteals all the money from the online sales account. Not good.\n\n\nNow think about what would happen if Mallory had the master xpub. She\ncould use the same technique to derive the master xprv from the master\nxpub and m/1/1. Mallory can re-create all the private keys of all\naccounts in the entire wallet. Can you do something to prevent such a\ncatastrophic scenario? Yes, with yet another key-derivation\nfunction! This new key-derivation function is called hardened xprv\nderivation.\n\n\nSuppose the cafe wants to prevent Mallory from accessing the master\nxprv, even if she got the master xpub and a private key in the online\nsales account. The cafe can generate the xprv for the online sales\naccount using hardened xprv derivation, as Deriving a hardened child xprv for the online sales account. You use the parent private key as input to the hash function instead of the public key. shows.\n\n\n\nNormal child xprv derivation\n\n\n\n\n\n\n\n\n\n\n\nFigure 24. Deriving a hardened child xprv for the online sales account. You use the parent private key as input to the hash function instead of the public key.\n\n\nThe apostrophe in m/1\' isn’t a typo: it’s used to denote hardened\nkey derivation. The difference is that with hardened key derivation,\nyou hash the private key instead of the public key. An attacker\ncan’t do the “minus” trick anymore because the hash is derived from\nthe parent private key. Mallory can’t calculate the left-half hash to\nsubtract from the child private key because she doesn’t have the\nparent private key. The master xpub can’t be used to generate any child keys because m/0\' and m/1\' are hardened keys. illustrates the result.\n\n\n\n\n\nFigure 25. The master xpub can’t be used to generate any child keys because m/0\' and m/1\' are hardened keys.\n\n\nThis also means you can’t derive a hardened child xpub from a parent\nxpub. You must have the parent xprv to generate any children, public\nor private. The children of m/1\' can’t be derived as hardened\nprivate keys because that would require the cafe to put the private\nkey m/1\' on the online sales web server, which would be\ninsecure. Using nonhardened leaf keys in the online sales account\nmakes the cafe vulnerable to an attacker stealing m/1\'/1 and\nM/1\'. If that happens, all funds in the account will be stolen. With\nhardened xprv, you solve the case of a stolen M and m/1\'/1 but not\nthe case with a stolen M/1\' and m/1\'/1.\n\n\n\nPublic key math\n\nThis section digs deeper into the math behind public keys. We’ll start\nby looking at how a public key is derived from a private key using\npublic key multiplication. Later subsections will show why child\nxpub derivation, using public key addition, works, and how public\nkeys are encoded in Bitcoin.\n\n\nPublic key multiplication\n\n\n\n\nWarning\n\n\nI’ll try to explain this topic in simple terms, but if you think it’s\ntoo much, you can skip this section and jump to Recap.\n\n\n\n\n\n\nNormal public key derivation\n\n\n\n\n\n\n\n\nThink back to when you derived a public key from a private key in\n[ch02]. I didn’t really tell you how the public key was derived.\nI’ll make an attempt here instead.\n\n\nA public key in Bitcoin is a whole-number solution to this equation:\n\n\n\n\\$y^2 = x^3 + 7 \\mod{(2^{256}-4294968273)}\\$\n\n\n\nMany such solutions exist, about \\$2^{256}\\$ of them, so let’s\nsimplify by using the solutions to \\$y^2 = x^3 + 7 \\mod{11}\\$\ninstead (Whole-number solutions to the elliptic curve \\$y^2 = x^3 + 7 \\mod{11}\\$. Each such solution is a public key.).\n\n\n\nBitcoin uses this curve\n\nThis specific elliptic curve is called secp256k1 and is used in\nBitcoin. Plenty of other curves have similar properties.\n\n\n\n\n\n\n\nFigure 26. Whole-number solutions to the elliptic curve \\$y^2 = x^3 + 7 \\mod{11}\\$. Each such solution is a public key.\n\n\n\nCurve? I see only dots.\n\nIt’s called a curve because in the continuous, real-number world,\nthe solutions form a curve like this:\n\n\n\n\n\n\n\n\n\nThe previous equations are examples of a class of equations called\nelliptic curves, and a solution is often referred to as a point\non the curve. You can now calculate a public key, which is a point\non the curve, from a private key. To do this, start at a special\npoint, \\$G=(6,5)\\$, on the curve. \\$G\\$ is somewhat arbitrarily\nchosen, but it’s widely known by everybody to be the starting point\nfor public key derivation. The public key is the private key\nmultiplied by \\$G\\$.\n\n\nSuppose your private key is \\$5\\$. Then your public key is \\$5G\\$.\n\n\nTo calculate this multiplication, you need two basic public key\noperations: addition and doubling, where doubling can be seen as\nadding a point to itself.\n\n\nTo add two points (Point addition. You add \\$(x, y)=(6,5)\\$ to \\$(2, 2)\\$ by drawing a straight line through them that will intersect a third point.), you draw a straight line that “wraps\naround” the edges of the diagram and that intersects your two points\nand one third point. This third point is the negative result of the\naddition. To get the final result of the addition, take the symmetric\npoint at the same \\$x\\$ value.\n\n\n\n\n\nFigure 27. Point addition. You add \\$(x, y)=(6,5)\\$ to \\$(2, 2)\\$ by drawing a straight line through them that will intersect a third point.\n\n\n\nIs there always a third point?\n\nYes, there’s always a line that intersects a third point. It’s one of\nthe curve’s important properties.\n\n\n\n\nThe result of \\$(6, 5) + (2, 2)\\$ is \\$(7, 8)\\$. The straight\nline between the two points crosses the point \\$(7, 3)\\$. The\ncomplement point to \\$(7, 3)\\$ is \\$(7, 8)\\$, which is the\nresult of the addition.\n\n\nTo double a point (Point doubling. To double a point P, draw a line through P with a special slope that’s calculated from P. The line crosses another point, \\$(3,10)\\$. The complement point \\$(3, 1)\\$ is the doubling result.) is to add it to itself, but there’s no\nslope to be calculated from a single point. In this special case, you\ncalculate the slope from the single point \\$P=(6,5)\\$ as\n\\$3*x^2*(2y)^{-1} \\mod{11} = 2\\$. The process is almost the same as\nadding two different points, but you calculate the slope of the line\ndifferently.\n\n\n\n\n\nFigure 28. Point doubling. To double a point P, draw a line through P with a special slope that’s calculated from P. The line crosses another point, \\$(3,10)\\$. The complement point \\$(3, 1)\\$ is the doubling result.\n\n\nUsing these two basic operations, adding and doubling, you can derive\nthe multiplication of \\$5\\$ and \\$G\\$. In binary form, \\$5\\$ is\n\n\n\n\\$101_{binary} = 1*2^2 + 0*2^1 + 1*2^0\\$\n\n\n\nYour public key is then\n\n\n\n\\$5G = 1*2^2*G + 0*2^1*G + 1*2^0*G\\$\n\n\n\nStart in \\$G\\$ and calculate the resulting public key point by taking\nterms from right to left:\n\n\n\nElliptic curve calculator\n\nThere’s a nice elliptic curve calculator at\n[web-elliptic-curve-calculator] that you can play with to get a\nbetter feel for how this works.\n\n\n\n\n\n\nCalculate \\$2^0*G = 1*G = G\\$. Easy. Now remember this point.\n\n\nCalculate \\$2^1*G = 2*G\\$. This is a point doubling of the\npreviously remembered point G from step 1. Remember the point. Because\nthere is a 0 in front of \\$2^1*G\\$, you don’t do anything with\nit—just remember it.\n\n\nCalculate \\$2^2*G = 2*2*G\\$, which is a doubling of the\npreviously remembered point \\$2*G\\$. Because there is a 1 in front of\nthe \\$2^2*G\\$ term, you add this result to the result of step 1.\n\n\n\n\nIn short, multiplication is performed by a sequence of adding and\ndoubling operations.\n\n\n\nWhy is this secure?\n\nThe multiplication process is pretty easy to complete; it takes about\n256 steps for a 256-bit private key. But to reverse this process is a\ntotally different story. No known way exists to get the private key by\npoint “division” (for example, point \\$(6,6)\\$ “divided by”\n\\$G\\$). The only known way is to try different private keys and see\nif the public key is what you’re looking for. This is what makes\npublic-key derivation a one-way function.\n\n\n\nXpub derivation\n\nYou’ve seen how an ordinary public key is derived from a private key\nthrough public-key multiplication. But how can adding the parent public\nkey with the public key derived from the left 256 bits make the child\npublic key? See The child public key is derived by adding the parent public key with the public key derived from the left 256 bits..\n\n\n\n\n\nFigure 29. The child public key is derived by adding the parent public key with the public key derived from the left 256 bits.\n\n\nYou can convince yourself that it works by looking at both normal\npublic-key derivation and child public-key derivation in the same\npicture: see Xpub derivation and normal public-key derivation. A normal public key is the starting point G multiplied by a private key. A child public key is the parent public key added to the public key derived from the left-half hash..\n\n\n\n\n\nFigure 30. Xpub derivation and normal public-key derivation. A normal public key is the starting point G multiplied by a private key. A child public key is the parent public key added to the public key derived from the left-half hash.\n\n\nThe nice thing with elliptic curves is that the special public key\n“add” operation works a bit like normal add. The same goes for the\nspecial public key “multiplication.” You can thus solve some\nequations:\n\n\n\n\\$c=p+h \\\\$\n\\$C=Gh+Gp=G(h+p)=Gc\\$\n\n\n\nThe result, \\$C=Gc\\$, is exactly how to derive the public key\n\\$C\\$ from the private key \\$c\\$.\n\n\n\nPublic key encoding\n\nDo you remember how John’s public key looked like a big number?\n\n\n\n035541a13851a3742489fdddeef21be13c1abb85e053222c0dbf3703ba218dc1f3\n\n\n\nThat doesn’t look like a pair of coordinates, does it? The public key is\nencoded in a certain way. Because of the symmetry, exactly two points\nexist for every value of \\$x\\$, one with an even \\$y\\$ value and one\nwith an odd \\$y\\$ value (Each point on the curve has a symmetric point at the same \\$x\\$ value.).\n\n\n\n\n\nFigure 31. Each point on the curve has a symmetric point at the same \\$x\\$ value.\n\n\nYou don’t need to store \\$y\\$ values, only whether the \\$y\\$\nvalue is even or odd. You do this by prefixing the \\$x\\$ value with\n02 (even) or 03 (odd). In John’s case, the \\$y\\$ value happens\nto be odd, so the prefix is 03.\n\n\nThis is why public keys are 33 bytes and not 32 bytes. It’s a 256-bit\nnumber—the \\$x\\$-coordinate—prefixed by a byte specifying the odd/even\nproperty.\n\n\nThe curve in the figure has a single point \\$x=5, y=0\\$. This\ndoesn’t look symmetric, but it’s a so-called double-root to the\ncurve—it’s two points with the same \\$y\\$ value 0. They’re symmetric\nbecause they’re at equal distance 5.5 from the symmetry line. In this\nspecial case, both these points will use 02 because 0 is even.\n\n\n\n\nRecap\n\nLet’s look back at what you’ve learned in this chapter. An HD wallet\ngenerates a tree of keys from a random seed. It can use key hardening\nto isolate different branches of the tree from each other.\n\n\n\n\n\n\n\n\n\n\n\nUsers back up their keys by writing the random seed in the form of 12\nto 24 English words on a piece of paper and lock it up safely.\n\n\nThe cafe accepts cookie tokens in its online shop. It only puts the\nxpub for the online sales account, M/1\', on the web server, which\ncan now create as many addresses as needed without using any private\nkeys. The private keys are kept in the cafe’s wallet and never touch\nthe web server.\n\n\n\n\n\n\n\nSystem changes\n\nOur concept table (Nothing new in the concept table) isn’t updated in this chapter. The\nwallets described in this chapter work basically as they do in\nBitcoin, but they send an email to Lisa instead of sending a\ntransaction across the global Bitcoin network. We’ll get to that in\nthe next chapter.\n\n\nTable 1. Nothing new in the concept table\n\n\n\n\n\n\n\nCookie Tokens\nBitcoin\nCovered in\n\n\n\n\n1 cookie token\n1 bitcoin\n[ch02]\n\n\nThe spreadsheet\nThe blockchain\n[ch06]\n\n\nEmail to Lisa\nA transaction\n[ch05]\n\n\nA row in the spreadsheet\nA transaction\n[ch05]\n\n\nLisa\nA miner\n[ch07]\n\n\n\n\nLet’s have a release party! Cookie tokens 4.0, fresh from the lab!\n\n\nTable 2. Release notes, cookie tokens 4.0\n\n\n\n\n\n\n\nVersion\nFeature\nHow\n\n\n\n\n4.0\nEasy to make payments and create new addresses\nMobile app “wallet”\n\n\nSimplified backups\nHD wallets are generated from a seed. Only the seed, 12 to 24 English\nwords, needs to be backed up.\n\n\nCreating addresses in insecure environments\nHD wallets can generate public key trees without ever seeing any of\nthe private keys.\n\n\n3.0\nSafe from expensive typing errors\nCookie token addresses\n\n\nPrivacy improvements\nA PKH is stored in the spreadsheet instead of a personal name.\n\n\n2.0\nSecure payments\nDigital signatures solve the problem with imposters.\n\n\n\n\n\n\nExercises\n\nWarm up\n\n\n\n\n\n\n\n\n\n\n\n\nSuppose you use a bitcoin wallet app and want to receive 50 BTC\nfrom your friend to your Bitcoin address\n155gWNamPrwKwu5D6JZdaLVKvxbpoKsp5S. Construct a payment URI to give to\nyour friend. Hint: in Bitcoin, the URI starts with bitcoin: instead of\nct:. Otherwise, they’re the same.\n\n\nHow many coin flips does a random password of 10 characters\ncorrespond to? The password is selected from a 64-character alphabet.\n\n\nName a few problems with password-protected backups. There are\nat least four.\n\n\nWhat three major steps are involved when a seed is created in an HD\nwallet that uses mnemonic sentences? You only need to answer this on a\nhigh level.\n\n\nWhat does an xprv consist of?\n\n\nWhat does an xpub consist of?\n\n\n\n\nExercises 4.7 and 4.8 assume that you read\nDeriving hardened private keys. If you skipped that section, you can\nskip these exercises, too.\n\n\n\n\nSuppose you want to make a hardened xprv with index 7 from\nm/2/1. What information do you need to create m/2/1/7\'?\n\n\nCan you derive xpub M/2/1/7\' from M/2/1? If not, how would\nyou derive M/2/1/7\'?\n\n\n\n\n\nDig in\n\n\n\nSuppose you’re a bad guy and have the master xpub of a clueless\nvictim. You’ve also stolen the private key m/4/1 that contains 1 BTC.\nAssume you also know this private key has this specific path. Describe\nhow you’d go about calculating the master xprv. Use these hints:\n\n\n\n\n\n\n\nSuppose instead that your clueless victim had 0 bitcoins on the\nprivate key m/4/1, but plenty of money on other addresses under the\nsame xprv. Would you be able to steal any money?\n\n\n\n\nIf you didn’t read Deriving hardened private keys, you can skip exercise\n4.11.\n\n\n\n\nSuggest a better approach your victim could have used to prevent you\nfrom stealing all the money.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSay the cafe owner wants employees to have access to the counter\nsales account because they must be able to create a new address for\neach sale. But they must not have access to the private keys because\nthe owner doesn’t trust the employees to handle them securely. Suggest\nhow to achieve this. Hint: a wallet can import an xpub.\n\n\nSuppose you work at the cafe and have loaded an xpub into your\nwallet. Your colleague Anita has loaded the same xpub into her wallet.\nYou can both request payments from customers that go into the same\naccount. How would you notice when Anita has received money into a\npreviously empty key? Hint: you can create keys ahead of time.\n\n\n\n\n\n\nSummary\n\n\n\nYou usually use a mobile app, called a wallet, to send and receive\nmoney—cookie tokens or bitcoins.\n\n\nThe wallet creates and stores keys, scans or shows payment details,\nsends payments, shows your balance, and backs up keys. You don’t have to\ndo any of this manually.\n\n\nBackups are hard to do right. Password-protected backups suffer from\nproblems with forgotten passwords, technology improvements, and humans\nbeing lousy random number generators.\n\n\nWith HD wallets, you back up your random seed and store that seed in a\nsafe place. Do it only once.\n\n\nThe seed can be encoded using a mnemonic sentence, which makes it easier\nto write down the seed.\n\n\nHD wallets generate multiple private keys from a seed and organize them\nin a tree structure to improve privacy.\n\n\nThe tree of public keys—or any of its branches—can be generated from an\nxpub. This is useful for insecure environments such as web servers.\n\n\nHardened private key derivation keeps “accounts” compartmental\xadized. It\nconfines an attacker to a single account.\n\n\n\n\n\n', 'body_type': 'html', 'authors': ['Kalle Rosenbaum'], 'domain': 'https://github.com', 'url': 'https://github.com/kallerosenbaum/grokkingbitcoin/blob/master/ch04-wallets.adoc', 'created_at': '2023-06-29T13:58:29.995843'}}, {'_index': 'bitcoin-search-scrapy-23', '_id': 'pTfTBokBCZBMBhppBtVh', '_score': 1.0, '_ignored': ['body.keyword', 'body_formatted.keyword'], '_source': {'id': 'grokkingbtc-f19d1040-a486-4a65-b85e-11e94874677d', 'title': '[Grokking Bitcoin] Transactions', 'body_formatted': '<article><div>\n<h2><a><svg><path></path></svg></a>Transactions</h2>\n<div>\n<div>\n<p>This chapter covers</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Bitcoin, or cookie token, transactions</p>\n</li>\n<li>\n<p>Creating, confirming, and verifying transactions</p>\n</li>\n<li>\n<p>Programming money</p>\n</li>\n</ul>\n</div>\n<div>\n<p>The cookie token payments you and your coworkers have been making so far\nhave some serious problems. The worst is that Lisa can steal, which\nworries some new people. They’re hesitant to use the system if they know\nLisa can steal from them.</p>\n</div>\n<div>\n<p>This chapter will focus mainly on <em>transactions</em> (<a>Bitcoin transactions</a>): pieces\nof data that formalize how users send payments to Lisa. Transactions\nreplace the old email to Lisa. They’ll be stored as is in the\nspreadsheet instead of using the current To, From, and CT scheme. This\nwill make it impossible for Lisa to steal other people’s money because\nanyone can now verify all payments in the spreadsheet.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 1. Bitcoin transactions</div>\n</div>\n<div>\n<p>In this chapter, we’ll go deep on transactions and explore how they’re\n<em>programmable</em>, meaning they’re flexible as far as what you can do\nwith them. For example, multisignature transactions can require two\nsignatures out of three possible signatures, to spend money shared among\nthree people.</p>\n</div>\n<div>\n<p>After this chapter, the system will have changed a lot—in how wallets\ncreate payments, how Lisa verifies payments, and how payments are\nstored. Most important, everyone will be able to verify payments in the\nspreadsheet.</p>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Problems with the old system</h3>\n<div>\n<p>Lisa is performing valuable work. She makes sure no one cheats by\nverifying digital signatures and checking public key hash (PKH) balances\nbefore confirming a payment. She confirms payments by adding them to the\ncookie token spreadsheet.</p>\n</div>\n<div>\n<p>But this old approach presents several problems:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Lisa is getting tired of calculating the balance before approving a\npayment. The ledger is growing, and each check becomes more\ntime-consuming as new payments are added.</p>\n</li>\n<li>\n<p>If you have two addresses with 5 CT each, you must make two separate\npayments to pay 10 CT for a cookie. This lays an unnecessary burden on\nthe sender as well as Lisa. It also bloats the spreadsheet with\nexcessive rows.</p>\n</li>\n<li>\n<p>Because the company has grown and some people don’t know Lisa well,\ntrust in her begins to fade. Some people fear Lisa will steal cookie\ntokens from them in the spreadsheet. Only Lisa can verify signatures\nbecause only she sees the emails sent to her. So she <em>could</em> increase\nthe CT column of a payment to her or add a row with a false payment\nfrom, say, John to Lisa (<a>Bad stuff Lisa <em>could</em> do. She wouldn’t, but she could.</a>). No one could prove Lisa\ncommitted fraud. It doesn’t matter that she’s the most trustworthy\nhuman on earth.  If people don’t know that, they’re going to assume\nLisa is as greedy as everyone else.</p>\n</li>\n</ul>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 2. Bad stuff Lisa <em>could</em> do. She wouldn’t, but she could.</div>\n</div>\n<div>\n<p>Note that Lisa can’t create any new money, other than the 7,200 CT per\nday as agreed. Also if she tries to steal more than what’s available on\na PKH, someone verifying the spreadsheet will notice the total amount of\nmoney is becoming too big. Lisa will get busted.</p>\n</div>\n<div>\n<div>\n<div>Minimize trust</div>\n<div>\n<p>Minimizing trust between people is what Bitcoin is all about.\nTransactions bring us one step closer to a trustless system in which\neveryone can verify everything.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Lisa hates that people distrust her. She knows there’s not much she can\ndo to change her coworkers’ level of trust. An interesting alternative\nis to <em>minimize the trust needed</em>. She concludes that the best way to\ndo this is to make the process super-transparent so everyone can verify\npayments. At the same time, she’ll improve how she verifies that people\ndon’t spend money they don’t have and how to spend from multiple\naddresses at the same time. She invents the <em>cookie token transaction</em>\nto solve the three problems outlined previously.</p>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Paying using a transaction</h3>\n<div>\n<p>Transactions will replace both how a user’s wallet sends a payment to\nLisa and what’s stored in the spreadsheet. They won’t change how wallets\nbehave from a user’s perspective—the wallet app will <em>look</em> exactly the\nsame.</p>\n</div>\n<div>\n<p>Suppose John wants to buy a cookie in the cafe. He won’t email Lisa\nthe way he’s done so many times before. The wallet software now uses\ntransactions, so his wallet will create a transaction instead, as\n<a>The payment process is the same for users, but it’s different for Lisa and the spreadsheet.</a> shows. The transaction’s purpose is to pay 10 CT to the\ncafe’s cookie token address.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 3. The payment process is the same for users, but it’s different for Lisa and the spreadsheet.</div>\n</div>\n<div>\n<p>John scans the cafe’s payment URI, and his wallet creates a transaction\nand asks him to accept it. He clicks OK, and the wallet signs the\ntransaction. John’s wallet then sends the signed transaction as an\nattachment in an otherwise empty email to Lisa.</p>\n</div>\n<div>\n<p>The transaction contains information about where to send money. But it\nalso contains information about <em>what money</em> to spend by referencing\nspecific “coins” called <em>unspent transaction outputs</em> (UTXOs) that John\nreceived in previous transactions.</p>\n</div>\n<div>\n<p>Lisa verifies that the coins spent in the transaction exist and aren’t\nalready spent. She also verifies that the signatures—there might be\nseveral in a transaction—are valid. If all checks pass, Lisa confirms\nthe transaction by appending it, exactly as she received it, to the end\nof the spreadsheet.</p>\n</div>\n<div>\n<p>Once the transaction hits the spreadsheet, anyone can make the same\nverification of that transaction that Lisa did. They can do this to\nverify Lisa doesn’t steal money from someone else or otherwise mess with\nother people’s money.</p>\n</div>\n<div>\n<p>In the next three subsections, we’ll dig deeper into the three phases:\ncreate, confirm, and verify.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Creating the transaction</h4>\n<div>\n<div>\n<div>\n<div>John’s transaction</div>\n<ul>\n<li>\n<p>❏ Create (John)</p>\n</li>\n<li>\n<p>❏ Confirm (Lisa)</p>\n</li>\n<li>\n<p>❏ Verify (anyone)</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div>\n<p>Let’s dive in and look closer at how John’s transaction is created.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 4. John’s wallet prepares to pay 10 CT for a cookie. He uses two keys with funds to cover the cost. He pays himself the change of 3 CT to a fresh address. The transaction isn’t yet signed.</div>\n</div>\n<div>\n<p>John’s wallet has created a new transaction (<a>John’s wallet prepares to pay 10 CT for a cookie. He uses two keys with funds to cover the cost. He pays himself the change of 3 CT to a fresh address. The transaction isn’t yet signed.</a>). It has two\n<em>inputs</em> and two <em>outputs</em>. Inputs specify which outputs of\nprevious transactions to spend. Outputs specify where the money goes.</p>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Inputs</h5>\n<div>\n<p>The inputs specify which transaction outputs to spend. John has two\nUTXOs, one with 8 CT and one with 5 CT. The unspent outputs belong to\ntwo previous transactions, transaction 1 and transaction 2, that paid\nmoney to John. Now, John wants to spend these UTXOs.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>A transaction input references a previous transaction using the previous\ntransaction’s <em>transaction ID</em> (txid). The transaction’s txid is its\ndouble SHA256 hash. It’s called a transaction <em>ID</em> because this hash is\noften used to refer to the transaction, as in the case with inputs in\n<a>John’s wallet prepares to pay 10 CT for a cookie. He uses two keys with funds to cover the cost. He pays himself the change of 3 CT to a fresh address. The transaction isn’t yet signed.</a>.</p>\n</div>\n<div>\n<table>\n<tbody><tr>\n<td>\n<div>Note</div>\n</td>\n<td>\nThe rationale for using double SHA256 here isn’t entirely clear, but\ndoing so prevents something called a <em>length-extension attack</em>.\nBitcoin’s creator probably used double SHA256 as a security measure in\norder to not have to think about these kinds of attacks. For details,\nsee <a>[web-length-extension-attack]</a>.\n</td>\n</tr>\n</tbody></table>\n</div>\n<div>\n<p>John’s first input, with index 0, contains</p>\n</div>\n<div>\n<ul>\n<li>\n<p>The txid of transaction 1</p>\n</li>\n<li>\n<p>The index, 1, of the output in transaction 1 to spend</p>\n</li>\n<li>\n<p>An empty placeholder for a signature</p>\n</li>\n</ul>\n</div>\n<div>\n<p>His second input, with index 1, contains</p>\n</div>\n<div>\n<ul>\n<li>\n<p>The txid of transaction 2</p>\n</li>\n<li>\n<p>The index, 0, of the output in transaction 2 to spend</p>\n</li>\n<li>\n<p>An empty placeholder for a signature</p>\n</li>\n</ul>\n</div>\n<div>\n<p>John will fill in the signatures last, after the transaction is\notherwise complete.</p>\n</div>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Outputs</h5>\n<div>\n<p>A transaction output contains an amount and a PKH. John’s transaction\nhas two outputs. The output at index 0 pays 10 CT to PKH<sub>C</sub>, the cafe,\nfor the cookie. The output at index 1 pays 3 CT back to one of John’s\nown keys, PKH<sub>3</sub>. We call this <em>change</em> because it resembles traditional\nchange, in which you pay $75 with a $100 bill and get $25 back: John\npays with 13 CT and gets 3 CT back to his change address, PKH<sub>3</sub>. Change\nis needed because you can’t partly spend a transaction output. You\neither spend it completely, or you don’t spend it.</p>\n</div>\n<div>\n<p>The outputs and inputs are a bit more advanced than just specifying a\nPKH in an output and a signature in the input. In reality, the output\ncontains a computer program that will verify the signature in the\nspending input. We’ll talk more about this later.</p>\n</div>\n<div>\n<div>\n<div>Transaction fee</div>\n<div>\n<p>Normally, you need to pay a transaction fee for the Bitcoin network to\nprocess your transaction.</p>\n</div>\n</div>\n</div>\n<div>\n<p>For a transaction to be valid, the sum of the input amounts must be\ngreater than or equal to the sum of the output amounts. The\ndifference, if any, is called a <em>transaction fee</em>, which we’ll\ndiscuss in <a>[ch07]</a>. For now, John pays no transaction fee, so his\noutput sum matches the input sum exactly.</p>\n</div>\n<div>\n<p>The transaction is now created, but it isn’t yet signed. Anyone could\nhave created this transaction because it’s based completely on public\ninformation. The inputs just refer to transactions in the spreadsheet\nand indexes within those transactions. But only John will be able to\nsign this transaction, because only he has the private keys\ncorresponding to PKH<sub>1</sub> and PKH<sub>2</sub>.</p>\n</div>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Signing the transaction</h5>\n<div>\n<p>John clicks OK in his wallet to approve signing the transaction. The\nwallet now needs to make two signatures, one for PKH<sub>1</sub> and one for\nPKH<sub>2</sub>. This is because John must prove he has both the private key\nfor PKH<sub>1</sub> and the private key for PKH<sub>2</sub>. See <a>John’s wallet signs the transaction. Each input gets its own signature. The public key is also needed in the inputs because anyone should be able to verify the signature.</a>.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 5. John’s wallet signs the transaction. Each input gets its own signature. The public key is also needed in the inputs because anyone should be able to verify the signature.</div>\n</div>\n<div>\n<p>Each input needs to be signed individually. The private key\ncorresponding to PKH<sub>1</sub> must be used to sign the input at index 0\nbecause that input spends money addressed to PKH<sub>1</sub>. Similarly, the\nprivate key corresponding to PKH<sub>2</sub> must be used for the signature of\nthe input at index 1 because it spends money addressed to PKH<sub>2</sub>.</p>\n</div>\n<div>\n<p>Each signature will commit to the entire transaction, which means the\nsigning algorithm will hash the entire transaction, excluding\nsignatures. If anything changes in the transaction, any signature made\nfor this transaction will become invalid.</p>\n</div>\n<div>\n<p>To make verification easier, you sign a cleaned version of the\ntransaction, which means there are no signatures in any of the inputs.\nYou can’t put a signature in input 0 and <em>then</em> sign input 1.\nVerification would be difficult if the person verifying didn’t know in\nwhat order the signatures were made. If you make <em>all</em> signatures from a\ncleaned transaction and <em>then</em> add all signatures to it, it doesn’t\nmatter in what order the signatures were made.</p>\n</div>\n<div>\n<p>When the wallet has made all signatures, it adds them to the\ntransaction. But one piece is still missing. How can someone verifying\nthe transaction—for example, the cafe—know which public key to use to\nverify a signature? The cafe can see only the PKH in the spent output\nand the signature in the spending input. It can’t get the public key\nfrom the PKH because cryptographic hashes are one-way functions,\nremember? John’s wallet must explicitly add the corresponding public key\nto the input. The signature in input 0 that spends money from PKH<sub>1</sub>\nneeds to be verified with the public key from which PKH<sub>1</sub> was\ngenerated. Similarly, input 1 gets the public key corresponding to\nPKH<sub>2</sub>.</p>\n</div>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Lisa confirms the transaction</h4>\n<div>\n<div>\n<div>\n<div>John’s transaction</div>\n<ul>\n<li>\n<p>✓ Create (John)</p>\n</li>\n<li>\n<p>❏ Confirm (Lisa)</p>\n</li>\n<li>\n<p>❏ Verify (anyone)</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div>\n<p>The transaction is ready to be sent to Lisa. John’s wallet sends it as\nan attachment in an email. Lisa picks up the transaction and verifies\nthat:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>The transaction spends outputs of transactions that actually exist\nin the spreadsheet and that they aren’t already spent by some other\ntransaction in the spreadsheet.</p>\n</li>\n<li>\n<p>The total value of the transaction outputs doesn’t exceed the total\nvalue of the transaction inputs. Otherwise, the transaction would\ncreate new money out of thin air.</p>\n</li>\n<li>\n<p>The signatures are correct.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>Lisa doesn’t have to calculate the PKH balance anymore, but she needs\nto check that the spent output exists and isn’t already spent.</p>\n</div>\n<div>\n<p>How does she check that an output of a transaction is unspent? Doesn’t\nshe have to search the spreadsheet to look for transactions that spend\nthis output? Yes, she does. This seems about as cumbersome as\nsearching through the spreadsheet to calculate balances. Don’t worry:\nLisa has a plan.</p>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Unspent transaction output set</h5>\n<div>\n<div>\n<div>UTXO set</div>\n<div>\n<p>All nodes in the Bitcoin network maintain a private UTXO set to speed\nup transaction verification.</p>\n</div>\n</div>\n</div>\n<div>\n<p>To make the unspent checks easier, she creates a new, private database\nthat she calls the <em>UTXO set</em> (<a>Lisa verifies that John doesn’t double spend by using her UTXO set.</a>). It’s a set of all UTXOs.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 6. Lisa verifies that John doesn’t double spend by using her UTXO set.</div>\n</div>\n<div>\n<p>An entry in the UTXO set consists of a txid, an index (idx), and the\nactual transaction output. Lisa keeps her UTXO set updated while\nverifying transactions.</p>\n</div>\n<div>\n<div>\n<div>Double spend</div>\n<div>\n<p><em>Double spend</em> means to spend the same output twice. Lisa can prevent\ndouble spends by consulting her UTXO set.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Before Lisa adds John’s transaction to the spreadsheet, she makes sure\nall outputs that the transaction spends are in the UTXO set. If not,\nthen John is trying to spend money that either never existed in the\nspreadsheet or is already spent (usually referred to as a <em>double-spend\nattempt</em>).</p>\n</div>\n<div>\n<p>For each input in John’s transaction, Lisa uses her UTXO set to look up\nthe txid and the output index. If all spent outputs are present in the\nUTXO set, no double-spend attempt or spending of nonexistent coins is\ndetected. In this case, Lisa finds both outputs in her UTXO set and\nstarts verifying signatures. Lisa needs to verify the signatures of both\nof John’s transaction inputs.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 7. Lisa verifies the first signature of John’s transaction.</div>\n</div>\n<div>\n<p>She grabs the PKH from the output spent by the first input and verifies\nthat it matches the hash of the public key in the input (<a>Lisa verifies the first signature of John’s transaction.</a>).\nShe verifies the signature in the input using the public key, the\nsignature, and the transaction, and then verifies the second input’s\nsignature the same way. Both are good.</p>\n</div>\n<div>\n<p>Lisa then adds the confirmed transaction to the spreadsheet. She must\nremove the newly spent outputs from the UTXO set and add the outputs of\nJohn’s transaction to it (<a>Lisa adds the transaction to the spreadsheet and removes the spent outputs from the UTXO set.</a>). This is how she keeps the UTXO\nset updated to reflect the transaction spreadsheet’s contents.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 8. Lisa adds the transaction to the spreadsheet and removes the spent outputs from the UTXO set.</div>\n</div>\n<div>\n<div>\n<div>Rebuilding the UTXO set</div>\n<div>\n<p>The UTXO set is built from the transactions in the spreadsheet only. It\ncan be re-created at any time, notably by anyone with read access to the\nspreadsheet.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Lisa keeps the UTXO set up to date by updating it as <a>Lisa adds the transaction to the spreadsheet and removes the spent outputs from the UTXO set.</a>\nillustrates for every incoming transaction. If she loses the UTXO set,\nshe can re-create it from the spreadsheet by starting with an empty\nUTXO set and reapplying all transactions in the spreadsheet to it, one\nby\none.</p>\n</div>\n<div>\n<p>It isn’t only Lisa who can create a UTXO set. Anyone with access to the\nspreadsheet can now do the same. This is important in later chapters,\nwhen we replace Lisa with multiple people doing her job. It’s also\nimportant for people who just want to verify the spreadsheet to convince\nthemselves the information in it is correct.</p>\n</div>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Anyone verifies the transaction</h4>\n<div>\n<div>\n<div>\n<div>John’s transaction</div>\n<ul>\n<li>\n<p>✓ Create (John)</p>\n</li>\n<li>\n<p>✓ Confirm (Lisa)</p>\n</li>\n<li>\n<p>❏ Verify (anyone)</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div>\n<p>Now that John’s transaction is stored in the spreadsheet exactly as he\ncreated it, anyone with read access can verify it. Anyone can create a\n<em>private</em> UTXO set, work through all the transactions, and end up with\nthe exact same UTXO set as Lisa.</p>\n</div>\n<div>\n<p>This means anyone can make the same checks that Lisa does. They can\nverify that Lisa is doing her job. These verifiers are important to the\nsystem because they make sure updates to the spreadsheet obey the\nagreed-on rules.</p>\n</div>\n<div>\n<p>In Bitcoin, these verifiers are called <em>full nodes</em>. Lisa is also a\nfull node (a verifier), but she does more than a full node—she updates\nthe spreadsheet. A full node is also called a <em>verifying node</em> or, more\ncasually, a <em>node</em> in Bitcoin.</p>\n</div>\n<div>\n<div>\n<div>\n<div>John’s transaction</div>\n<ul>\n<li>\n<p>✓ Create (John)</p>\n</li>\n<li>\n<p>✓ Confirm (Lisa)</p>\n</li>\n<li>\n<p>✓ Verify (anyone)</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div>\n<p>Lisa can no longer steal someone else’s money, because doing so would\nmake the spreadsheet invalid. For example, suppose she tried to change\nthe output recipient of John’s transaction from PKH<sub>C</sub> to PKH<sub>L</sub>. She\neffectively tries to steal 10 CT from the cafe (<a>Lisa can no longer steal someone else’s money. If she does, the signatures will become invalid and disclose her immoral act.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 9. Lisa can no longer steal someone else’s money. If she does, the signatures will become invalid and disclose her immoral act.</div>\n</div>\n<div>\n<p>Because Lisa has changed the contents of John’s transaction, that\ntransaction’s signatures will no longer be valid. Anyone with access to\nthe spreadsheet can notice this because everything is super-transparent.</p>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Security consequences of public signatures</h5>\n<div>\n<p>The good thing about public signatures is that anyone can verify all\ntransactions. But there’s a slight drawback.</p>\n</div>\n<div>\n<p>Remember in <a>[ch03]</a>, when we introduced PKHs? When you used PKHs, the\npublic key wasn’t revealed in the spreadsheet. This protected money\nwith two security layers: the public-key derivation function and a\ncryptographic hash function (SHA256 + RIPEMD160). If the public key\nwas revealed somehow, the private key would still be protected by the\npublic-key derivation function. It was like a belt and suspenders type\nof thing.</p>\n</div>\n<div>\n<p>But using transactions, the public key is revealed in the spending\ntransaction’s input when an output is spent. Look at John’s\ntransaction again in <a>The input reveals the public key. We made an extra effort to avoid this in [ch03].</a>.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 10. The input reveals the public key. We made an extra effort to avoid this in <a>[ch03]</a>.</div>\n</div>\n<div>\n<div>\n<div>Don’t reuse addresses</div>\n<div>\n<p>Bitcoin addresses shouldn’t be reused. Reusing addresses degrades both\nsecurity and privacy.</p>\n</div>\n</div>\n</div>\n<div>\n<p>The input contains the public key. But it only reveals the public key\nonce the output is spent. This brings up an important point: don’t reuse\naddresses! If John has other unspent outputs to PKH<sub>1</sub>, those outputs\nare now less secure because they’re no longer protected by the\ncryptographic hash function—only by the public-key derivation function.</p>\n</div>\n<div>\n<p>Not only does address reuse degrade the security of your private keys,\nit also degrades your privacy, as discussed in <a>[ch03]</a>. Suppose again\nthat John has other outputs to PKH<sub>1</sub>. If Acme Insurances forces the\ncafe to reveal that it was John who bought the cookie, Acme would also\nknow that all outputs to PKH<sub>1</sub> belong to John. This goes for change\noutputs, too.</p>\n</div>\n<div>\n<p>Luckily, the wallets will automate key creation for you, so you usually\ndon’t have to worry about key reuse. Most Bitcoin wallets on the market\ntoday use unique addresses for all incoming payments.</p>\n</div>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Account-based and value-based systems</h4>\n<div>\n<p>Let’s reflect on the changes we’ve made. We’ve moved from an\n<em>account-based</em> system to a <em>value-based</em> system.</p>\n</div>\n<div>\n<p>An account-based system keeps track of how much money each account has.\nThis is the type of system we had before this chapter. Lisa had to\ncalculate the balance of a PKH before deciding whether to allow a\npayment.</p>\n</div>\n<div>\n<p>A value-based system keeps track of “coins” instead. In this chapter,\nLisa needs to verify that the specific coins (UTXOs) exist before\ndeciding whether to allow the payment. She doesn’t have to verify the\nbalance of any PKH. Bitcoin is also a value-based system.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Script</h3>\n<div>\n<p>I haven’t been totally honest about what a transaction contains. A\ntransaction’s output doesn’t contain a PKH, but part of a small computer\nprogram that <em>contains</em> a PKH. This part of the program is called a\n<em>pubkey script</em>. The input that spends the output contains the other\npart of this program. This other part, the signature and the public key\nin John’s transaction, is called a <em>signature script</em> (<a>The signature script is the first part of a program. The pubkey script in the spent output is the second part. If the complete program results in <code>OK</code>, then the payment is authorized to spend the output.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 11. The signature script is the first part of a program. The pubkey script in the spent output is the second part. If the complete program results in <code>OK</code>, then the payment is authorized to spend the output.</div>\n</div>\n<div>\n<p>This tiny program, written in a programming language called Script,\ncontains the instructions to Lisa on how to verify that the spending\ntransaction is authentic. If Lisa performs all the instructions in the\nprogram without errors, and the end result is <code>OK</code>, then the\ntransaction is authentic.</p>\n</div>\n<div>\n<p>The ability to write a computer program inside a transaction is useful\nfor various use cases. We’ll cover several use cases of customized\nprograms throughout this book.</p>\n</div>\n<div>\n<p>Suppose Lisa wants to verify input 0 of John’s transaction. She’ll run\nthis program from top to bottom. A <em>stack</em> is used to keep track of\nintermediate calculation results. This stack is like a pile of stuff.\nYou can add stuff on top of the stack, and you can take stuff off the\ntop.</p>\n</div>\n<div>\n<p>Let’s start: look at <a>Adding a signature and a public key to the stack</a>. The first (top) item in the program is\na signature, which is just data. When you encounter ordinary data,\nyou’ll put it on the stack. Lisa puts the signature on the previously\nempty stack. Then she encounters a public key, which is also just data.\nShe puts that on the stack as well. The stack now contains a signature\nand a public key, with the public key on top.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 12. Adding a signature and a public key to the stack</div>\n</div>\n<div>\n<p>The next item in the program is <code>OP_DUP</code> (<a>Copying the public key on the stack, and adding a PKH</a>). This isn’t just\ndata—this is an operator. An operator makes calculations based on items\non the stack and, in some cases, the transaction being verified. This\nspecific operator is simple: it means “Copy the top item on the stack\n(but keep it on the stack), and put the copy on top.” Lisa follows\norders and copies the public key on the stack. You now have two public\nkeys and a signature on the stack.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 13. Copying the public key on the stack, and adding a PKH</div>\n</div>\n<div>\n<p>The next item is also an operator, <code>OP_HASH160</code> (also shown in\n<a>Copying the public key on the stack, and adding a PKH</a>). This means “Take the top item off the stack and hash it\nusing SHA256+RIPEMD160, and put the result on the stack.”</p>\n</div>\n<div>\n<p>Cool. Lisa takes the top public key from the stack, hashes it, and puts\nthe resulting PKH on top of the stack. This happens to be John’s PKH<sub>1</sub>\nbecause it was John’s public key that Lisa hashed.</p>\n</div>\n<div>\n<p>The next item is just data (<a>Adding PKH<sub>1</sub> to the stack and comparing the two PKH items</a>): it’s PKH<sub>1</sub>, which is the\nrightful recipient of the 8 CT. Lisa puts PKH<sub>1</sub> on the stack.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 14. Adding PKH<sub>1</sub> to the stack and comparing the two PKH items</div>\n</div>\n<div>\n<p>Next up is another operator, <code>OP_EQUALVERIFY</code>. This means “Take the top\ntwo items from the stack and compare them. If they’re equal, continue to\nthe next program instruction; otherwise, quit the program with an\nerror.” Lisa takes the two PKH items from the top of the stack and\nverifies that they’re equal. They <em>are</em> equal, which means the public\nkey John has provided in his transaction’s signature script matches the\nPKH that was set as the recipient in the output.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 15. Verifying the signature using John’s transaction and the rest of the items from the stack</div>\n</div>\n<div>\n<div>\n<div>John’s cleaned transaction</div>\n<div>\n<p><span><a><img/></a></span></p>\n</div>\n</div>\n</div>\n<div>\n<p>The last operator, <code>OP_CHECKSIG</code> (<a>Verifying the signature using John’s transaction and the rest of the items from the stack</a>), means “Verify that the\ntop public key on the stack and the signature that’s next on the stack\ncorrectly sign the transaction. Put <code>true</code> or <code>false</code> on top of the\nstack depending on the verification outcome.” Lisa takes John’s\ntransaction and cleans out all the signature script from all inputs. She\nuses the top two items from the stack, which are John’s public key and\nhis signature, to verify that the signature signs the cleaned\ntransaction. When John signed this transaction, he did so without any\nsignature data in the inputs. This is why Lisa must first clean out the\nsignature script data from the transaction before verifying the\nsignature. The signature was good, so Lisa puts <code>true</code>, meaning\n<code>OK</code>, back on the stack.</p>\n</div>\n<div>\n<p>Look, the program is empty! Nothing is left to do. After running a\nprogram, the top item on the stack reveals whether the spending of the\noutput is authentic. If <code>true</code>—<code>OK</code>—then the spending is authorized. If\n<code>false</code>—<code>not OK</code>—then the transaction must be declined. Lisa looks at\nthe top item on the stack, and there’s an <code>OK</code>. Lisa now knows that\nJohn’s input with index 0 is good (<a>The first input is verified.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 16. The first input is verified.</div>\n</div>\n<div>\n<p>Lisa does the same checks for the other input, with index 1, of John’s\ntransaction. If this program also ends with <code>OK</code>, then the entire\ntransaction is valid, and she can add the transaction to the\nspreadsheet.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Why use a program?</h4>\n<div>\n<p>The pubkey script part of the program stipulates exactly what the\nspending transaction needs to provide to spend the output. The only way\nto spend an output is to provide a signature script that makes the\nprogram finish with an OK on top of the stack.</p>\n</div>\n<div>\n<p>In the example I just presented, the only acceptable signature script is\na valid signature followed by the public key corresponding to the PKH in\nthe pubkey script.</p>\n</div>\n<div>\n<div>\n<div>Operators</div>\n<div>\n<p>A lot of useful operators can be used to create all kinds of fancy\nprograms. Check out <a>[web-op-codes]</a> for a complete list.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Using a programming language, Script, in the transactions makes them\nvery flexible. You’ll see several different types of Script programs\nthroughout this book. If the transactions didn’t use a programming\nlanguage, all use cases would have to be invented up front. The Script\nlanguage lets people come up with new use cases as they please.</p>\n</div>\n<div>\n<p>I’ve already mentioned that “pay to PKH” isn’t the only way to pay. You\ncan write any program in the pubkey script. For example, you can write a\npubkey script that ends with <code>OK</code> only if the signature script provides\ntwo numbers whose sum is 10. Or, you can write a program that ends with\n<code>OK</code> only if the signature script contains the SHA256 pre-image of a\nhash. Consider this example:</p>\n</div>\n<div>\n<div>\n<pre>OP_SHA256\n334d016f755cd6dc58c53a86e183882f8ec14f52fb05345887c8a5edd42c87b7\nOP_EQUAL</pre>\n</div>\n</div>\n<div>\n<p>This will allow anyone who knows an input to SHA256 that results in\nthe hash <code>334d016f…d42c87b7</code> to spend the output. You happen to know\nfrom <a>[ch02]</a> that the text “Hello!” will give this specific\noutput. Suppose your signature script is</p>\n</div>\n<div>\n<div>\n<pre>Hello!</pre>\n</div>\n</div>\n<div>\n<p>Run the program to convince yourself that it works and that all\nsignature scripts that don’t contain a correct pre-image fail.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Why signature script and pubkey script?</h4>\n<div>\n<div>\n<div>Odd names</div>\n<div>\n<p>Bitcoin developers commonly use the term <em>scriptPubKey</em> for the pubkey\nscript and <em>scriptSig</em> for the signature script because that’s how\nthey’re named in the Bitcoin Core source code.</p>\n</div>\n</div>\n</div>\n<div>\n<p>You might wonder why we call the output script part <em>pubkey script</em> when\nit usually doesn’t contain a public key. Likewise, the input script is\ncalled <em>signature script</em>, but it doesn’t only contain a signature.</p>\n</div>\n<div>\n<p>The pubkey script in Bitcoin transactions used to contain an actual\npublic key, and the signature script used to contain the signature only.\nIt was more straightforward then. A typical pubkey script looked like\nthis</p>\n</div>\n<div>\n<div>\n<pre>&lt;public key&gt; OP_CHECKSIG</pre>\n</div>\n</div>\n<div>\n<p>and the signature script like this:</p>\n</div>\n<div>\n<div>\n<pre>&lt;signature&gt;</pre>\n</div>\n</div>\n<div>\n<p>Things have changed since then, but the names <em>signature script</em> and\n<em>pubkey script</em> remain. Most developers today look at this more\nabstractly: the pubkey script can be regarded as a public key, and the\nsignature script can be regarded as a signature, but not necessarily\nordinary public keys and signatures. In a normal payment today, the\n“public key” is the script that needs to be satisfied by the\n“signature,” the signature script. Of course, the “public key” here\ncontains some operators and a PKH, but we can still view it as a public\nkey on a conceptual level. The same goes for the signature script, which\nwe can view as a signature on a conceptual level.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Where were we?</h3>\n<div>\n<p>This chapter covers most aspects of transactions. <a>This chapter covers transactions. Right now, we’re exploring different ways to authenticate transactions.</a> is a\nreminder from <a>[ch01]</a> of how a typical transaction is sent.</p>\n</div>\n<div>\n<p>We’ve gone through the anatomy of the transaction and are now discussing\ndifferent ways to authenticate, or “sign,” transactions.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 17. This chapter covers transactions. Right now, we’re exploring different ways to authenticate transactions.</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Fancy payment types</h3>\n<div>\n<div>\n<div>Pay to hash</div>\n<div>\n<div>\n<pre>OP_SHA256\n334d…87b7\nOP_EQUAL</pre>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>John’s transaction just spent two <em>pay-to-public-key-hash</em> (p2pkh)\noutputs. But as noted earlier, other payment types are possible—for\nexample, pay-to-hash, where you pay to a SHA256 hash. To spend this\noutput, you need to provide the hash’s pre-image in the spending input’s\nsignature script. We’ll explore some more interesting and useful ways to\nauthenticate transactions.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Multiple signatures</h4>\n<div>\n<p>In p2pkh, the recipient generates a cookie token address that’s handed\nover to the sender. The sender then makes a payment to that address.</p>\n</div>\n<div>\n<p>But what if the recipient would like their money secured by something\nother than a single private key? Suppose Faiza, Ellen, and John want to\nraise money for charity from their coworkers.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>They could use a normal p2pkh address that their supporters donate\ncookie tokens to. They could let, say, Faiza have control over the\nprivate key, so only she could spend the funds. This approach has a few\nproblems:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>If Faiza dies, the money might be lost forever. Ellen and John won’t\nbe able to recover the funds.</p>\n</li>\n<li>\n<p>If Faiza is sloppy with backup, the money might get lost. Again, no\none will be able to recover the funds.</p>\n</li>\n<li>\n<p>If Faiza is sloppy with her private key security, the money might\nget stolen.</p>\n</li>\n<li>\n<p>Faiza might run away with the money.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>A lot of risks seem to be inherent in this setup, but what if Faiza\ngives the private key to her two charity partners? Then, all partners\ncan spend the money. This will solve problems 1 and 2, but problems 3\nand 4 would be worse because now any of the three partners might be\nsloppy with private-key security or run away with the money.</p>\n</div>\n<div>\n<p>This organization consists of three people. It would be better if these\nthree people could <em>share the responsibility and the power over the\nmoney</em> somehow. Thanks to the Script programming language, they can\naccomplish this.</p>\n</div>\n<div>\n<p>They can create one private key each and demand that two of the three\nkeys must sign the transaction to spend the charity funds. (<a>Multisignature setup between Faiza, Ellen, and John. Two of the three keys are needed to spend money.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 18. Multisignature setup between Faiza, Ellen, and John. Two of the three keys are needed to spend money.</div>\n</div>\n<div>\n<p>This brings some good properties to the charity fundraising account:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>If one of the three keys is stolen, the thief can’t steal the money.</p>\n</li>\n<li>\n<p>If one of the three keys is lost due to sloppy backups or death,\nthen the other two keys are enough to spend the money.</p>\n</li>\n<li>\n<p>Out of the three partners, no single person can singlehandedly run\naway with the money.</p>\n</li>\n</ul>\n</div>\n<div>\n<p><a>A program that enforces two signatures out of three possible keys. The secret sauce is <code>OP_CHECKMULTISIG</code>.</a> shows a script program that enforces the two-of-three rule.</p>\n</div>\n<div>\n<div>\n<div>Bug</div>\n<div>\n<p>There is a bug in Bitcoin software that causes <code>OP_CHECKMULTISIG</code> to\nneed an extra dummy item first in the signature script.</p>\n</div>\n</div>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 19. A program that enforces two signatures out of three possible keys. The secret sauce is <code>OP_CHECKMULTISIG</code>.</div>\n</div>\n<div>\n<p>The <code>OP_CHECKMULTISIG</code> operator instructs Lisa to verify that the two\nsignatures in the signature script are made with the keys in the pubkey\nscript. Lisa runs the program in <a>Moving some data items to the stack</a>.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 20. Moving some data items to the stack</div>\n</div>\n<div>\n<p>The top eight data items in the program are put on the stack. Then the\nonly operator, <code>OP_CHECKMULTISIG</code>, runs, as illustrated in\n<a>Executing the <code>OP_CHECKMULTISIG</code> operator, which results in OK this time</a>.  <code>OP_CHECKMULTISIG</code> takes a number, <code>3</code> in this case,\nfrom the stack and then expects that number of public keys from the\nstack followed by another number. This second number dictates how many\nsignatures are needed to spend the money. In this case, the number is\n<code>2</code>. Then, the operator takes the expected number of signatures from\nthe stack, followed by the dummy mentioned earlier. You don’t use the\ndummy item.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 21. Executing the <code>OP_CHECKMULTISIG</code> operator, which results in OK this time</div>\n</div>\n<div>\n<p><code>OP_CHECKMULTISIG</code> uses all this information and the transaction to\ndetermine whether enough signatures are made and verifies those\nsignatures. If everything is <code>OK</code>, it puts <code>OK</code> back on the stack. This\nis where the program ends. Because the top item on the stack is <code>OK</code>,\nthe output spending is authorized.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>A coworker who wants to donate cookie tokens to the charity needs to get\ntheir wallet to write the pubkey script in <a>A program that enforces two signatures out of three possible keys. The secret sauce is <code>OP_CHECKMULTISIG</code>.</a> into the donation\ntransaction’s output. This presents a few problems:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>The coworker’s wallet knows how to make only p2pkh outputs. The\nwallet must be modified to understand multisignature outputs and\ninclude a user interface to make this kind of output understandable to\nusers.</p>\n</li>\n<li>\n<p>A sender usually doesn’t need to know how the recipient’s money is\nprotected. The sender doesn’t care if it’s multisignature, p2pkh, or\nanything else. They just want to pay.</p>\n</li>\n<li>\n<p>Transactions usually need to pay a fee to be processed (more on this\nin <a>[ch07]</a>). This fee generally depends on how big the transaction\nis, in bytes. A big pubkey script causes the sender to pay a\nhigher fee. This isn’t fair because it’s the recipient who wants to\nuse this fancy, expensive feature. The recipient, not the sender,\nshould pay for this luxury.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>You can fix all this with a small change to how the programs are run.\nSome developers among your coworkers invent something called\n<em>pay-to-script-hash</em> (p2sh).</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Pay-to-script-hash</h4>\n<div>\n<p>We’ve discussed how p2pkh hides the public key from the sender, who gets\na hash of the public key to pay to instead of the public key itself.</p>\n</div>\n<div>\n<div>\n<div>BIP16</div>\n<div>\n<p>This type of payment was introduced in 2012 in BIP16.</p>\n</div>\n</div>\n</div>\n<div>\n<p>p2sh takes this idea even further—it hides the script program. Instead\nof giving a big, complicated pubkey script to the sender, you give them\njust the hash of the script. The sender then makes a payment to that\nhash and leaves it up to the recipient to provide the script later, when\nthe recipient wants to spend the money.</p>\n</div>\n<div>\n<p>Suppose again that Faiza, Ellen, and John want to raise money for\ncharity, and they want a multisignature setup to protect their money\n(<a>Overview of p2sh. The pubkey script is simple. The signature script is special because it contains a data item that contains a program.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 22. Overview of p2sh. The pubkey script is simple. The signature script is special because it contains a data item that contains a program.</div>\n</div>\n<div>\n<p>To verify this transaction in full, you need new software. We’ll talk\nabout how this new software verifies this transaction in a moment.\nFirst, let’s see how the old software would handle this transaction.</p>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Old software</h5>\n<div>\n<p>What if the person verifying the transaction hasn’t upgraded their\nsoftware to the bleeding-edge version that supports verifying p2sh\npayments? The developers made this forward-compatible, meaning old\nsoftware won’t reject these new transactions.</p>\n</div>\n<div>\n<div>\n<div>Why verify?</div>\n<div>\n<p>The cafe isn’t involved in this transaction, so why would the cafe\nwant to verify it? The cafe wants to know whether Lisa is doing\nher job. It’s in the cafe’s interest to know if something fishy is\ngoing on.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Let’s pretend the cafe runs old software to verify this transaction in\nthe spreadsheet (<a>Verifying the p2sh transaction using old software</a>). Old software will do what it’s always\nbeen doing—push the stuff in the signature script and then run the\npubkey script.</p>\n</div>\n<div>\n<p>When the program is finished, the top item on the stack is <code>true</code>, or\n<code>OK</code>. This means the payment is valid according to this old software.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 23. Verifying the p2sh transaction using old software</div>\n</div>\n<div>\n<p>You might recognize the pubkey script from the earlier example, when you\ncould pay money to a pre-image of a hash. That’s what happened here,\ntoo, but with a different cryptographic hash function.</p>\n</div>\n<div>\n<p>The old software interprets this program as a payment to a hash. Whoever\ncan show a pre-image of this hash gets the money. The actual\nmultisignature program contained in the redeem script never runs.</p>\n</div>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>New software</h5>\n<div>\n<p>Suppose the cafe just upgraded its software and wants to verify this\ntransaction again. Let’s see how that happens.</p>\n</div>\n<div>\n<p>The new software looks at the pubkey script to determine if this\ntransaction is spending a p2sh output. It looks for this pattern:</p>\n</div>\n<div>\n<div>\n<pre>OP_HASH160\n20 byte hash\nOP_EQUAL</pre>\n</div>\n</div>\n<div>\n<p>If the pubkey script has this exact pattern—the p2sh pattern—the\nsoftware will treat the program differently. First, it will perform the\nsame seven steps as the old software, shown in <a>Verifying the p2sh transaction using old software</a>, but it will\nsave the stack after step 2. Let’s call this the <em>saved stack</em>. If the\nfirst seven steps result in <code>OK</code>, then the stack is replaced by the\nsaved stack; and the top item, <code>redeemScript</code>, is taken off the stack\n(<a>The stack is replaced by the saved stack, and <code>redeemScript</code> is taken off the stack.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 24. The stack is replaced by the saved stack, and <code>redeemScript</code> is taken off the stack.</div>\n</div>\n<div>\n<p><code>redeemScript</code> is a data item that contains a program, as previously\ndescribed. This program is now entered into the program area and begins\nto execute. It executes from now on as if it was an old-style payment\n(<a>Executing the program contained in the redeem script</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 25. Executing the program contained in the redeem script</div>\n</div>\n<div>\n<p>It’s important for Lisa that she runs the latest software. If Lisa ran\nold software, she would verify only that the redeem script hash matches\nthe script hash in the pubkey script. Anyone who happened to know the\nredeem script—for example, Faiza—would be able to take the money in the\nspreadsheet. Lisa would gladly confirm that transaction. This would\ncause problems if any verifying nodes ran new software. Those nodes\nwouldn’t accept the transaction in the spreadsheet because it’s invalid\naccording to the new rules. The entire spreadsheet would then be invalid\nand unacceptable for new nodes from that point forward. We’ll discuss\nthis situation more in <a>[ch11]</a>.</p>\n</div>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Pay-to-script-hash addresses</h4>\n<div>\n<p>Faiza, Ellen, and John have created their two-of-three multisignature\nredeem script:</p>\n</div>\n<div>\n<div>\n<pre>2\n022f52f2868dfc7ba9f17d2ee3ea2669f1fea7aea3df6d0cb7e31ea1df284bdaec\n023d01ba1b7a1a2b84fc0f45a8a3a36cc7440500f99c797f084f966444db7baeee\n02b0c907f0876485798fc1a8e15e9ddabae0858b49236ab3b1330f2cbadf854ee8\n3\nOP_CHECKMULTISIG</pre>\n</div>\n</div>\n<div>\n<p>They now want people to pay to the redeem script’s SHA256+RIPEMD160\nhash:</p>\n</div>\n<div>\n<div>\n<pre>04e214163b3b927c3d2058171dd66ff6780f8708</pre>\n</div>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>How do Faiza, Ellen, and John ask people to pay them? What do they print\non the flyers so coworkers can pay to their script hash? Let’s look at a\ncouple of their options:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Print the script hash as is, and inform coworkers that this is a\nhash of a redeem script. This would expose the coworkers to the\nunnecessary risk of typing errors, just as with payments to raw PKHs,\nas discussed in <a>[ch03]</a>.</p>\n</li>\n<li>\n<p>Base58check-encode the script hash just as in <a>[ch03]</a>, which would\ngenerate an address like <code>1SpXyW…RMmEMZ</code>. If this address was printed\non the flyers, they would also need to inform users that they must\ncreate a p2sh output instead of a normal p2pkh.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>In both cases, if the donor erroneously makes a p2pkh payment using\nthe printed hash or address, no one can spend the money because no\nprivate key corresponds to this false PKH.</p>\n</div>\n<div>\n<p>These two options seem neither safe nor practical. Instead, let’s\nintroduce a new address format for p2sh, the <em>p2sh address</em>\n(<a>Creating a p2sh address. The difference from normal addresses is the version, which is <code>05</code> for p2sh addresses instead of <code>00</code>.</a>). This format is similar to normal p2pkh addresses. It\nuses the base58check encoding scheme, just as normal addresses did.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 26. Creating a p2sh address. The difference from normal addresses is the version, which is <code>05</code> for p2sh addresses instead of <code>00</code>.</div>\n</div>\n<div>\n<p>This process is almost the same as for p2pkh addresses. The only\ndifference is that the version is <code>05</code> instead of <code>00</code>. This will cause\nthe address to begin with a <code>3</code> instead of a <code>1</code>.</p>\n</div>\n<div>\n<p>Because of this change and how base58 works—using integer division by\n58 successively—the last remainder will always be 2. If you’re\ninterested, <a>Encoding a versioned and checksummed script hash with base58. The result will <em>always</em> start with the character <code>3</code>.</a> provides the base58 encoding of the versioned\nand checksummed script hash of Faiza’s, Ellen’s, and John’s redeem\nscript.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 27. Encoding a versioned and checksummed script hash with base58. The result will <em>always</em> start with the character <code>3</code>.</div>\n</div>\n<div>\n<p>This last remainder <code>2</code> will translate to <code>3</code> in base58’s\ncharacter-lookup table. This <code>3</code> character will become the first\ncharacter when the base58 process performs the reversing step. This\ncauses all p2sh addresses to start with a <code>3</code>. This is how users\nidentify them as p2sh addresses and not, for example, p2pkh addresses.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Faiza, Ellen, and John can now print <code>328qTX…wrB2ag</code> on their flyer.\nWhen a coworker scans this flyer’s QR code, their wallet will recognize\nthe address as a p2sh address because it starts with a <code>3</code>. The wallet\nwill base58check-decode the address and create a proper p2sh output:</p>\n</div>\n<div>\n<div>\n<pre>OP_HASH160\n04e214163b3b927c3d2058171dd66ff6780f8708\nOP_EQUAL</pre>\n</div>\n</div>\n<div>\n<p>This concludes our discussion of programmable transactions. You’ve\nlearned that transactions can express a lot of different rules for how\nto spend money. Note that you can’t constrain where spent money goes,\nonly what’s needed in the input to spend the money. The pubkey script\nmakes the rules for what’s required in the signature script. Later in\nthe book, we’ll revisit transactions to talk about more fancy stuff you\ncan do with them, such as make spending impossible until a certain\nfuture date.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>More stuff in transactions</h3>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>We still haven’t covered all the contents of a transaction. A few more\npieces of information belong in transactions, including version, lock\ntime, and sequence numbers:</p>\n</div>\n<div>\n<dl>\n<dt>Version</dt>\n<dd>\n<p>Each transaction has a version. As of this writing, there\nare two versions: 1 and 2.</p>\n</dd>\n<dt>Sequence number</dt>\n<dd>\n<p>A 4-byte number on each input. For most\ntransactions, this is set to its maximum value <code>ffffffff</code>. This is an\nold, disabled feature that’s being repurposed for new functionality.</p>\n</dd>\n<dt>Lock time</dt>\n<dd>\n<p>A point in time before which the transaction can’t be\nadded to the spreadsheet. If the lock time is 0, the transaction is\nalways allowed to be added to the spreadsheet.</p>\n</dd>\n</dl>\n</div>\n<div>\n<p>I include this sparse information here for completeness. We’ll discuss\nthese features more in <a>[ch09]</a>, when you know more about Bitcoin’s\nfundamentals.</p>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Rewards and coin creation</h3>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>You might be wondering where all the cookie tokens come from in the\nfirst place. Remember in <a>[ch02]</a>, when I described how Lisa gets\nrewarded with 7,200 CT daily? She would insert a new row in the\nspreadsheet every day, paying 7,200 new CT to herself.</p>\n</div>\n<div>\n<p>Now she still rewards herself with 7,200 CT per day, but in a slightly\ndifferent way. Every day she adds a special transaction to the\nspreadsheet called a <em>coinbase transaction</em> (<a>Lisa rewards herself every day with a coinbase transaction.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 28. Lisa rewards herself every day with a coinbase transaction.</div>\n</div>\n<div>\n<div>\n<div>Rewards</div>\n<div>\n<p>Rewards in Bitcoin are paid using coinbase transactions roughly every\n10 minutes to the nodes securing the Bitcoin blockchain. This will be\ncovered in <a>[ch07]</a>.</p>\n</div>\n</div>\n</div>\n<div>\n<p>The coinbase transaction’s input is called the <em>coinbase</em>. The only\nway to create new coins is to add a coinbase transaction to the\nspreadsheet. New coins are created as rewards to Lisa for performing her\nvaluable work.</p>\n</div>\n<div>\n<p>All transactions can be traced back to one or more coinbase\ntransactions by following the txid references in transaction inputs. The\ntransactions form a <em>transaction graph</em> (<a>The transaction graph. All transactions descend from one or more coinbase transactions.</a>). They’re\ninterconnected through the txids.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 29. The transaction graph. All transactions descend from one or more coinbase transactions.</div>\n</div>\n<div>\n<p>John’s transaction stems from four different coinbase transactions. To\nverify John’s transaction, you must follow all txids from John’s\ntransaction and verify all the transactions along the way until you’ve\nreached the four coinbase transactions. This is what the UTXO set helps\nverifiers with. It keeps track of all already-verified UTXOs. The\nverifiers only have to follow the txids (usually only one step) until it\nreaches an output that’s in the UTXO set.</p>\n</div>\n<div>\n<p>The coinbase transactions must also be verified so there is exactly one\ncoinbase per 24 hours, and each coinbase creates exactly 7,200 new\ncookie tokens.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Transition from version 4.0</h4>\n<div>\n<p>You might be wondering how the coworkers updated from the old\nspreadsheet—as it was in release 4.0—to the one that contains\ntransactions. What happened to the already-existing cookie tokens in the\nspreadsheet?</p>\n</div>\n<div>\n<p>They all agreed on a time slot when the upgrade would take place. During\nthis time slot, Lisa created a single, huge transaction with one output\nper PKH in the spreadsheet. This transaction looks like a coinbase\ntransaction but with a lot of outputs. Anyone can keep a version of the\nold spreadsheet and verify that this new transaction contains the exact\nsame outputs as the old UTXO set. New verifiers can’t be sure it went\nwell, though—they’ll have to trust Lisa with that.</p>\n</div>\n<div>\n<p>Note that this isn’t at all how it happened in Bitcoin, which was\ndesigned for transactions from the beginning. The “initial state” in\nBitcoin was an empty UTXO set. No one had any bitcoins.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Trust in Lisa</h3>\n<div>\n<p>In this chapter, we’ve formalized the payment process—for example, the\ntransaction from the wallet must be sent as an attachment in an email to\nLisa. Lisa can take advantage of this formal process to automate all her\nwork. She writes a computer program that reads transactions from her\nemail inbox and automatically verifies them, maintains the UTXO set, and\nadds transactions to the spreadsheet. Lisa can relax and just watch her\ncomputer program do the job for her. Nice.</p>\n</div>\n<div>\n<p>But now you may wonder if she’s still worth the 7,200 CT per day in\nrewards. She doesn’t work actively with verification anymore; she’s just\nsitting there, twiddling her thumbs. Let’s take a moment to reflect on\nwhat we’re rewarding her for. She’s rewarded not to perform boring\nmanual work but to perform correct, honest confirmations of transactions\nand not censor them. That’s what gives you and your coworkers value. If\nLisa writes a computer program to do the heavy lifting, it doesn’t make\nthe payment processing less correct or honest.</p>\n</div>\n<div>\n<div>\n<div>We trust that Lisa doesn’t …</div>\n<div>\n<ul>\n<li>\n<p>Censor transactions</p>\n</li>\n<li>\n<p>Revert transactions</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div>\n<p>Transactions solve the problem with Lisa arbitrarily changing stuff in\nthe spreadsheet. The only things you have to trust Lisa with now are\nto</p>\n</div>\n<div>\n<dl>\n<dt>Not censor transactions</dt>\n<dd>\n<p>She must add to the spreadsheet any valid\ntransactions that she receives over email.</p>\n</dd>\n<dt>Not revert transactions</dt>\n<dd>\n<p>To <em>revert</em> a transaction is to remove it\nfrom the spreadsheet.</p>\n</dd>\n</dl>\n</div>\n<div>\n<p>If Lisa decides she doesn’t like Faiza, and she also happens to know\nsome of Faiza’s UTXOs, she can refuse to process Faiza’s transactions\nthat try to spend those UTXOs. This means Faiza can’t spend her money.\nLisa is censoring Faiza’s transactions.</p>\n</div>\n<div>\n<p>If Lisa removes a transaction, whose outputs are all unspent, from the\nspreadsheet, it <em>might</em> be noticed by already-running verifiers. But\nverifiers that started after the reverting won’t notice because the\nspreadsheet is still valid according to the rules.</p>\n</div>\n<div>\n<p>Suppose Lisa reverts John’s transaction from\n<a>Paying using a transaction</a>. Lisa removes John’s transaction from the\nspreadsheet. No one has spent any of the outputs of John’s transaction\nyet, so the spreadsheet doesn’t contain any transactions that become\ninvalid when John’s transaction is deleted.</p>\n</div>\n<div>\n<p>An already-running verifier—for example, the cafe—won’t notice because\nit just watches the spreadsheet for added transactions at the end. It\nhas already verified John’s transaction and updated its private UTXO\nset. The cafe trusts Lisa to not delete transactions, so it never\nre-verifies the spreadsheet</p>\n</div>\n<div>\n<p>Furthermore, suppose a new coworker, Vera, starts to build her own\nUTXO set from the spreadsheet, which now lacks John’s\ntransaction. This UTXO set will differ from the cafe’s UTXO set. From\nVera’s viewpoint, John still has the money and hasn’t paid 10 CT to\nthe cafe. The outputs that John spent in his transaction appear\nunspent to Vera because they’re in Vera’s UTXO set.</p>\n</div>\n<div>\n<p>We now have Vera, who thinks John still has the money; Lisa, who\ndeleted the transaction; and the cafe, which thinks it got 10 CT from\nJohn. So far, no one has noticed Lisa’s crime. It will remain\nunnoticed as long as nobody tries to spend an output from John’s\ntransaction. This could be the cafe spending its 10 CT or John\nspending his 3 CT change.</p>\n</div>\n<div>\n<p>Let’s say the cafe wants to pay its rent to the company. It needs to\nspend, among other outputs, the output of John’s transaction. The cafe\ncreates a transaction that spends the output, signs it, and sends it\nto Lisa. Lisa knows she’s deleted John’s transaction and her crime\nwill now be noticed. If Lisa decides to confirm the cafe’s\ntransaction, then she’ll make the entire spreadsheet invalid, and Vera\nand all other verifiers will reject the spreadsheet as a whole. Not\ngood. If Lisa decides to reject the transaction, which is the more\nsensible thing for her to do, the cafe will notice because its\ntransaction never confirms.</p>\n</div>\n<div>\n<p>When the cafe notices, it can’t prove that John’s transaction was ever\nin the spreadsheet. Lisa can’t prove that John’s transaction was never\nin the spreadsheet. It’s word against word. We’ll solve this problem\nin <a>[ch06]</a>.</p>\n</div>\n<div>\n<p>It isn’t obvious why Lisa would delete John’s transaction. Maybe John\npays Lisa to do it. It would probably make more sense for Lisa to\ncheat with her own money instead. Let’s say she buys a cookie in the\ncafe, and when the cafe has seen the transaction from Lisa to the cafe\nin the spreadsheet, it gives a cookie to Lisa. Yummy. Then Lisa walks\nback to her desk and removes her transaction. Now she’s got a cookie\n<em>and</em> she gets to keep the money. This will, of course, be noticed\nwhen the cafe tries to spend the output from the removed transaction\nor the next time Lisa tries to double-spend the outputs spent by the\nremoved transaction.  But as with John’s transaction, it’s word\nagainst word. Lisa can claim the transaction was never in the\nspreadsheet, and the cafe can claim it was. No one can prove anything.</p>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Recap</h3>\n<div>\n<p>Transactions make it impossible for Lisa to steal cookie tokens from\nothers. They solve the problem by making all signatures public in the\nspreadsheet. Users’ wallets create and sign transactions that Lisa\nverifies and appends to the spreadsheet.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n<div>\n<p>Transactions have inputs and outputs. An output of a transaction\ncontains the last part of a Script program. When the output is spent,\nthe input that’s spending the output must provide the first part of the\nprogram.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n<div>\n<p>Lisa runs the program. If the program ends with <code>OK</code>, then the\nspending of <em>that</em> output is authorized. If the programs of all inputs\nin a transaction end with <code>OK</code>, the entire transaction is valid, and\nLisa adds the transaction to the spreadsheet.</p>\n</div>\n<div>\n<p>Once the transaction is in the spreadsheet, anyone can make the exact\nsame checks as Lisa did, because she added the transaction to the\nspreadsheet exactly as she received it. If Lisa makes changes to it,\npeople will notice that the spreadsheet is no longer valid because it\ncontains an invalid transaction. The only things you can’t verify are\nif transactions are being censored (not added to the spreadsheet) or\ndeleted from the spreadsheet. You have to trust Lisa with these two\nthings for now.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>System changes</h4>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Transactions and txid have been added to your toolbox. The\nconcept-mapping table (<a>Transactions replace emails to Lisa and rows in the spreadsheet.</a>) shrinks by two rows: emails to\nLisa and rows in the spreadsheet are replaced by transactions. Note\nthat you still use email to send the transaction to Lisa, but the\ntransaction has the same format as in Bitcoin. This is why we can\nremove the row.</p>\n</div>\n\nTable 1. Transactions replace emails to Lisa and rows in the spreadsheet.\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Cookie tokens</th>\n<th>Bitcoin</th>\n<th>Covered in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>1 cookie token</p></td>\n<td><p>1 bitcoin</p></td>\n<td><p><a>[ch02]</a></p></td>\n</tr>\n<tr>\n<td><p>The spreadsheet</p></td>\n<td><p>The blockchain</p></td>\n<td><p><a>[ch06]</a></p></td>\n</tr>\n<tr>\n<td><p><span><strong>Email to Lisa</strong></span></p></td>\n<td><p><strong><span>A transaction</span></strong></p></td>\n<td><p><strong><span><a>Transactions</a></span></strong></p></td>\n</tr>\n<tr>\n<td><p><strong><span>A row in the spreadsheet</span></strong></p></td>\n<td><p><strong><span>A transaction</span></strong></p></td>\n<td><p><strong><span><a>Transactions</a></span></strong></p></td>\n</tr>\n<tr>\n<td><p>Lisa</p></td>\n<td><p>A miner</p></td>\n<td><p><a>[ch07]</a></p></td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>The next chapter will take care of replacing the spreadsheet, which now\ncontains transactions, with a blockchain.</p>\n</div>\n<div>\n<p>Let’s release version 5.0 of the cookie token system (<a>Release notes, cookie tokens 5.0</a>).</p>\n</div>\n\nTable 2. Release notes, cookie tokens 5.0\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Version</th>\n<th>Feature</th>\n<th>How</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p><span><a><img/></a></span>5.0</p></td>\n<td><p>Spend multiple “coins” in one payment</p></td>\n<td><p>Multiple inputs in transactions</p></td>\n</tr>\n<tr>\n<td><p>Anyone can verify the spreadsheet</p></td>\n<td><p>Make the signatures publicly available in the transactions</p></td>\n</tr>\n<tr>\n<td><p>Sender decides on criteria for spending the money</p></td>\n<td><p>Script programs inside transactions</p></td>\n</tr>\n<tr>\n<td><p>4.0</p></td>\n<td><p>Easy to make payments and create new addresses</p></td>\n<td><p>Mobile app “wallet”</p></td>\n</tr>\n<tr>\n<td><p>Simplified backups</p></td>\n<td><p>HD wallets are generated from a seed. Only the seed, 12 to 24 English\nwords, needs to be backed up.</p></td>\n</tr>\n<tr>\n<td><p>Creating addresses in insecure environments</p></td>\n<td><p>HD wallets can generate public key trees without ever seeing any of the\nprivate keys</p></td>\n</tr>\n<tr>\n<td><p>3.0</p></td>\n<td><p>Safe from expensive typing errors</p></td>\n<td><p>Cookie token addresses</p></td>\n</tr>\n<tr>\n<td><p>Privacy improvements</p></td>\n<td><p>A PKH is stored in the spreadsheet instead of a personal name.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Exercises</h3>\n<div>\n<h4><a><svg><path></path></svg></a>Warm up</h4>\n<div>\n<ol>\n<li>\n<p>Suppose all your money is spread over three UTXOs: one with 4 CT,\none with 7 CT, and one with 2 CT. Which of these outputs would you\nspend if you wanted to buy a cookie for 10 CT? What outputs would your\ntransaction have, and what would their CT values be?</p>\n</li>\n<li>\n<p>What are txids used for in a transaction?</p>\n</li>\n<li>\n<p>Why do you usually need to add a change output in your transaction?</p>\n</li>\n<li>\n<p>Where are the signatures located in a transaction?</p>\n</li>\n<li>\n<p>Why is the public key needed in the input of a transaction if it\nspends a p2pkh output?</p>\n</li>\n<li>\n<p>Why are the signature scripts of a transaction cleaned when your\nwallet signs the transaction?</p>\n</li>\n<li>\n<p>Where are the pubkey scripts located in a transaction, and what\ndo they contain?</p>\n</li>\n<li>\n<p>What’s required from a Script program (signature script + pubkey\nscript) for an input to be considered authentic?</p>\n</li>\n<li>\n<p>How can you recognize a p2sh address?</p>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Dig in</h4>\n<div>\n<ol>\n<li>\n<p>Suppose you have 100 CT in a single output at index 7 of a\ntransaction. You want to pay 10 CT to the cafe’s p2pkh address @<sub>C</sub>\nand 40 CT to Faiza, Ellen, and John’s charity’s p2sh address @<sub>FEJ</sub>.\nConstruct a single transaction that does this. Please cheat by looking\nup the exact operators and program templates from this chapter. You\ndon’t have to sign any inputs.</p>\n</li>\n<li>\n<p>The UTXO set contains all UTXOs. Suppose it contains 10,000 UTXOs,\nand you send a transaction to Lisa that has two inputs and five\noutputs. How many UTXOs will the UTXO set contain after the\ntransaction has been confirmed?</p>\n</li>\n<li>\n<p>Create a really simple pubkey script that allows anyone to\nspend the output. What would the signature script of the spending input\ncontain?</p>\n</li>\n<li>\n<p>Create a pubkey script that requires the spender to provide two\nnumbers in the signature script whose sum is 10 in order to spend the\nmoney. An operator called <code>OP_ADD</code> takes the top two items from the\nstack and puts back the sum of those items.</p>\n</li>\n<li>\n<p>Suppose you run a full node and receive money from Faiza in a\nconfirmed transaction. Can you trust that the money from Faiza is real?</p>\n</li>\n<li>\n<p>A public key is visible in the input that spends a p2pkh\noutput. What’s the drawback of this if you have multiple UTXOs for the\nsame PKH? What can you do to avoid this drawback?</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Summary</h3>\n<div>\n<ul>\n<li>\n<p>Transactions have inputs and outputs, so you can spend multiple\n“coins” and pay multiple recipients in a single transaction.</p>\n</li>\n<li>\n<p>The outputs of transactions are “programmable.” The sender wallet\ndecides what program to put in the output. This dictates what’s needed\nto spend the money.</p>\n</li>\n<li>\n<p>Anyone can verify the entire spreadsheet because all signatures are\npublic. This greatly reduces the required trust in Lisa.</p>\n</li>\n<li>\n<p>Scripts can be used to enable multisignature capabilities—for\nexample, three-of-seven capabilities. This is great for companies and\ncharities.</p>\n</li>\n<li>\n<p>A new address type, a p2sh address beginning with <code>3</code>, is used to\nsimplify the payment process for a lot of fancy payment types, such as\nmultisignatures.</p>\n</li>\n<li>\n<p>All transactions descend from one or more coinbase transactions.\nCoinbase transactions are the only way to create money.</p>\n</li>\n<li>\n<p>Money creation is verified by any coworker to make sure Lisa creates\nexactly as much as agreed: 7,200 CT per day and halving every four\nyears.</p>\n</li>\n<li>\n<p>Lisa can censor and revert transactions. You still have to trust her\nwith that.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div></article>', 'body': '\nTransactions\n\n\nThis chapter covers\n\n\n\n\nBitcoin, or cookie token, transactions\n\n\nCreating, confirming, and verifying transactions\n\n\nProgramming money\n\n\n\n\nThe cookie token payments you and your coworkers have been making so far\nhave some serious problems. The worst is that Lisa can steal, which\nworries some new people. They’re hesitant to use the system if they know\nLisa can steal from them.\n\n\nThis chapter will focus mainly on transactions (Bitcoin transactions): pieces\nof data that formalize how users send payments to Lisa. Transactions\nreplace the old email to Lisa. They’ll be stored as is in the\nspreadsheet instead of using the current To, From, and CT scheme. This\nwill make it impossible for Lisa to steal other people’s money because\nanyone can now verify all payments in the spreadsheet.\n\n\n\n\n\nFigure 1. Bitcoin transactions\n\n\nIn this chapter, we’ll go deep on transactions and explore how they’re\nprogrammable, meaning they’re flexible as far as what you can do\nwith them. For example, multisignature transactions can require two\nsignatures out of three possible signatures, to spend money shared among\nthree people.\n\n\nAfter this chapter, the system will have changed a lot—in how wallets\ncreate payments, how Lisa verifies payments, and how payments are\nstored. Most important, everyone will be able to verify payments in the\nspreadsheet.\n\n\nProblems with the old system\n\nLisa is performing valuable work. She makes sure no one cheats by\nverifying digital signatures and checking public key hash (PKH) balances\nbefore confirming a payment. She confirms payments by adding them to the\ncookie token spreadsheet.\n\n\nBut this old approach presents several problems:\n\n\n\n\nLisa is getting tired of calculating the balance before approving a\npayment. The ledger is growing, and each check becomes more\ntime-consuming as new payments are added.\n\n\nIf you have two addresses with 5 CT each, you must make two separate\npayments to pay 10 CT for a cookie. This lays an unnecessary burden on\nthe sender as well as Lisa. It also bloats the spreadsheet with\nexcessive rows.\n\n\nBecause the company has grown and some people don’t know Lisa well,\ntrust in her begins to fade. Some people fear Lisa will steal cookie\ntokens from them in the spreadsheet. Only Lisa can verify signatures\nbecause only she sees the emails sent to her. So she could increase\nthe CT column of a payment to her or add a row with a false payment\nfrom, say, John to Lisa (Bad stuff Lisa could do. She wouldn’t, but she could.). No one could prove Lisa\ncommitted fraud. It doesn’t matter that she’s the most trustworthy\nhuman on earth.  If people don’t know that, they’re going to assume\nLisa is as greedy as everyone else.\n\n\n\n\n\n\n\nFigure 2. Bad stuff Lisa could do. She wouldn’t, but she could.\n\n\nNote that Lisa can’t create any new money, other than the 7,200 CT per\nday as agreed. Also if she tries to steal more than what’s available on\na PKH, someone verifying the spreadsheet will notice the total amount of\nmoney is becoming too big. Lisa will get busted.\n\n\n\nMinimize trust\n\nMinimizing trust between people is what Bitcoin is all about.\nTransactions bring us one step closer to a trustless system in which\neveryone can verify everything.\n\n\n\n\nLisa hates that people distrust her. She knows there’s not much she can\ndo to change her coworkers’ level of trust. An interesting alternative\nis to minimize the trust needed. She concludes that the best way to\ndo this is to make the process super-transparent so everyone can verify\npayments. At the same time, she’ll improve how she verifies that people\ndon’t spend money they don’t have and how to spend from multiple\naddresses at the same time. She invents the cookie token transaction\nto solve the three problems outlined previously.\n\n\n\nPaying using a transaction\n\nTransactions will replace both how a user’s wallet sends a payment to\nLisa and what’s stored in the spreadsheet. They won’t change how wallets\nbehave from a user’s perspective—the wallet app will look exactly the\nsame.\n\n\nSuppose John wants to buy a cookie in the cafe. He won’t email Lisa\nthe way he’s done so many times before. The wallet software now uses\ntransactions, so his wallet will create a transaction instead, as\nThe payment process is the same for users, but it’s different for Lisa and the spreadsheet. shows. The transaction’s purpose is to pay 10 CT to the\ncafe’s cookie token address.\n\n\n\n\n\nFigure 3. The payment process is the same for users, but it’s different for Lisa and the spreadsheet.\n\n\nJohn scans the cafe’s payment URI, and his wallet creates a transaction\nand asks him to accept it. He clicks OK, and the wallet signs the\ntransaction. John’s wallet then sends the signed transaction as an\nattachment in an otherwise empty email to Lisa.\n\n\nThe transaction contains information about where to send money. But it\nalso contains information about what money to spend by referencing\nspecific “coins” called unspent transaction outputs (UTXOs) that John\nreceived in previous transactions.\n\n\nLisa verifies that the coins spent in the transaction exist and aren’t\nalready spent. She also verifies that the signatures—there might be\nseveral in a transaction—are valid. If all checks pass, Lisa confirms\nthe transaction by appending it, exactly as she received it, to the end\nof the spreadsheet.\n\n\nOnce the transaction hits the spreadsheet, anyone can make the same\nverification of that transaction that Lisa did. They can do this to\nverify Lisa doesn’t steal money from someone else or otherwise mess with\nother people’s money.\n\n\nIn the next three subsections, we’ll dig deeper into the three phases:\ncreate, confirm, and verify.\n\n\nCreating the transaction\n\n\n\nJohn’s transaction\n\n\n❏ Create (John)\n\n\n❏ Confirm (Lisa)\n\n\n❏ Verify (anyone)\n\n\n\n\n\n\nLet’s dive in and look closer at how John’s transaction is created.\n\n\n\n\n\nFigure 4. John’s wallet prepares to pay 10 CT for a cookie. He uses two keys with funds to cover the cost. He pays himself the change of 3 CT to a fresh address. The transaction isn’t yet signed.\n\n\nJohn’s wallet has created a new transaction (John’s wallet prepares to pay 10 CT for a cookie. He uses two keys with funds to cover the cost. He pays himself the change of 3 CT to a fresh address. The transaction isn’t yet signed.). It has two\ninputs and two outputs. Inputs specify which outputs of\nprevious transactions to spend. Outputs specify where the money goes.\n\n\nInputs\n\nThe inputs specify which transaction outputs to spend. John has two\nUTXOs, one with 8 CT and one with 5 CT. The unspent outputs belong to\ntwo previous transactions, transaction 1 and transaction 2, that paid\nmoney to John. Now, John wants to spend these UTXOs.\n\n\n\n\n\n\n\n\n\n\n\nA transaction input references a previous transaction using the previous\ntransaction’s transaction ID (txid). The transaction’s txid is its\ndouble SHA256 hash. It’s called a transaction ID because this hash is\noften used to refer to the transaction, as in the case with inputs in\nJohn’s wallet prepares to pay 10 CT for a cookie. He uses two keys with funds to cover the cost. He pays himself the change of 3 CT to a fresh address. The transaction isn’t yet signed..\n\n\n\n\n\nNote\n\n\nThe rationale for using double SHA256 here isn’t entirely clear, but\ndoing so prevents something called a length-extension attack.\nBitcoin’s creator probably used double SHA256 as a security measure in\norder to not have to think about these kinds of attacks. For details,\nsee [web-length-extension-attack].\n\n\n\n\n\nJohn’s first input, with index 0, contains\n\n\n\n\nThe txid of transaction 1\n\n\nThe index, 1, of the output in transaction 1 to spend\n\n\nAn empty placeholder for a signature\n\n\n\n\nHis second input, with index 1, contains\n\n\n\n\nThe txid of transaction 2\n\n\nThe index, 0, of the output in transaction 2 to spend\n\n\nAn empty placeholder for a signature\n\n\n\n\nJohn will fill in the signatures last, after the transaction is\notherwise complete.\n\n\n\nOutputs\n\nA transaction output contains an amount and a PKH. John’s transaction\nhas two outputs. The output at index 0 pays 10 CT to PKHC, the cafe,\nfor the cookie. The output at index 1 pays 3 CT back to one of John’s\nown keys, PKH3. We call this change because it resembles traditional\nchange, in which you pay $75 with a $100 bill and get $25 back: John\npays with 13 CT and gets 3 CT back to his change address, PKH3. Change\nis needed because you can’t partly spend a transaction output. You\neither spend it completely, or you don’t spend it.\n\n\nThe outputs and inputs are a bit more advanced than just specifying a\nPKH in an output and a signature in the input. In reality, the output\ncontains a computer program that will verify the signature in the\nspending input. We’ll talk more about this later.\n\n\n\nTransaction fee\n\nNormally, you need to pay a transaction fee for the Bitcoin network to\nprocess your transaction.\n\n\n\n\nFor a transaction to be valid, the sum of the input amounts must be\ngreater than or equal to the sum of the output amounts. The\ndifference, if any, is called a transaction fee, which we’ll\ndiscuss in [ch07]. For now, John pays no transaction fee, so his\noutput sum matches the input sum exactly.\n\n\nThe transaction is now created, but it isn’t yet signed. Anyone could\nhave created this transaction because it’s based completely on public\ninformation. The inputs just refer to transactions in the spreadsheet\nand indexes within those transactions. But only John will be able to\nsign this transaction, because only he has the private keys\ncorresponding to PKH1 and PKH2.\n\n\n\nSigning the transaction\n\nJohn clicks OK in his wallet to approve signing the transaction. The\nwallet now needs to make two signatures, one for PKH1 and one for\nPKH2. This is because John must prove he has both the private key\nfor PKH1 and the private key for PKH2. See John’s wallet signs the transaction. Each input gets its own signature. The public key is also needed in the inputs because anyone should be able to verify the signature..\n\n\n\n\n\nFigure 5. John’s wallet signs the transaction. Each input gets its own signature. The public key is also needed in the inputs because anyone should be able to verify the signature.\n\n\nEach input needs to be signed individually. The private key\ncorresponding to PKH1 must be used to sign the input at index 0\nbecause that input spends money addressed to PKH1. Similarly, the\nprivate key corresponding to PKH2 must be used for the signature of\nthe input at index 1 because it spends money addressed to PKH2.\n\n\nEach signature will commit to the entire transaction, which means the\nsigning algorithm will hash the entire transaction, excluding\nsignatures. If anything changes in the transaction, any signature made\nfor this transaction will become invalid.\n\n\nTo make verification easier, you sign a cleaned version of the\ntransaction, which means there are no signatures in any of the inputs.\nYou can’t put a signature in input 0 and then sign input 1.\nVerification would be difficult if the person verifying didn’t know in\nwhat order the signatures were made. If you make all signatures from a\ncleaned transaction and then add all signatures to it, it doesn’t\nmatter in what order the signatures were made.\n\n\nWhen the wallet has made all signatures, it adds them to the\ntransaction. But one piece is still missing. How can someone verifying\nthe transaction—for example, the cafe—know which public key to use to\nverify a signature? The cafe can see only the PKH in the spent output\nand the signature in the spending input. It can’t get the public key\nfrom the PKH because cryptographic hashes are one-way functions,\nremember? John’s wallet must explicitly add the corresponding public key\nto the input. The signature in input 0 that spends money from PKH1\nneeds to be verified with the public key from which PKH1 was\ngenerated. Similarly, input 1 gets the public key corresponding to\nPKH2.\n\n\n\n\nLisa confirms the transaction\n\n\n\nJohn’s transaction\n\n\n✓ Create (John)\n\n\n❏ Confirm (Lisa)\n\n\n❏ Verify (anyone)\n\n\n\n\n\n\nThe transaction is ready to be sent to Lisa. John’s wallet sends it as\nan attachment in an email. Lisa picks up the transaction and verifies\nthat:\n\n\n\n\nThe transaction spends outputs of transactions that actually exist\nin the spreadsheet and that they aren’t already spent by some other\ntransaction in the spreadsheet.\n\n\nThe total value of the transaction outputs doesn’t exceed the total\nvalue of the transaction inputs. Otherwise, the transaction would\ncreate new money out of thin air.\n\n\nThe signatures are correct.\n\n\n\n\nLisa doesn’t have to calculate the PKH balance anymore, but she needs\nto check that the spent output exists and isn’t already spent.\n\n\nHow does she check that an output of a transaction is unspent? Doesn’t\nshe have to search the spreadsheet to look for transactions that spend\nthis output? Yes, she does. This seems about as cumbersome as\nsearching through the spreadsheet to calculate balances. Don’t worry:\nLisa has a plan.\n\n\nUnspent transaction output set\n\n\nUTXO set\n\nAll nodes in the Bitcoin network maintain a private UTXO set to speed\nup transaction verification.\n\n\n\n\nTo make the unspent checks easier, she creates a new, private database\nthat she calls the UTXO set (Lisa verifies that John doesn’t double spend by using her UTXO set.). It’s a set of all UTXOs.\n\n\n\n\n\nFigure 6. Lisa verifies that John doesn’t double spend by using her UTXO set.\n\n\nAn entry in the UTXO set consists of a txid, an index (idx), and the\nactual transaction output. Lisa keeps her UTXO set updated while\nverifying transactions.\n\n\n\nDouble spend\n\nDouble spend means to spend the same output twice. Lisa can prevent\ndouble spends by consulting her UTXO set.\n\n\n\n\nBefore Lisa adds John’s transaction to the spreadsheet, she makes sure\nall outputs that the transaction spends are in the UTXO set. If not,\nthen John is trying to spend money that either never existed in the\nspreadsheet or is already spent (usually referred to as a double-spend\nattempt).\n\n\nFor each input in John’s transaction, Lisa uses her UTXO set to look up\nthe txid and the output index. If all spent outputs are present in the\nUTXO set, no double-spend attempt or spending of nonexistent coins is\ndetected. In this case, Lisa finds both outputs in her UTXO set and\nstarts verifying signatures. Lisa needs to verify the signatures of both\nof John’s transaction inputs.\n\n\n\n\n\nFigure 7. Lisa verifies the first signature of John’s transaction.\n\n\nShe grabs the PKH from the output spent by the first input and verifies\nthat it matches the hash of the public key in the input (Lisa verifies the first signature of John’s transaction.).\nShe verifies the signature in the input using the public key, the\nsignature, and the transaction, and then verifies the second input’s\nsignature the same way. Both are good.\n\n\nLisa then adds the confirmed transaction to the spreadsheet. She must\nremove the newly spent outputs from the UTXO set and add the outputs of\nJohn’s transaction to it (Lisa adds the transaction to the spreadsheet and removes the spent outputs from the UTXO set.). This is how she keeps the UTXO\nset updated to reflect the transaction spreadsheet’s contents.\n\n\n\n\n\nFigure 8. Lisa adds the transaction to the spreadsheet and removes the spent outputs from the UTXO set.\n\n\n\nRebuilding the UTXO set\n\nThe UTXO set is built from the transactions in the spreadsheet only. It\ncan be re-created at any time, notably by anyone with read access to the\nspreadsheet.\n\n\n\n\nLisa keeps the UTXO set up to date by updating it as Lisa adds the transaction to the spreadsheet and removes the spent outputs from the UTXO set.\nillustrates for every incoming transaction. If she loses the UTXO set,\nshe can re-create it from the spreadsheet by starting with an empty\nUTXO set and reapplying all transactions in the spreadsheet to it, one\nby\none.\n\n\nIt isn’t only Lisa who can create a UTXO set. Anyone with access to the\nspreadsheet can now do the same. This is important in later chapters,\nwhen we replace Lisa with multiple people doing her job. It’s also\nimportant for people who just want to verify the spreadsheet to convince\nthemselves the information in it is correct.\n\n\n\n\nAnyone verifies the transaction\n\n\n\nJohn’s transaction\n\n\n✓ Create (John)\n\n\n✓ Confirm (Lisa)\n\n\n❏ Verify (anyone)\n\n\n\n\n\n\nNow that John’s transaction is stored in the spreadsheet exactly as he\ncreated it, anyone with read access can verify it. Anyone can create a\nprivate UTXO set, work through all the transactions, and end up with\nthe exact same UTXO set as Lisa.\n\n\nThis means anyone can make the same checks that Lisa does. They can\nverify that Lisa is doing her job. These verifiers are important to the\nsystem because they make sure updates to the spreadsheet obey the\nagreed-on rules.\n\n\nIn Bitcoin, these verifiers are called full nodes. Lisa is also a\nfull node (a verifier), but she does more than a full node—she updates\nthe spreadsheet. A full node is also called a verifying node or, more\ncasually, a node in Bitcoin.\n\n\n\n\nJohn’s transaction\n\n\n✓ Create (John)\n\n\n✓ Confirm (Lisa)\n\n\n✓ Verify (anyone)\n\n\n\n\n\n\nLisa can no longer steal someone else’s money, because doing so would\nmake the spreadsheet invalid. For example, suppose she tried to change\nthe output recipient of John’s transaction from PKHC to PKHL. She\neffectively tries to steal 10 CT from the cafe (Lisa can no longer steal someone else’s money. If she does, the signatures will become invalid and disclose her immoral act.).\n\n\n\n\n\nFigure 9. Lisa can no longer steal someone else’s money. If she does, the signatures will become invalid and disclose her immoral act.\n\n\nBecause Lisa has changed the contents of John’s transaction, that\ntransaction’s signatures will no longer be valid. Anyone with access to\nthe spreadsheet can notice this because everything is super-transparent.\n\n\nSecurity consequences of public signatures\n\nThe good thing about public signatures is that anyone can verify all\ntransactions. But there’s a slight drawback.\n\n\nRemember in [ch03], when we introduced PKHs? When you used PKHs, the\npublic key wasn’t revealed in the spreadsheet. This protected money\nwith two security layers: the public-key derivation function and a\ncryptographic hash function (SHA256 + RIPEMD160). If the public key\nwas revealed somehow, the private key would still be protected by the\npublic-key derivation function. It was like a belt and suspenders type\nof thing.\n\n\nBut using transactions, the public key is revealed in the spending\ntransaction’s input when an output is spent. Look at John’s\ntransaction again in The input reveals the public key. We made an extra effort to avoid this in [ch03]..\n\n\n\n\n\nFigure 10. The input reveals the public key. We made an extra effort to avoid this in [ch03].\n\n\n\nDon’t reuse addresses\n\nBitcoin addresses shouldn’t be reused. Reusing addresses degrades both\nsecurity and privacy.\n\n\n\n\nThe input contains the public key. But it only reveals the public key\nonce the output is spent. This brings up an important point: don’t reuse\naddresses! If John has other unspent outputs to PKH1, those outputs\nare now less secure because they’re no longer protected by the\ncryptographic hash function—only by the public-key derivation function.\n\n\nNot only does address reuse degrade the security of your private keys,\nit also degrades your privacy, as discussed in [ch03]. Suppose again\nthat John has other outputs to PKH1. If Acme Insurances forces the\ncafe to reveal that it was John who bought the cookie, Acme would also\nknow that all outputs to PKH1 belong to John. This goes for change\noutputs, too.\n\n\nLuckily, the wallets will automate key creation for you, so you usually\ndon’t have to worry about key reuse. Most Bitcoin wallets on the market\ntoday use unique addresses for all incoming payments.\n\n\n\n\nAccount-based and value-based systems\n\nLet’s reflect on the changes we’ve made. We’ve moved from an\naccount-based system to a value-based system.\n\n\nAn account-based system keeps track of how much money each account has.\nThis is the type of system we had before this chapter. Lisa had to\ncalculate the balance of a PKH before deciding whether to allow a\npayment.\n\n\nA value-based system keeps track of “coins” instead. In this chapter,\nLisa needs to verify that the specific coins (UTXOs) exist before\ndeciding whether to allow the payment. She doesn’t have to verify the\nbalance of any PKH. Bitcoin is also a value-based system.\n\n\n\n\nScript\n\nI haven’t been totally honest about what a transaction contains. A\ntransaction’s output doesn’t contain a PKH, but part of a small computer\nprogram that contains a PKH. This part of the program is called a\npubkey script. The input that spends the output contains the other\npart of this program. This other part, the signature and the public key\nin John’s transaction, is called a signature script (The signature script is the first part of a program. The pubkey script in the spent output is the second part. If the complete program results in OK, then the payment is authorized to spend the output.).\n\n\n\n\n\nFigure 11. The signature script is the first part of a program. The pubkey script in the spent output is the second part. If the complete program results in OK, then the payment is authorized to spend the output.\n\n\nThis tiny program, written in a programming language called Script,\ncontains the instructions to Lisa on how to verify that the spending\ntransaction is authentic. If Lisa performs all the instructions in the\nprogram without errors, and the end result is OK, then the\ntransaction is authentic.\n\n\nThe ability to write a computer program inside a transaction is useful\nfor various use cases. We’ll cover several use cases of customized\nprograms throughout this book.\n\n\nSuppose Lisa wants to verify input 0 of John’s transaction. She’ll run\nthis program from top to bottom. A stack is used to keep track of\nintermediate calculation results. This stack is like a pile of stuff.\nYou can add stuff on top of the stack, and you can take stuff off the\ntop.\n\n\nLet’s start: look at Adding a signature and a public key to the stack. The first (top) item in the program is\na signature, which is just data. When you encounter ordinary data,\nyou’ll put it on the stack. Lisa puts the signature on the previously\nempty stack. Then she encounters a public key, which is also just data.\nShe puts that on the stack as well. The stack now contains a signature\nand a public key, with the public key on top.\n\n\n\n\n\nFigure 12. Adding a signature and a public key to the stack\n\n\nThe next item in the program is OP_DUP (Copying the public key on the stack, and adding a PKH). This isn’t just\ndata—this is an operator. An operator makes calculations based on items\non the stack and, in some cases, the transaction being verified. This\nspecific operator is simple: it means “Copy the top item on the stack\n(but keep it on the stack), and put the copy on top.” Lisa follows\norders and copies the public key on the stack. You now have two public\nkeys and a signature on the stack.\n\n\n\n\n\nFigure 13. Copying the public key on the stack, and adding a PKH\n\n\nThe next item is also an operator, OP_HASH160 (also shown in\nCopying the public key on the stack, and adding a PKH). This means “Take the top item off the stack and hash it\nusing SHA256+RIPEMD160, and put the result on the stack.”\n\n\nCool. Lisa takes the top public key from the stack, hashes it, and puts\nthe resulting PKH on top of the stack. This happens to be John’s PKH1\nbecause it was John’s public key that Lisa hashed.\n\n\nThe next item is just data (Adding PKH1 to the stack and comparing the two PKH items): it’s PKH1, which is the\nrightful recipient of the 8 CT. Lisa puts PKH1 on the stack.\n\n\n\n\n\nFigure 14. Adding PKH1 to the stack and comparing the two PKH items\n\n\nNext up is another operator, OP_EQUALVERIFY. This means “Take the top\ntwo items from the stack and compare them. If they’re equal, continue to\nthe next program instruction; otherwise, quit the program with an\nerror.” Lisa takes the two PKH items from the top of the stack and\nverifies that they’re equal. They are equal, which means the public\nkey John has provided in his transaction’s signature script matches the\nPKH that was set as the recipient in the output.\n\n\n\n\n\nFigure 15. Verifying the signature using John’s transaction and the rest of the items from the stack\n\n\n\nJohn’s cleaned transaction\n\n\n\n\n\n\nThe last operator, OP_CHECKSIG (Verifying the signature using John’s transaction and the rest of the items from the stack), means “Verify that the\ntop public key on the stack and the signature that’s next on the stack\ncorrectly sign the transaction. Put true or false on top of the\nstack depending on the verification outcome.” Lisa takes John’s\ntransaction and cleans out all the signature script from all inputs. She\nuses the top two items from the stack, which are John’s public key and\nhis signature, to verify that the signature signs the cleaned\ntransaction. When John signed this transaction, he did so without any\nsignature data in the inputs. This is why Lisa must first clean out the\nsignature script data from the transaction before verifying the\nsignature. The signature was good, so Lisa puts true, meaning\nOK, back on the stack.\n\n\nLook, the program is empty! Nothing is left to do. After running a\nprogram, the top item on the stack reveals whether the spending of the\noutput is authentic. If true—OK—then the spending is authorized. If\nfalse—not OK—then the transaction must be declined. Lisa looks at\nthe top item on the stack, and there’s an OK. Lisa now knows that\nJohn’s input with index 0 is good (The first input is verified.).\n\n\n\n\n\nFigure 16. The first input is verified.\n\n\nLisa does the same checks for the other input, with index 1, of John’s\ntransaction. If this program also ends with OK, then the entire\ntransaction is valid, and she can add the transaction to the\nspreadsheet.\n\n\nWhy use a program?\n\nThe pubkey script part of the program stipulates exactly what the\nspending transaction needs to provide to spend the output. The only way\nto spend an output is to provide a signature script that makes the\nprogram finish with an OK on top of the stack.\n\n\nIn the example I just presented, the only acceptable signature script is\na valid signature followed by the public key corresponding to the PKH in\nthe pubkey script.\n\n\n\nOperators\n\nA lot of useful operators can be used to create all kinds of fancy\nprograms. Check out [web-op-codes] for a complete list.\n\n\n\n\nUsing a programming language, Script, in the transactions makes them\nvery flexible. You’ll see several different types of Script programs\nthroughout this book. If the transactions didn’t use a programming\nlanguage, all use cases would have to be invented up front. The Script\nlanguage lets people come up with new use cases as they please.\n\n\nI’ve already mentioned that “pay to PKH” isn’t the only way to pay. You\ncan write any program in the pubkey script. For example, you can write a\npubkey script that ends with OK only if the signature script provides\ntwo numbers whose sum is 10. Or, you can write a program that ends with\nOK only if the signature script contains the SHA256 pre-image of a\nhash. Consider this example:\n\n\n\nOP_SHA256\n334d016f755cd6dc58c53a86e183882f8ec14f52fb05345887c8a5edd42c87b7\nOP_EQUAL\n\n\n\nThis will allow anyone who knows an input to SHA256 that results in\nthe hash 334d016f…d42c87b7 to spend the output. You happen to know\nfrom [ch02] that the text “Hello!” will give this specific\noutput. Suppose your signature script is\n\n\n\nHello!\n\n\n\nRun the program to convince yourself that it works and that all\nsignature scripts that don’t contain a correct pre-image fail.\n\n\n\nWhy signature script and pubkey script?\n\n\nOdd names\n\nBitcoin developers commonly use the term scriptPubKey for the pubkey\nscript and scriptSig for the signature script because that’s how\nthey’re named in the Bitcoin Core source code.\n\n\n\n\nYou might wonder why we call the output script part pubkey script when\nit usually doesn’t contain a public key. Likewise, the input script is\ncalled signature script, but it doesn’t only contain a signature.\n\n\nThe pubkey script in Bitcoin transactions used to contain an actual\npublic key, and the signature script used to contain the signature only.\nIt was more straightforward then. A typical pubkey script looked like\nthis\n\n\n\n<public key> OP_CHECKSIG\n\n\n\nand the signature script like this:\n\n\n\n<signature>\n\n\n\nThings have changed since then, but the names signature script and\npubkey script remain. Most developers today look at this more\nabstractly: the pubkey script can be regarded as a public key, and the\nsignature script can be regarded as a signature, but not necessarily\nordinary public keys and signatures. In a normal payment today, the\n“public key” is the script that needs to be satisfied by the\n“signature,” the signature script. Of course, the “public key” here\ncontains some operators and a PKH, but we can still view it as a public\nkey on a conceptual level. The same goes for the signature script, which\nwe can view as a signature on a conceptual level.\n\n\n\n\nWhere were we?\n\nThis chapter covers most aspects of transactions. This chapter covers transactions. Right now, we’re exploring different ways to authenticate transactions. is a\nreminder from [ch01] of how a typical transaction is sent.\n\n\nWe’ve gone through the anatomy of the transaction and are now discussing\ndifferent ways to authenticate, or “sign,” transactions.\n\n\n\n\n\nFigure 17. This chapter covers transactions. Right now, we’re exploring different ways to authenticate transactions.\n\n\n\nFancy payment types\n\n\nPay to hash\n\n\nOP_SHA256\n334d…87b7\nOP_EQUAL\n\n\n\n\n\nJohn’s transaction just spent two pay-to-public-key-hash (p2pkh)\noutputs. But as noted earlier, other payment types are possible—for\nexample, pay-to-hash, where you pay to a SHA256 hash. To spend this\noutput, you need to provide the hash’s pre-image in the spending input’s\nsignature script. We’ll explore some more interesting and useful ways to\nauthenticate transactions.\n\n\nMultiple signatures\n\nIn p2pkh, the recipient generates a cookie token address that’s handed\nover to the sender. The sender then makes a payment to that address.\n\n\nBut what if the recipient would like their money secured by something\nother than a single private key? Suppose Faiza, Ellen, and John want to\nraise money for charity from their coworkers.\n\n\n\n\n\n\n\n\n\n\n\nThey could use a normal p2pkh address that their supporters donate\ncookie tokens to. They could let, say, Faiza have control over the\nprivate key, so only she could spend the funds. This approach has a few\nproblems:\n\n\n\n\nIf Faiza dies, the money might be lost forever. Ellen and John won’t\nbe able to recover the funds.\n\n\nIf Faiza is sloppy with backup, the money might get lost. Again, no\none will be able to recover the funds.\n\n\nIf Faiza is sloppy with her private key security, the money might\nget stolen.\n\n\nFaiza might run away with the money.\n\n\n\n\nA lot of risks seem to be inherent in this setup, but what if Faiza\ngives the private key to her two charity partners? Then, all partners\ncan spend the money. This will solve problems 1 and 2, but problems 3\nand 4 would be worse because now any of the three partners might be\nsloppy with private-key security or run away with the money.\n\n\nThis organization consists of three people. It would be better if these\nthree people could share the responsibility and the power over the\nmoney somehow. Thanks to the Script programming language, they can\naccomplish this.\n\n\nThey can create one private key each and demand that two of the three\nkeys must sign the transaction to spend the charity funds. (Multisignature setup between Faiza, Ellen, and John. Two of the three keys are needed to spend money.).\n\n\n\n\n\nFigure 18. Multisignature setup between Faiza, Ellen, and John. Two of the three keys are needed to spend money.\n\n\nThis brings some good properties to the charity fundraising account:\n\n\n\n\nIf one of the three keys is stolen, the thief can’t steal the money.\n\n\nIf one of the three keys is lost due to sloppy backups or death,\nthen the other two keys are enough to spend the money.\n\n\nOut of the three partners, no single person can singlehandedly run\naway with the money.\n\n\n\n\nA program that enforces two signatures out of three possible keys. The secret sauce is OP_CHECKMULTISIG. shows a script program that enforces the two-of-three rule.\n\n\n\nBug\n\nThere is a bug in Bitcoin software that causes OP_CHECKMULTISIG to\nneed an extra dummy item first in the signature script.\n\n\n\n\n\n\n\nFigure 19. A program that enforces two signatures out of three possible keys. The secret sauce is OP_CHECKMULTISIG.\n\n\nThe OP_CHECKMULTISIG operator instructs Lisa to verify that the two\nsignatures in the signature script are made with the keys in the pubkey\nscript. Lisa runs the program in Moving some data items to the stack.\n\n\n\n\n\nFigure 20. Moving some data items to the stack\n\n\nThe top eight data items in the program are put on the stack. Then the\nonly operator, OP_CHECKMULTISIG, runs, as illustrated in\nExecuting the OP_CHECKMULTISIG operator, which results in OK this time.  OP_CHECKMULTISIG takes a number, 3 in this case,\nfrom the stack and then expects that number of public keys from the\nstack followed by another number. This second number dictates how many\nsignatures are needed to spend the money. In this case, the number is\n2. Then, the operator takes the expected number of signatures from\nthe stack, followed by the dummy mentioned earlier. You don’t use the\ndummy item.\n\n\n\n\n\nFigure 21. Executing the OP_CHECKMULTISIG operator, which results in OK this time\n\n\nOP_CHECKMULTISIG uses all this information and the transaction to\ndetermine whether enough signatures are made and verifies those\nsignatures. If everything is OK, it puts OK back on the stack. This\nis where the program ends. Because the top item on the stack is OK,\nthe output spending is authorized.\n\n\n\n\n\n\n\n\n\n\n\nA coworker who wants to donate cookie tokens to the charity needs to get\ntheir wallet to write the pubkey script in A program that enforces two signatures out of three possible keys. The secret sauce is OP_CHECKMULTISIG. into the donation\ntransaction’s output. This presents a few problems:\n\n\n\n\nThe coworker’s wallet knows how to make only p2pkh outputs. The\nwallet must be modified to understand multisignature outputs and\ninclude a user interface to make this kind of output understandable to\nusers.\n\n\nA sender usually doesn’t need to know how the recipient’s money is\nprotected. The sender doesn’t care if it’s multisignature, p2pkh, or\nanything else. They just want to pay.\n\n\nTransactions usually need to pay a fee to be processed (more on this\nin [ch07]). This fee generally depends on how big the transaction\nis, in bytes. A big pubkey script causes the sender to pay a\nhigher fee. This isn’t fair because it’s the recipient who wants to\nuse this fancy, expensive feature. The recipient, not the sender,\nshould pay for this luxury.\n\n\n\n\nYou can fix all this with a small change to how the programs are run.\nSome developers among your coworkers invent something called\npay-to-script-hash (p2sh).\n\n\n\nPay-to-script-hash\n\nWe’ve discussed how p2pkh hides the public key from the sender, who gets\na hash of the public key to pay to instead of the public key itself.\n\n\n\nBIP16\n\nThis type of payment was introduced in 2012 in BIP16.\n\n\n\n\np2sh takes this idea even further—it hides the script program. Instead\nof giving a big, complicated pubkey script to the sender, you give them\njust the hash of the script. The sender then makes a payment to that\nhash and leaves it up to the recipient to provide the script later, when\nthe recipient wants to spend the money.\n\n\nSuppose again that Faiza, Ellen, and John want to raise money for\ncharity, and they want a multisignature setup to protect their money\n(Overview of p2sh. The pubkey script is simple. The signature script is special because it contains a data item that contains a program.).\n\n\n\n\n\nFigure 22. Overview of p2sh. The pubkey script is simple. The signature script is special because it contains a data item that contains a program.\n\n\nTo verify this transaction in full, you need new software. We’ll talk\nabout how this new software verifies this transaction in a moment.\nFirst, let’s see how the old software would handle this transaction.\n\n\nOld software\n\nWhat if the person verifying the transaction hasn’t upgraded their\nsoftware to the bleeding-edge version that supports verifying p2sh\npayments? The developers made this forward-compatible, meaning old\nsoftware won’t reject these new transactions.\n\n\n\nWhy verify?\n\nThe cafe isn’t involved in this transaction, so why would the cafe\nwant to verify it? The cafe wants to know whether Lisa is doing\nher job. It’s in the cafe’s interest to know if something fishy is\ngoing on.\n\n\n\n\nLet’s pretend the cafe runs old software to verify this transaction in\nthe spreadsheet (Verifying the p2sh transaction using old software). Old software will do what it’s always\nbeen doing—push the stuff in the signature script and then run the\npubkey script.\n\n\nWhen the program is finished, the top item on the stack is true, or\nOK. This means the payment is valid according to this old software.\n\n\n\n\n\nFigure 23. Verifying the p2sh transaction using old software\n\n\nYou might recognize the pubkey script from the earlier example, when you\ncould pay money to a pre-image of a hash. That’s what happened here,\ntoo, but with a different cryptographic hash function.\n\n\nThe old software interprets this program as a payment to a hash. Whoever\ncan show a pre-image of this hash gets the money. The actual\nmultisignature program contained in the redeem script never runs.\n\n\n\nNew software\n\nSuppose the cafe just upgraded its software and wants to verify this\ntransaction again. Let’s see how that happens.\n\n\nThe new software looks at the pubkey script to determine if this\ntransaction is spending a p2sh output. It looks for this pattern:\n\n\n\nOP_HASH160\n20 byte hash\nOP_EQUAL\n\n\n\nIf the pubkey script has this exact pattern—the p2sh pattern—the\nsoftware will treat the program differently. First, it will perform the\nsame seven steps as the old software, shown in Verifying the p2sh transaction using old software, but it will\nsave the stack after step 2. Let’s call this the saved stack. If the\nfirst seven steps result in OK, then the stack is replaced by the\nsaved stack; and the top item, redeemScript, is taken off the stack\n(The stack is replaced by the saved stack, and redeemScript is taken off the stack.).\n\n\n\n\n\nFigure 24. The stack is replaced by the saved stack, and redeemScript is taken off the stack.\n\n\nredeemScript is a data item that contains a program, as previously\ndescribed. This program is now entered into the program area and begins\nto execute. It executes from now on as if it was an old-style payment\n(Executing the program contained in the redeem script).\n\n\n\n\n\nFigure 25. Executing the program contained in the redeem script\n\n\nIt’s important for Lisa that she runs the latest software. If Lisa ran\nold software, she would verify only that the redeem script hash matches\nthe script hash in the pubkey script. Anyone who happened to know the\nredeem script—for example, Faiza—would be able to take the money in the\nspreadsheet. Lisa would gladly confirm that transaction. This would\ncause problems if any verifying nodes ran new software. Those nodes\nwouldn’t accept the transaction in the spreadsheet because it’s invalid\naccording to the new rules. The entire spreadsheet would then be invalid\nand unacceptable for new nodes from that point forward. We’ll discuss\nthis situation more in [ch11].\n\n\n\n\nPay-to-script-hash addresses\n\nFaiza, Ellen, and John have created their two-of-three multisignature\nredeem script:\n\n\n\n2\n022f52f2868dfc7ba9f17d2ee3ea2669f1fea7aea3df6d0cb7e31ea1df284bdaec\n023d01ba1b7a1a2b84fc0f45a8a3a36cc7440500f99c797f084f966444db7baeee\n02b0c907f0876485798fc1a8e15e9ddabae0858b49236ab3b1330f2cbadf854ee8\n3\nOP_CHECKMULTISIG\n\n\n\nThey now want people to pay to the redeem script’s SHA256+RIPEMD160\nhash:\n\n\n\n04e214163b3b927c3d2058171dd66ff6780f8708\n\n\n\n\n\n\n\n\n\n\n\n\nHow do Faiza, Ellen, and John ask people to pay them? What do they print\non the flyers so coworkers can pay to their script hash? Let’s look at a\ncouple of their options:\n\n\n\n\nPrint the script hash as is, and inform coworkers that this is a\nhash of a redeem script. This would expose the coworkers to the\nunnecessary risk of typing errors, just as with payments to raw PKHs,\nas discussed in [ch03].\n\n\nBase58check-encode the script hash just as in [ch03], which would\ngenerate an address like 1SpXyW…RMmEMZ. If this address was printed\non the flyers, they would also need to inform users that they must\ncreate a p2sh output instead of a normal p2pkh.\n\n\n\n\nIn both cases, if the donor erroneously makes a p2pkh payment using\nthe printed hash or address, no one can spend the money because no\nprivate key corresponds to this false PKH.\n\n\nThese two options seem neither safe nor practical. Instead, let’s\nintroduce a new address format for p2sh, the p2sh address\n(Creating a p2sh address. The difference from normal addresses is the version, which is 05 for p2sh addresses instead of 00.). This format is similar to normal p2pkh addresses. It\nuses the base58check encoding scheme, just as normal addresses did.\n\n\n\n\n\nFigure 26. Creating a p2sh address. The difference from normal addresses is the version, which is 05 for p2sh addresses instead of 00.\n\n\nThis process is almost the same as for p2pkh addresses. The only\ndifference is that the version is 05 instead of 00. This will cause\nthe address to begin with a 3 instead of a 1.\n\n\nBecause of this change and how base58 works—using integer division by\n58 successively—the last remainder will always be 2. If you’re\ninterested, Encoding a versioned and checksummed script hash with base58. The result will always start with the character 3. provides the base58 encoding of the versioned\nand checksummed script hash of Faiza’s, Ellen’s, and John’s redeem\nscript.\n\n\n\n\n\nFigure 27. Encoding a versioned and checksummed script hash with base58. The result will always start with the character 3.\n\n\nThis last remainder 2 will translate to 3 in base58’s\ncharacter-lookup table. This 3 character will become the first\ncharacter when the base58 process performs the reversing step. This\ncauses all p2sh addresses to start with a 3. This is how users\nidentify them as p2sh addresses and not, for example, p2pkh addresses.\n\n\n\n\n\n\n\n\n\n\n\nFaiza, Ellen, and John can now print 328qTX…wrB2ag on their flyer.\nWhen a coworker scans this flyer’s QR code, their wallet will recognize\nthe address as a p2sh address because it starts with a 3. The wallet\nwill base58check-decode the address and create a proper p2sh output:\n\n\n\nOP_HASH160\n04e214163b3b927c3d2058171dd66ff6780f8708\nOP_EQUAL\n\n\n\nThis concludes our discussion of programmable transactions. You’ve\nlearned that transactions can express a lot of different rules for how\nto spend money. Note that you can’t constrain where spent money goes,\nonly what’s needed in the input to spend the money. The pubkey script\nmakes the rules for what’s required in the signature script. Later in\nthe book, we’ll revisit transactions to talk about more fancy stuff you\ncan do with them, such as make spending impossible until a certain\nfuture date.\n\n\n\n\nMore stuff in transactions\n\n\n\n\n\n\n\n\n\n\nWe still haven’t covered all the contents of a transaction. A few more\npieces of information belong in transactions, including version, lock\ntime, and sequence numbers:\n\n\n\nVersion\n\nEach transaction has a version. As of this writing, there\nare two versions: 1 and 2.\n\nSequence number\n\nA 4-byte number on each input. For most\ntransactions, this is set to its maximum value ffffffff. This is an\nold, disabled feature that’s being repurposed for new functionality.\n\nLock time\n\nA point in time before which the transaction can’t be\nadded to the spreadsheet. If the lock time is 0, the transaction is\nalways allowed to be added to the spreadsheet.\n\n\n\n\nI include this sparse information here for completeness. We’ll discuss\nthese features more in [ch09], when you know more about Bitcoin’s\nfundamentals.\n\n\n\nRewards and coin creation\n\n\n\n\n\n\n\n\n\n\nYou might be wondering where all the cookie tokens come from in the\nfirst place. Remember in [ch02], when I described how Lisa gets\nrewarded with 7,200 CT daily? She would insert a new row in the\nspreadsheet every day, paying 7,200 new CT to herself.\n\n\nNow she still rewards herself with 7,200 CT per day, but in a slightly\ndifferent way. Every day she adds a special transaction to the\nspreadsheet called a coinbase transaction (Lisa rewards herself every day with a coinbase transaction.).\n\n\n\n\n\nFigure 28. Lisa rewards herself every day with a coinbase transaction.\n\n\n\nRewards\n\nRewards in Bitcoin are paid using coinbase transactions roughly every\n10 minutes to the nodes securing the Bitcoin blockchain. This will be\ncovered in [ch07].\n\n\n\n\nThe coinbase transaction’s input is called the coinbase. The only\nway to create new coins is to add a coinbase transaction to the\nspreadsheet. New coins are created as rewards to Lisa for performing her\nvaluable work.\n\n\nAll transactions can be traced back to one or more coinbase\ntransactions by following the txid references in transaction inputs. The\ntransactions form a transaction graph (The transaction graph. All transactions descend from one or more coinbase transactions.). They’re\ninterconnected through the txids.\n\n\n\n\n\nFigure 29. The transaction graph. All transactions descend from one or more coinbase transactions.\n\n\nJohn’s transaction stems from four different coinbase transactions. To\nverify John’s transaction, you must follow all txids from John’s\ntransaction and verify all the transactions along the way until you’ve\nreached the four coinbase transactions. This is what the UTXO set helps\nverifiers with. It keeps track of all already-verified UTXOs. The\nverifiers only have to follow the txids (usually only one step) until it\nreaches an output that’s in the UTXO set.\n\n\nThe coinbase transactions must also be verified so there is exactly one\ncoinbase per 24 hours, and each coinbase creates exactly 7,200 new\ncookie tokens.\n\n\nTransition from version 4.0\n\nYou might be wondering how the coworkers updated from the old\nspreadsheet—as it was in release 4.0—to the one that contains\ntransactions. What happened to the already-existing cookie tokens in the\nspreadsheet?\n\n\nThey all agreed on a time slot when the upgrade would take place. During\nthis time slot, Lisa created a single, huge transaction with one output\nper PKH in the spreadsheet. This transaction looks like a coinbase\ntransaction but with a lot of outputs. Anyone can keep a version of the\nold spreadsheet and verify that this new transaction contains the exact\nsame outputs as the old UTXO set. New verifiers can’t be sure it went\nwell, though—they’ll have to trust Lisa with that.\n\n\nNote that this isn’t at all how it happened in Bitcoin, which was\ndesigned for transactions from the beginning. The “initial state” in\nBitcoin was an empty UTXO set. No one had any bitcoins.\n\n\n\n\nTrust in Lisa\n\nIn this chapter, we’ve formalized the payment process—for example, the\ntransaction from the wallet must be sent as an attachment in an email to\nLisa. Lisa can take advantage of this formal process to automate all her\nwork. She writes a computer program that reads transactions from her\nemail inbox and automatically verifies them, maintains the UTXO set, and\nadds transactions to the spreadsheet. Lisa can relax and just watch her\ncomputer program do the job for her. Nice.\n\n\nBut now you may wonder if she’s still worth the 7,200 CT per day in\nrewards. She doesn’t work actively with verification anymore; she’s just\nsitting there, twiddling her thumbs. Let’s take a moment to reflect on\nwhat we’re rewarding her for. She’s rewarded not to perform boring\nmanual work but to perform correct, honest confirmations of transactions\nand not censor them. That’s what gives you and your coworkers value. If\nLisa writes a computer program to do the heavy lifting, it doesn’t make\nthe payment processing less correct or honest.\n\n\n\nWe trust that Lisa doesn’t …\n\n\n\nCensor transactions\n\n\nRevert transactions\n\n\n\n\n\n\nTransactions solve the problem with Lisa arbitrarily changing stuff in\nthe spreadsheet. The only things you have to trust Lisa with now are\nto\n\n\n\nNot censor transactions\n\nShe must add to the spreadsheet any valid\ntransactions that she receives over email.\n\nNot revert transactions\n\nTo revert a transaction is to remove it\nfrom the spreadsheet.\n\n\n\n\nIf Lisa decides she doesn’t like Faiza, and she also happens to know\nsome of Faiza’s UTXOs, she can refuse to process Faiza’s transactions\nthat try to spend those UTXOs. This means Faiza can’t spend her money.\nLisa is censoring Faiza’s transactions.\n\n\nIf Lisa removes a transaction, whose outputs are all unspent, from the\nspreadsheet, it might be noticed by already-running verifiers. But\nverifiers that started after the reverting won’t notice because the\nspreadsheet is still valid according to the rules.\n\n\nSuppose Lisa reverts John’s transaction from\nPaying using a transaction. Lisa removes John’s transaction from the\nspreadsheet. No one has spent any of the outputs of John’s transaction\nyet, so the spreadsheet doesn’t contain any transactions that become\ninvalid when John’s transaction is deleted.\n\n\nAn already-running verifier—for example, the cafe—won’t notice because\nit just watches the spreadsheet for added transactions at the end. It\nhas already verified John’s transaction and updated its private UTXO\nset. The cafe trusts Lisa to not delete transactions, so it never\nre-verifies the spreadsheet\n\n\nFurthermore, suppose a new coworker, Vera, starts to build her own\nUTXO set from the spreadsheet, which now lacks John’s\ntransaction. This UTXO set will differ from the cafe’s UTXO set. From\nVera’s viewpoint, John still has the money and hasn’t paid 10 CT to\nthe cafe. The outputs that John spent in his transaction appear\nunspent to Vera because they’re in Vera’s UTXO set.\n\n\nWe now have Vera, who thinks John still has the money; Lisa, who\ndeleted the transaction; and the cafe, which thinks it got 10 CT from\nJohn. So far, no one has noticed Lisa’s crime. It will remain\nunnoticed as long as nobody tries to spend an output from John’s\ntransaction. This could be the cafe spending its 10 CT or John\nspending his 3 CT change.\n\n\nLet’s say the cafe wants to pay its rent to the company. It needs to\nspend, among other outputs, the output of John’s transaction. The cafe\ncreates a transaction that spends the output, signs it, and sends it\nto Lisa. Lisa knows she’s deleted John’s transaction and her crime\nwill now be noticed. If Lisa decides to confirm the cafe’s\ntransaction, then she’ll make the entire spreadsheet invalid, and Vera\nand all other verifiers will reject the spreadsheet as a whole. Not\ngood. If Lisa decides to reject the transaction, which is the more\nsensible thing for her to do, the cafe will notice because its\ntransaction never confirms.\n\n\nWhen the cafe notices, it can’t prove that John’s transaction was ever\nin the spreadsheet. Lisa can’t prove that John’s transaction was never\nin the spreadsheet. It’s word against word. We’ll solve this problem\nin [ch06].\n\n\nIt isn’t obvious why Lisa would delete John’s transaction. Maybe John\npays Lisa to do it. It would probably make more sense for Lisa to\ncheat with her own money instead. Let’s say she buys a cookie in the\ncafe, and when the cafe has seen the transaction from Lisa to the cafe\nin the spreadsheet, it gives a cookie to Lisa. Yummy. Then Lisa walks\nback to her desk and removes her transaction. Now she’s got a cookie\nand she gets to keep the money. This will, of course, be noticed\nwhen the cafe tries to spend the output from the removed transaction\nor the next time Lisa tries to double-spend the outputs spent by the\nremoved transaction.  But as with John’s transaction, it’s word\nagainst word. Lisa can claim the transaction was never in the\nspreadsheet, and the cafe can claim it was. No one can prove anything.\n\n\n\nRecap\n\nTransactions make it impossible for Lisa to steal cookie tokens from\nothers. They solve the problem by making all signatures public in the\nspreadsheet. Users’ wallets create and sign transactions that Lisa\nverifies and appends to the spreadsheet.\n\n\n\n\n\n\n\nTransactions have inputs and outputs. An output of a transaction\ncontains the last part of a Script program. When the output is spent,\nthe input that’s spending the output must provide the first part of the\nprogram.\n\n\n\n\n\n\n\nLisa runs the program. If the program ends with OK, then the\nspending of that output is authorized. If the programs of all inputs\nin a transaction end with OK, the entire transaction is valid, and\nLisa adds the transaction to the spreadsheet.\n\n\nOnce the transaction is in the spreadsheet, anyone can make the exact\nsame checks as Lisa did, because she added the transaction to the\nspreadsheet exactly as she received it. If Lisa makes changes to it,\npeople will notice that the spreadsheet is no longer valid because it\ncontains an invalid transaction. The only things you can’t verify are\nif transactions are being censored (not added to the spreadsheet) or\ndeleted from the spreadsheet. You have to trust Lisa with these two\nthings for now.\n\n\nSystem changes\n\n\n\n\n\n\n\n\n\n\nTransactions and txid have been added to your toolbox. The\nconcept-mapping table (Transactions replace emails to Lisa and rows in the spreadsheet.) shrinks by two rows: emails to\nLisa and rows in the spreadsheet are replaced by transactions. Note\nthat you still use email to send the transaction to Lisa, but the\ntransaction has the same format as in Bitcoin. This is why we can\nremove the row.\n\n\nTable 1. Transactions replace emails to Lisa and rows in the spreadsheet.\n\n\n\n\n\n\n\nCookie tokens\nBitcoin\nCovered in\n\n\n\n\n1 cookie token\n1 bitcoin\n[ch02]\n\n\nThe spreadsheet\nThe blockchain\n[ch06]\n\n\nEmail to Lisa\nA transaction\nTransactions\n\n\nA row in the spreadsheet\nA transaction\nTransactions\n\n\nLisa\nA miner\n[ch07]\n\n\n\n\nThe next chapter will take care of replacing the spreadsheet, which now\ncontains transactions, with a blockchain.\n\n\nLet’s release version 5.0 of the cookie token system (Release notes, cookie tokens 5.0).\n\n\nTable 2. Release notes, cookie tokens 5.0\n\n\n\n\n\n\n\nVersion\nFeature\nHow\n\n\n\n\n5.0\nSpend multiple “coins” in one payment\nMultiple inputs in transactions\n\n\nAnyone can verify the spreadsheet\nMake the signatures publicly available in the transactions\n\n\nSender decides on criteria for spending the money\nScript programs inside transactions\n\n\n4.0\nEasy to make payments and create new addresses\nMobile app “wallet”\n\n\nSimplified backups\nHD wallets are generated from a seed. Only the seed, 12 to 24 English\nwords, needs to be backed up.\n\n\nCreating addresses in insecure environments\nHD wallets can generate public key trees without ever seeing any of the\nprivate keys\n\n\n3.0\nSafe from expensive typing errors\nCookie token addresses\n\n\nPrivacy improvements\nA PKH is stored in the spreadsheet instead of a personal name.\n\n\n\n\n\n\nExercises\n\nWarm up\n\n\n\nSuppose all your money is spread over three UTXOs: one with 4 CT,\none with 7 CT, and one with 2 CT. Which of these outputs would you\nspend if you wanted to buy a cookie for 10 CT? What outputs would your\ntransaction have, and what would their CT values be?\n\n\nWhat are txids used for in a transaction?\n\n\nWhy do you usually need to add a change output in your transaction?\n\n\nWhere are the signatures located in a transaction?\n\n\nWhy is the public key needed in the input of a transaction if it\nspends a p2pkh output?\n\n\nWhy are the signature scripts of a transaction cleaned when your\nwallet signs the transaction?\n\n\nWhere are the pubkey scripts located in a transaction, and what\ndo they contain?\n\n\nWhat’s required from a Script program (signature script + pubkey\nscript) for an input to be considered authentic?\n\n\nHow can you recognize a p2sh address?\n\n\n\n\n\nDig in\n\n\n\nSuppose you have 100 CT in a single output at index 7 of a\ntransaction. You want to pay 10 CT to the cafe’s p2pkh address @C\nand 40 CT to Faiza, Ellen, and John’s charity’s p2sh address @FEJ.\nConstruct a single transaction that does this. Please cheat by looking\nup the exact operators and program templates from this chapter. You\ndon’t have to sign any inputs.\n\n\nThe UTXO set contains all UTXOs. Suppose it contains 10,000 UTXOs,\nand you send a transaction to Lisa that has two inputs and five\noutputs. How many UTXOs will the UTXO set contain after the\ntransaction has been confirmed?\n\n\nCreate a really simple pubkey script that allows anyone to\nspend the output. What would the signature script of the spending input\ncontain?\n\n\nCreate a pubkey script that requires the spender to provide two\nnumbers in the signature script whose sum is 10 in order to spend the\nmoney. An operator called OP_ADD takes the top two items from the\nstack and puts back the sum of those items.\n\n\nSuppose you run a full node and receive money from Faiza in a\nconfirmed transaction. Can you trust that the money from Faiza is real?\n\n\nA public key is visible in the input that spends a p2pkh\noutput. What’s the drawback of this if you have multiple UTXOs for the\nsame PKH? What can you do to avoid this drawback?\n\n\n\n\n\n\nSummary\n\n\n\nTransactions have inputs and outputs, so you can spend multiple\n“coins” and pay multiple recipients in a single transaction.\n\n\nThe outputs of transactions are “programmable.” The sender wallet\ndecides what program to put in the output. This dictates what’s needed\nto spend the money.\n\n\nAnyone can verify the entire spreadsheet because all signatures are\npublic. This greatly reduces the required trust in Lisa.\n\n\nScripts can be used to enable multisignature capabilities—for\nexample, three-of-seven capabilities. This is great for companies and\ncharities.\n\n\nA new address type, a p2sh address beginning with 3, is used to\nsimplify the payment process for a lot of fancy payment types, such as\nmultisignatures.\n\n\nAll transactions descend from one or more coinbase transactions.\nCoinbase transactions are the only way to create money.\n\n\nMoney creation is verified by any coworker to make sure Lisa creates\nexactly as much as agreed: 7,200 CT per day and halving every four\nyears.\n\n\nLisa can censor and revert transactions. You still have to trust her\nwith that.\n\n\n\n\n\n', 'body_type': 'html', 'authors': ['Kalle Rosenbaum'], 'domain': 'https://github.com', 'url': 'https://github.com/kallerosenbaum/grokkingbitcoin/blob/master/ch05-transactions.adoc', 'created_at': '2023-06-29T13:58:30.068982'}}, {'_index': 'bitcoin-search-scrapy-23', '_id': 'pjfTBokBCZBMBhppB9Wk', '_score': 1.0, '_ignored': ['body.keyword', 'body_formatted.keyword'], '_source': {'id': 'grokkingbtc-60741419-48c3-4da8-9a41-6c750081d2f8', 'title': '[Grokking Bitcoin] Cryptographic hash functions and digital signatures', 'body_formatted': '<article><div>\n<h2><a><svg><path></path></svg></a>Cryptographic hash functions and digital signatures</h2>\n<div>\n<div>\n<p>This chapter covers</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Creating a simple money system: cookie tokens</p>\n</li>\n<li>\n<p>Understanding cryptographic hash functions</p>\n</li>\n<li>\n<p>Authenticating payments using digital signatures</p>\n</li>\n<li>\n<p>Keeping your secrets secret</p>\n</li>\n</ul>\n</div>\n<div>\n<p>I’ll start this chapter by setting the stage for the rest of this\nbook.  We’ll look at a simple payment system that we can improve on\nusing Bitcoin technologies. By the time we get to <a>[ch08]</a>, this\nsimple system will have evolved into what we call Bitcoin.</p>\n</div>\n<div>\n<p>The second part of this chapter will teach you what you need to know\nabout cryptographic hash functions. These are so important to Bitcoin\nthat you really need to understand them before learning anything else.\nYou’ll see how a cryptographic hash function can be used to verify\nthat a file hasn’t changed since a previous point in time.</p>\n</div>\n<div>\n<p>The rest of the chapter will solve the problem of the <em>imposter</em>: a\nbad guy claiming to be someone else to pay money from that someone’s\naccount. We solve this problem by introducing digital signatures\n(<a>Digital signatures in Bitcoin</a>) into the simple system.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 1. Digital signatures in Bitcoin</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>The cookie token spreadsheet</h3>\n<div>\n<p>Suppose there’s a cafe in the office where you work. You and your\ncoworkers use a spreadsheet to keep track of <em>cookie tokens</em>\n(<a>The cookie token spreadsheet has a column for the sender, a column for the recipient, and a column for the number of cookie tokens transferred. New cookie token transfers are appended at the end of the spreadsheet.</a>), which use the symbol CT. You can exchange cookie tokens\nfor cookies in the cafe.</p>\n</div>\n<div>\n<div>\n<div>Bitcoin, the currency</div>\n<div>\n<p>A cookie token corresponds to a bitcoin, the currency unit of\nBitcoin. Bitcoin got its first price point 2010 when someone bought\ntwo pizzas for 10,000 BTC. That money would get you 6,000,000 pizzas\nas of November 2018.</p>\n</div>\n</div>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 2. The cookie token spreadsheet has a column for the sender, a column for the recipient, and a column for the number of cookie tokens transferred. New cookie token transfers are appended at the end of the spreadsheet.</div>\n</div>\n<div>\n<p>Lisa stores this spreadsheet on her computer. It’s shared read-only\nfor everybody on the office network to open and watch, except\nLisa. Lisa is very trustworthy. Everybody trusts her. She has full\naccess to do whatever she likes with the spreadsheet. You and all the\nothers can only view the spreadsheet by opening it in read-only mode.</p>\n</div>\n<div>\n<p>Whenever Alice wants a cookie, she asks Lisa, who sits right next to\nthe cafe, to transfer 10 CT from Alice to the cafe. Lisa knows who\nAlice is and can verify in the spreadsheet that she owns enough cookie\ntokens; she’ll search for “Alice” in the spreadsheet, sum all the\namounts with Alice’s name in the To column, and subtract all the\namounts with Alice’s name in the From column. <a>Lisa calculates Alice’s balance. The sum of her received cookie tokens is 100, and the sum of her withdrawn cookie tokens is 30. Alice’s balance is 70 CT.</a> shows the\ncomplete search result; three transfers involve Alice.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 3. Lisa calculates Alice’s balance. The sum of her received cookie tokens is 100, and the sum of her withdrawn cookie tokens is 30. Alice’s balance is 70 CT.</div>\n</div>\n<div>\n<p>Lisa calculates that Alice has 70 CT, enough for Alice to pay 10 CT to\nthe cafe. She <em>appends</em> a row at the end of the spreadsheet (<a>Lisa adds Alice’s payment for a cookie. The payment is appended last in the cookie token spreadsheet.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 4. Lisa adds Alice’s payment for a cookie. The payment is appended last in the cookie token spreadsheet.</div>\n</div>\n<div>\n<p>The cafe sees this new row in the spreadsheet and hands a cookie over to\nAlice.</p>\n</div>\n<div>\n<div>\n<div>Earn them</div>\n<div>\n<p>You can also get cookie tokens as part of your salary.</p>\n</div>\n</div>\n</div>\n<div>\n<p>When you run out of cookie tokens, you can buy tokens for dollars from\nsomeone who is willing to sell you some—possibly Anne or the cafe—at a\nprice you both agree on. Lisa will then add a row to the spreadsheet\naccordingly.</p>\n</div>\n<div>\n<p>Lisa has promised never to remove or change anything in the\nspreadsheet, just add to it. What happens in the spreadsheet, stays in\nthe spreadsheet!</p>\n</div>\n<div>\n<p>Lisa, who is performing valuable work to secure this money system, is\nrewarded with 7,200 newly minted cookie tokens per day (<a>Lisa is rewarded with cookie tokens.</a>).\nEvery day, she adds a new row to the spreadsheet that creates 7,200\nnew cookie tokens with Lisa as the recipient.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 5. Lisa is rewarded with cookie tokens.</div>\n</div>\n<div>\n<div>\n<div>Money supply curve</div>\n<div>\n<p>Bitcoin uses the same schedule for issuance as the cookie token\nspreadsheet. All new bitcoins are created as rewards to the nodes\nsecuring the Bitcoin ledger—the blockchain—just as Lisa is rewarded\nfor securing the cookie token spreadsheet.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>This is how all the cookie tokens in the spreadsheet are created. The\nfirst row in the spreadsheet is a reward row—like the one in the\nspreadsheet just shown—that creates the very first 7,200 CT ever. The\nplan is that Lisa is rewarded with 7,200 CT per day during the first\nfour years, and then the reward is halved to 3,600 CT/day for the next\nfour years, and so on until the reward is 0 CT/day.</p>\n</div>\n<div>\n<p>Don’t worry, for now, about what happens when the reward approaches\n0—that’s far in the future. We’ll discuss that in <a>[ch07]</a>. This reward\nhalving makes the total money supply—the total number of cookie tokens\nin circulation—approach 21 million CT, but it will never exceed 21\nmillion.</p>\n</div>\n<div>\n<p>What Lisa does with the new cookie tokens she earns is up to her. She\ncan buy cookies or sell the cookie tokens. She can also save them for\nlater. The spreadsheet system works well, and everybody eats a healthy\nnumber of cookies.</p>\n</div>\n<div>\n<p>Lisa basically performs the same work as miners in the Bitcoin network.\nShe verifies payments and updates the ledger, the cookie token\nspreadsheet. <a>How key ingredients of the cookie token system and the Bitcoin system relate</a> clarifies how the concepts in the spreadsheet\ncorrespond to concepts in Bitcoin.</p>\n</div>\n\nTable 1. How key ingredients of the cookie token system and the Bitcoin system relate\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Cookie tokens</th>\n<th>Bitcoin</th>\n<th>Covered in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>1 cookie token</p></td>\n<td><p>1 bitcoin</p></td>\n<td><p><a>Cryptographic hash functions and digital signatures</a></p></td>\n</tr>\n<tr>\n<td><p>The spreadsheet</p></td>\n<td><p>The blockchain</p></td>\n<td><p><a>[ch06]</a></p></td>\n</tr>\n<tr>\n<td><p>A row in the spreadsheet</p></td>\n<td><p>A transaction</p></td>\n<td><p><a>[ch05]</a></p></td>\n</tr>\n<tr>\n<td><p>Lisa</p></td>\n<td><p>A miner</p></td>\n<td><p><a>[ch07]</a></p></td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>This table will follow us throughout the book. It describes differences\nbetween the cookie token system and Bitcoin. I’ll delete rows from it as\nI introduce various Bitcoin stuff. For example, the row “The\nspreadsheet” will be deleted in <a>[ch06]</a>, when we use a blockchain to\nstore transactions. I’ll also add a few rows as I introduce new concepts\nfor the cookie token system that differ from those in Bitcoin.</p>\n</div>\n<div>\n<p>At the end of <a>[ch08]</a>, this table will contain only the first row,\nmapping 1 cookie token to 1 bitcoin. This will mark the end of this\ncookie token example, and from that point, we’ll talk only about Bitcoin\nitself.</p>\n</div>\n<div>\n<p><a>Release notes, cookie tokens 1.0</a> is your starting point for learning how Bitcoin works, which\nwe can call version 1.0 of the cookie token spreadsheet system.</p>\n</div>\n\nTable 2. Release notes, cookie tokens 1.0\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Version</th>\n<th>Feature</th>\n<th>How</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p><span><a><img/></a></span>1.0</p></td>\n<td><p>Simple payment system</p></td>\n<td><p>Relies on Lisa being trustworthy and knowing everyone’s face</p></td>\n</tr>\n<tr>\n<td><p>Finite money supply</p></td>\n<td><p>7,200 new CT rewarded to Lisa daily; halves every four years</p></td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>We’ll add a lot of fancy stuff to this system and release a new version\nin every chapter. For example, at the end of this chapter, we’ll release\nversion 2.0, which uses digital signatures to solve the problem of\nimposters. Every chapter will take us closer to the end result: Bitcoin.\nBut please be aware that this isn’t at all how Bitcoin evolved in\nreality—I’m just using this made-up system to help explain each\nimportant topic in isolation.</p>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Cryptographic hashes</h3>\n<div>\n<p>Cryptographic hashes are used everywhere in Bitcoin. Trying to learn\nBitcoin without knowing what cryptographic hashes are is like trying to\nlearn chemistry without knowing what an atom is.</p>\n</div>\n<div>\n<p>You can think of a cryptographic hash as a fingerprint. A person will\nproduce the same fingerprint of her left thumb every time it’s taken,\nbut it’s extremely hard to find another person with the same left thumb\nfingerprint. The fingerprint doesn’t disclose any information about the\nperson other than that particular fingerprint. You can’t know what math\nskills or eye color the person has by looking at this fingerprint.</p>\n</div>\n<div>\n<p>Digital information also has fingerprints. This fingerprint is called a\n<em>cryptographic hash</em>. To create a cryptographic hash of a file, you\nsend the file into a computer program called a <em>cryptographic hash\nfunction</em>. Suppose you want to create a cryptographic hash—a\nfingerprint—of your favorite cat picture. <a>Creating a cryptographic hash of a cat picture. Input is the cat picture and output is a big number of 32 bytes.</a> illustrates this\nprocess.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 6. Creating a cryptographic hash of a cat picture. Input is the cat picture and output is a big number of 32 bytes.</div>\n</div>\n<div>\n<div>\n<div>Bits? Bytes? Hex?</div>\n<div>\n<p>A <em>bit</em> is the smallest unit of information in a computer. It can take\neither of two different values: 0 or 1. Like a lightbulb, it can be\neither on or off. A <em>byte</em> is 8 bits that together can take 256\ndifferent values. We often use <em>hexadecimal</em>, or <em>hex</em>, encoding\nwhen we display numbers in this book. Each byte is printed as two hex\ndigits each in the range 0–f, where a = 10 and f = 15.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>The output—the hash—is a 256-bit number; 256 bits equals 32 bytes\nbecause 1 byte consists of 8 bits. Thus, to store the number in a file,\nthe file will be 32 bytes big, which is tiny compared to the size of the\n1.21 MB cat picture. The particular cryptographic hash function used in\nthis example is called SHA256 (Secure Hash Algorithm with 256-bit\noutput) and is the most commonly used one in Bitcoin.</p>\n</div>\n<div>\n<p>The word <em>hash</em> means something that’s chopped into small pieces or\nmixed up. That’s a good description of what a cryptographic hash\nfunction does. It takes the cat picture and performs a mathematical\ncalculation on it. Out comes a big number—the cryptographic hash—that\ndoesn’t look remotely like a cat. You can’t “reconstruct” the cat\npicture from just the hash—a cryptographic hash function is a <em>one-way\nfunction</em>. <a>Hashing a modified cat picture. Can you spot the difference? The cryptographic hash function certainly did.</a> shows what happens when you change the cat\npicture a little and run it through the same cryptographic hash\nfunction.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 7. Hashing a modified cat picture. Can you spot the difference? The cryptographic hash function certainly did.</div>\n</div>\n<div>\n<p>This hash turns out completely different than the first hash. Let’s\ncompare them:</p>\n</div>\n<div>\n<div>\n<pre>Old hash: dee6a5d375827436ee4b47a930160457901dce84ff0fac58bf79ab0edb479561\nNew hash: d2ca4f53c825730186db9ea585075f96cd6df1bfd4fb7c687a23b912b2b39bf6</pre>\n</div>\n</div>\n<div>\n<p>See how that tiny change to the cat picture made a huge difference in\nthe hash value? The hash value is completely different, but the length\nof the hash is always the same regardless of input. The input “Hello”\nwill also result in a 256-bit hash value.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Why are cryptographic hash functions useful?</h4>\n<div>\n<p>Cryptographic hash functions can be used as an integrity check to detect\nchanges in data. Suppose you want to store your favorite cat picture on\nyour laptop’s hard drive, but you suspect the stored picture might\nbecome corrupted. This could happen, for example, due to disk errors or\nhackers. How can you make sure you detect corruption?</p>\n</div>\n<div>\n<p>First, you calculate a cryptographic hash of the cat picture on your\nhard drive and write it down on a piece of paper (<a>Save a hash of the cat picture on a piece of paper</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 8. Save a hash of the cat picture on a piece of paper</div>\n</div>\n<div>\n<p>Later, when you want to look at the picture, you can check if it’s\nchanged since you wrote the hash on that paper. Calculate the\ncryptographic hash of the cat picture again, and compare it to the\noriginal hash on your paper (<a>Check the integrity of the cat picture. You detect a change.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 9. Check the integrity of the cat picture. You detect a change.</div>\n</div>\n<div>\n<div>\n<div>How sure?</div>\n<div>\n<p>There’s a tiny chance the cat picture has changed even though the\nhashes match. But as you’ll see later, that chance is so small, you\ncan ignore it.</p>\n</div>\n</div>\n</div>\n<div>\n<p>If the new hash matches the one on paper, you can be sure the picture\nhasn’t changed. On the other hand, if the hashes don’t match, the cat\npicture has definitely changed.</p>\n</div>\n<div>\n<p>Bitcoin uses cryptographic hash functions a lot to verify that data\nhasn’t changed. For example, every now and then—on average, every 10\nminutes—a new hash of the entire payment history is created. If someone\ntries to change the data, anyone verifying the hash of the modified data\nwill notice.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>How does a cryptographic hash function work?</h4>\n<div>\n<p>The real answer is complex, so I won’t go into exact detail. But to\nhelp you understand the operation of a cryptographic hash function,\nwe’ll create a very simplistic one. Well, it isn’t really\ncryptographic, as I’ll explain later. Let’s just call it a hash\nfunction for now.</p>\n</div>\n<div>\n<div>\n<div>Modulo</div>\n<div>\n<p><em>Modulo</em> means to wrap around when a calculation reaches a certain\nvalue. For example:</p>\n</div>\n<div>\n<div>\n<pre>0   mod 256 = 0\n255 mod 256 = 255\n256 mod 256 = 0\n257 mod 256 = 1\n258 mod 256 = 2</pre>\n</div>\n</div>\n<div>\n<p>258 mod 256 is the remainder of the integer division 258/256: 258 = 1\n× 256 + 2. The remainder is 2.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Suppose you want to hash a file containing the six bytes <code>a1 02 12 6b\nc6 7d</code>. You want the hash to be a 1-byte number (8 bits). You can\nconstruct a hash function using <em>addition modulo 256</em>, which means\nto wrap around to 0 when the result of an addition reaches 256\n(<a>Simplistic hash function using byte-wise addition modulo 256</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 10. Simplistic hash function using byte-wise addition modulo 256</div>\n</div>\n<div>\n<p>The result is the decimal number 99. What does 99 say about the original\ninput <code>a1 02 12 6b c6 7d</code>? Not much—99 looks just as random as any other\nsingle-byte number.</p>\n</div>\n<div>\n<p>If you change the input, the hash will change, although a chance exists\nthat the hash will remain 99. After all, this simple hash function has\njust 256 different possible outputs. With real cryptographic hash\nfunctions, like the one we used to hash the cat picture, this chance is\nunimaginably small. You’ll soon get a glimpse of this probability.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Properties of a cryptographic hash function</h4>\n<div>\n<p>A cryptographic hash function takes any digital input data, called a\n<em>pre-image</em>, and produces a fixed-length output, called a <em>hash</em>. In\nthe example with the cat picture on your hard drive, the pre-image is\nthe cat picture of 1.21 MB, and the hash is a 256-bit number. The\nfunction will output the exact same hash each time the same pre-image is\nused. But it will, with extremely high probability, output a totally\ndifferent hash when even the slightest variation of that pre-image is\nused. The hash is also commonly referred to as a <em>digest</em>.</p>\n</div>\n<div>\n<p>Let’s look at what properties you can expect from a cryptographic hash\nfunction. I’ll illustrate using SHA256 because it’s the one Bitcoin uses\nmost. Several cryptographic hash functions are available, but they all\nprovide the same basic properties:</p>\n</div>\n<div>\n<ol>\n<li>\n<p>The same input will always produce the same hash.</p>\n</li>\n<li>\n<p>Slightly different inputs will produce very different hashes.</p>\n</li>\n<li>\n<p>The hash is always of the same fixed size. For SHA256, it’s 256 bits.</p>\n</li>\n<li>\n<p>Brute-force trial and error is the only known way to find an input\nthat gives a certain hash.</p>\n</li>\n</ol>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 11. A cryptographic hash function, SHA256, in action. The input “Hello!” will give you the same output every time, but the slightly modified input “Hello” will give you totally different output.</div>\n</div>\n<div>\n<p><a>A cryptographic hash function, SHA256, in action. The input “Hello!” will give you the same output every time, but the slightly modified input “Hello” will give you totally different output.</a> illustrates the first three properties. The fourth property\nof a cryptographic hash function is what makes it a <em>cryptographic</em> hash\nfunction, and this needs a bit more elaboration. There are some\nvariations to the fourth property, all of which are desirable for\ncryptographic hash functions (<a>Different desirable properties for cryptographic hash functions. For collision resistance, X can be anything, as long as the two <em>different</em> inputs give the same output X.</a>):</p>\n</div>\n<div>\n<dl>\n<dt>Collision resistance</dt>\n<dd>\n<p>You have only the cryptographic hash function\nat hand. It’s hard to find two <em>different</em> inputs that <em>result in the\nsame hash</em>.</p>\n</dd>\n<dt>Pre-image resistance</dt>\n<dd>\n<p>You have the hash function and a hash. It’s\nhard to find <em>a pre-image of that hash</em>.</p>\n</dd>\n<dt>Second-pre-image resistance</dt>\n<dd>\n<p>You have the hash function and a\npre-image (and thus the hash of that pre-image). It’s hard to find\n<em>another pre-image with the same hash</em>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 12. Different desirable properties for cryptographic hash functions. For collision resistance, X can be anything, as long as the two <em>different</em> inputs give the same output X.</div>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Illustration of “hard”</h4>\n<div>\n<p>The term <em>hard</em> in this context means astronomically hard. It’s silly to\neven try. We’ll look at second-pre-image resistance as an example of\nwhat <em>hard</em> means, but a similar example can be made for any of the\nthree variants.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Suppose you want to find an input to SHA256 that results in the same hash\nas “Hello!”:</p>\n</div>\n<div>\n<div>\n<pre>334d016f755cd6dc58c53a86e183882f8ec14f52fb05345887c8a5edd42c87b7</pre>\n</div>\n</div>\n<div>\n<p>You can’t change the input “Hello!” just a little so the function “won’t\nnotice.” It <em>will</em> notice and will output a totally different hash. The\nonly way to find an input other than “Hello!” that gives the hash\n<code>334d016f…\u200bd42c87b7</code> is to try different inputs one by one and check\nwhether one produces the desired hash.</p>\n</div>\n<div>\n<p>Let’s try, using <a>Finding an input with the same hash as “Hello!” is nearly impossible.</a>.</p>\n</div>\n\nTable 3. Finding an input with the same hash as “Hello!” is nearly impossible.\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Input</th>\n<th>Hash</th>\n<th>Success?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><div><pre> Hello1!</pre></div></td>\n<td><div><pre> 82642dd9...2e366e64</pre></div></td>\n<td><p><code>Nope</code></p></td>\n</tr>\n<tr>\n<td><div><pre> Hello2!</pre></div></td>\n<td><div><pre> 493cb8b9...83ba14f8</pre></div></td>\n<td><p><code>Nope</code></p></td>\n</tr>\n<tr>\n<td><div><pre> Hello3!</pre></div></td>\n<td><div><pre> 90488e86...64530bae</pre></div></td>\n<td><p><code>Nope</code></p></td>\n</tr>\n<tr>\n<td><div><pre> ...</pre></div></td>\n<td><div><pre> ...</pre></div></td>\n<td><p><code>Nope, nope, …, nope</code></p></td>\n</tr>\n<tr>\n<td><div><pre> Hello9998!</pre></div></td>\n<td><div><pre> cf0bc6de...e6b0caa4</pre></div></td>\n<td><p><code>Nope</code></p></td>\n</tr>\n<tr>\n<td><div><pre> Hello9999!</pre></div></td>\n<td><div><pre> df82680f...ef9bc235</pre></div></td>\n<td><p><code>Nope</code></p></td>\n</tr>\n<tr>\n<td><div><pre> Hello10000!</pre></div></td>\n<td><div><pre> 466a7662...ce77859c</pre></div></td>\n<td><p><code>Nope</code></p></td>\n</tr>\n<tr>\n<td><div><div>\n<p><span><a><img/></a></span></p>\n</div></div></td>\n<td><div><pre> dee6a5d3...db479561</pre></div></td>\n<td><p><code>Nope</code></p></td>\n</tr>\n<tr>\n<td><div><pre> My entire music collection</pre></div></td>\n<td><div><pre> a5bcb2d9...9c143f7a</pre></div></td>\n<td><p><code>Nope</code></p></td>\n</tr>\n</tbody>\n</table>\n<div>\n<div>\n<div>How big is 2<sup>256</sup>?</div>\n<div>\n<p>2<sup>256</sup> is about 10<sup>77</sup>, which is almost the number of atoms in the\nuniverse. Finding a pre-image of a SHA256 hash is like picking an atom\nin the universe and hoping it’s the correct one.</p>\n</div>\n</div>\n</div>\n<div>\n<p>As you can see, we aren’t very successful. Think about how much time\nit would take for a typical desktop computer to find such an input. It\ncan calculate about 60 million hashes per second, and the expected\nnumber of tries needed to find a solution is 2<sup>255</sup>. The result is\n2<sup>255</sup> / (60 × 10<sup>6</sup>) s ≈ 10<sup>68</sup> s ≈ 3 × 10<sup>61</sup> years, or about\n30,000,000,000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000\nyears.</p>\n</div>\n<div>\n<p>I think we can stop trying, don’t you? I don’t think buying a faster\ncomputer will help, either. Even if we had 1 trillion computers and\nran them concurrently, it would take about 3 × 10<sup>49</sup> years.</p>\n</div>\n<div>\n<p>Pre-image resistance, second-pre-image resistance, and collision\nresistance are extremely important in Bitcoin. Most of its security\nrelies on these properties.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Some well-known hash functions</h4>\n<div>\n<div>\n<div>Double SHA256</div>\n<div>\n<p>We most often use double SHA256 in Bitcoin:</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p><a>A few cryptographic hash functions. Some old ones have been deemed insecure.</a> shows several different cryptographic hash functions. Some\naren’t considered cryptographically secure.</p>\n</div>\n\nTable 4. A few cryptographic hash functions. Some old ones have been deemed insecure.\n\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Name</th>\n<th>Bits</th>\n<th>Secure so far?</th>\n<th>Used in Bitcoin?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>SHA256</p></td>\n<td><p>256</p></td>\n<td><p>Yes</p></td>\n<td><p>Yes</p></td>\n</tr>\n<tr>\n<td><p>SHA512</p></td>\n<td><p>512</p></td>\n<td><p>Yes</p></td>\n<td><p>Yes, in some wallets</p></td>\n</tr>\n<tr>\n<td><p>RIPEMD160</p></td>\n<td><p>160</p></td>\n<td><p>Yes</p></td>\n<td><p>Yes</p></td>\n</tr>\n<tr>\n<td><p>SHA-1</p></td>\n<td><p>160</p></td>\n<td><p>No. A collision has been found.</p></td>\n<td><p>No</p></td>\n</tr>\n<tr>\n<td><p>MD5</p></td>\n<td><p>128</p></td>\n<td><p>No. Collisions can be trivially created. The algorithm is also\nvulnerable to pre-image attacks, but not trivially.</p></td>\n<td><p>No</p></td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>Generally, when a single collision has been found in a cryptographic\nhash function, most cryptographers will consider the function\ninsecure.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Recap of cryptographic hashes</h4>\n<div>\n<p>A cryptographic hash function is a computer program that takes any data\nas input and computes a big number—a cryptographic hash—based on that\ninput.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>It’s astronomically hard to find an input that will result in a specific\noutput. This is why we call it a <em>one-way function</em>. You have to\nrepeatedly guess different inputs.</p>\n</div>\n<div>\n<p>We’ll discuss important topics throughout this book. When you’ve learned\nabout a specific topic, like cryptographic hash functions, you can put a\nnew tool into your toolbox for later use. Your first tool is the\ncryptographic hash function, which is represented here by a paper\nshredder; the cryptographic hash is represented by a pile of paper\nstrips.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n<div>\n<p>From now on, we’ll use these tool icons to represent cryptographic\nhash functions and cryptographic hashes, with some exceptions.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Exercises</h4>\n<div>\n<h5><a><svg><path></path></svg></a>Warm up</h5>\n<div>\n<ol>\n<li>\n<p>How many bits is the output of SHA256?</p>\n</li>\n<li>\n<p>How many bytes is the output of SHA256?</p>\n</li>\n<li>\n<p>What’s needed to calculate the cryptographic hash of the text\n“hash me”?</p>\n</li>\n<li>\n<p>What are the decimal and the binary representations of the\nhexadecimal data <code>061a</code>?</p>\n</li>\n<li>\n<p>Can you, in practice, modify the text “cat” so the modified text\ngets the same cryptographic hash as “cat”?</p>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Dig in</h5>\n<div>\n<ol>\n<li>\n<p>The simplistic hash function from\n<a>How does a cryptographic hash function work?</a>, repeated for you as\nfollows, isn’t a <em>cryptographic</em> hash function. Which two of the four\nproperties of a cryptographic hash function is it lacking?</p>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n<div>\n<p>The four properties are also repeated as follows:</p>\n</div>\n<div>\n<ol>\n<li>\n<p>The same input will always produce the same hash.</p>\n</li>\n<li>\n<p>Slightly different inputs will produce very different hashes.</p>\n</li>\n<li>\n<p>The hash is always of the same fixed size. For SHA256, it’s 256 bits.</p>\n</li>\n<li>\n<p>Brute-force trial and error is the only known way to find an input that\ngives a certain hash.</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>Let’s go back to the example where you had a cat picture on your\nhard drive and wrote down the cryptographic hash of the picture on a\npiece of paper. Suppose someone wanted to change the cat picture on your\nhard drive without you noticing. What variant of the fourth property is\nimportant for stopping the attacker from succeeding?</p>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Digital signatures</h3>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>In this section, we explore how you can prove to someone that you\napprove a payment. To do that, we use <em>digital signatures</em>. A digital\nsignature is a digital equivalent of a handwritten signature. The\ndifference is that a handwritten signature is tied to a person, whereas\na digital signature is tied to a random number called a <em>private key</em>.\nA digital signature is much harder to forge than a handwritten\nsignature.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Typical use of digital signatures</h4>\n<div>\n<p>Suppose you want to send your favorite cat picture to your friend Fred\nvia email, but you suspect the picture might be, maliciously or\naccidentally, corrupted during transfer. How would you and Fred make\nsure the picture Fred receives is exactly the same as the one you\nsend?</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 13. You send a digitally signed cat picture to Fred. Fred verifies the signature to make sure he’s got the same cat as the cat you signed.</div>\n</div>\n<div>\n<p>You can include a digital signature of the cat picture in the email.\nFred can then verify this digital signature to make sure the cat\npicture is authentic. You do this in three different phases, as\n<a>You send a digitally signed cat picture to Fred. Fred verifies the signature to make sure he’s got the same cat as the cat you signed.</a> shows.</p>\n</div>\n<div>\n<p>Step 1 is <em>preparation</em>. You create a huge random number: the private\nkey. You can use this to create digital signatures. You then create the\n<em>public key</em>, which is used to verify the signatures the private key\ncreates. The public key is <em>calculated</em> from the private key. You hand\nthe public key to Fred in person so Fred is sure it belongs to you.</p>\n</div>\n<div>\n<p>Step 2 is <em>signing</em>. You write an email to Fred and attach the cat\npicture. You also use your private key and the cat picture to digitally\nsign the cat picture. The result is a digital signature that you include\nin your email message. You then send the email to Fred.</p>\n</div>\n<div>\n<p>Step 3 is <em>verifying</em>. Fred receives your email, but he’s concerned\nthe cat picture might be corrupt, so he wants to verify the signature.\nHe uses the public key he got from you in step 1, the digital signature\nin the email, and the attached cat picture. If the signature or the cat\npicture has changed since you created the signature, the verification\nwill fail.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Improving cookie token security</h4>\n<div>\n<p>It’s time to return to our cookie token spreadsheet. The company is\ngrowing, and Lisa has a hard time recognizing everyone. She notices that\nsome people aren’t honest. For example, Mallory says she is Anne, to\ntrick Lisa into moving cookie tokens from Anne to the cafe, instead of\nfrom Mallory to the cafe. Lisa thinks of requiring everybody to\ndigitally sign their cookie token transfers by writing a message and a\ndigital signature in an email, as <a>John needs to digitally sign his payment request and include the signature in the email.</a> shows.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 14. John needs to digitally sign his payment request and include the signature in the email.</div>\n</div>\n<div>\n<p>Suppose John is the new guy at the office. The company gave him some\ncookie tokens as a welcome gift when he started. Now, John wants to buy\na cookie in the cafe for 10 CT. He needs to digitally sign a cookie\ntoken transfer. <a>The digital signature process. 1. John creates a key pair and gives the public key to Lisa. 2. John signs a message with the private key. 3. Lisa verifies the message is signed with the private key belonging to the public key she got from John.</a> shows what he has to do.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 15. The digital signature process. 1. John creates a key pair and gives the public key to Lisa. 2. John signs a message with the private key. 3. Lisa verifies the message is signed with the private key belonging to the public key she got from John.</div>\n</div>\n<div>\n<p>Just as with the email to Fred in the previous section, there are three\nphases in this process (please compare with the steps in <a>You send a digitally signed cat picture to Fred. Fred verifies the signature to make sure he’s got the same cat as the cat you signed.</a> to\nsee the similarities):</p>\n</div>\n<div>\n<div>\n<div>Key pair reuse</div>\n<div>\n<p>A key pair is created once. The same private key can be used several\ntimes to digitally sign stuff.</p>\n</div>\n</div>\n</div>\n<div>\n<ol>\n<li>\n<p>John prepares by generating a key pair. John keeps the private key\nsecret and hands the public key over to Lisa. This is a one-time setup\nstep.</p>\n</li>\n<li>\n<p>John wants a cookie. He writes a message and signs it with his\nprivate key. He sends the message and the digital signature in an\nemail to Lisa.</p>\n</li>\n<li>\n<p>Lisa verifies the signature of the message using John’s public key\nand updates the spreadsheet.</p>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Preparation: John generates a key pair</h4>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>The signing and verification processes are based on a key pair. John\nneeds a private key to sign payments, and Lisa will need John’s public\nkey to verify John’s signatures. John needs to prepare for this by\ncreating a key pair. He does this by first generating a private key and\nthen calculating the public key from that private key, as <a>John creates a key pair. The private key is a huge random number, and the public key is derived from that random number. John stores his private key on his hard drive, and the public key is handed to Lisa.</a>\nshows.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 16. John creates a key pair. The private key is a huge random number, and the public key is derived from that random number. John stores his private key on his hard drive, and the public key is handed to Lisa.</div>\n</div>\n<div>\n<p>John will use a random number generator to generate a huge, 256-bit\nrandom number. A random number generator is available on almost all\noperating systems. The random number is now John’s private key. The\nprivate key is then transformed into a public key using a public-key\nderivation function.</p>\n</div>\n<div>\n<div>\n<div>\n<p><span><a><img/></a></span></p>\n</div>\n</div>\n</div>\n<div>\n<p>Public-key derivation is a one-way function, just like cryptographic\nhash functions; you can’t derive the private key from the public key.\nThe security of digital signatures relies heavily on this feature. Also,\nrunning the private key through the public-key derivation function\nmultiple times will always result in the same public key.</p>\n</div>\n<div>\n<p>The public key is 33 bytes (66 hex digits) long. This is longer than\nthe private key, which is 32 bytes (64 hex digits) long. The reason\nfor the “extra” byte and how the public-key derivation function works\nis a hard topic, covered in <a>[ch04]</a>. Luckily, you don’t have to be a\ncryptography expert to understand how signatures work from a user’s\nperspective.</p>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Two ways to use the key pair</h5>\n<div>\n<p>Keys are used to encrypt and decrypt data. Encryption is used to make\nmessages unreadable to everybody but those who hold the proper\ndecryption key.</p>\n</div>\n<div>\n<p>We can think of the private and public keys as a pair because they have\na strong relationship: the public key can be used to encrypt messages\nthat only the private key can decrypt, and the private key can encrypt\nmessages that only the public key can decrypt (<a>Encrypting and decrypting with the public and private keys. Left: Encrypt with the public key, and decrypt with the private key. Right: Encrypt with the private key, and decrypt with the public key.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 17. Encrypting and decrypting with the public and private keys. Left: Encrypt with the public key, and decrypt with the private key. Right: Encrypt with the private key, and decrypt with the public key.</div>\n</div>\n<div>\n<div>\n<div>\n<p>We’ll use the right side of <a>Encrypting and decrypting with the public and private keys. Left: Encrypt with the public key, and decrypt with the private key. Right: Encrypt with the private key, and decrypt with the public key.</a> to make digital\nsignatures. We won’t use the left side at all in this book.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Following the left side of <a>Encrypting and decrypting with the public and private keys. Left: Encrypt with the public key, and decrypt with the private key. Right: Encrypt with the private key, and decrypt with the public key.</a>, only John would\nbe able to read the encrypted message because he’s the only one with\naccess to his private key. Bitcoin doesn’t use this feature of public\nand private keys at all. It’s used when two parties want to\ncommunicate in private, as when you do your online banking. When you\nsee the little padlock in the address bar of your web browser, then\nyou know the process shown on the left side of the figure is being\nused to secure your communication.</p>\n</div>\n<div>\n<p>Following the right side of the figure, Lisa can decrypt the message\nbecause she has the public key belonging to John’s private key. This\nfeature is used for digital signatures. Using the private key to\nencrypt secret messages isn’t a good idea because the public key is,\nwell, public. Anyone with the public key can decrypt the\nmessage. Digital signatures, on the other hand, don’t need any secret\nmessages. We’ll explore digital signatures deeper soon. But first,\nsome recap and orientation.</p>\n</div>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Recap of key pairs</h4>\n<div>\n<p>Let’s summarize what you’ve learned about public and private keys. You\ncreate a key pair by first creating a private key. The private key is\na huge, secret random number. The public key is then calculated from\nthe private key.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n<div>\n<p>You can use the private key to encrypt a message that can be decrypted\nonly using the public key.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n<div>\n<p>The encryption and decryption in this figure are the foundation for\ndigital signatures. This process is <em>not</em> suitable for sending secret\nmessages because the public key is usually widely known.</p>\n</div>\n<div>\n<p>The reverse process is also common, in which the public key is used to\nencrypt and the private key is used to decrypt. This process is used\nto send secret messages. Bitcoin doesn’t use it.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Where were we?</h4>\n<div>\n<p>Digital signatures were briefly mentioned in <a>[ch01]</a>, where Alice\nsigned her Bitcoin transaction of 1 BTC to Bob using her private key\n(<a>Digital signatures in Bitcoin</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 18. Digital signatures in Bitcoin</div>\n</div>\n<div>\n<p>John has created a pair of keys and is about to digitally sign his\npayment to the cafe with his private key so Lisa can verify that it’s\nactually John making the payment. Lisa verifies this using John’s\npublic\nkey.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>John signs his payment</h4>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Let’s have a close look at how the signing really happens (<a>John digitally signs the transfer of 10 CT to the cafe. The message to Lisa is first hashed and then encrypted with John’s private key. The email to Lisa contains both the message in cleartext and the signature.</a>).</p>\n</div>\n<div>\n<p>The message John wants to sign is, “Lisa, please move 10CT to Cafe.\n/John”. The signing function will hash this message with SHA256, whose\noutput is a 256-bit number. This hash value is then encrypted with\nJohn’s private key. The result is a digital signature that looks like\nthis:</p>\n</div>\n<div>\n<div>\n<pre>INxAs7oFDr80ywy4bt5uYPIv/09fJMW+04U3sJUfgV39\nA2k8BKzoFRHBXm8AJeQwnroNb7qagg9QMj7Vp2wcl+c=</pre>\n</div>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 19. John digitally signs the transfer of 10 CT to the cafe. The message to Lisa is first hashed and then encrypted with John’s private key. The email to Lisa contains both the message in cleartext and the signature.</div>\n</div>\n<div>\n<div>\n<div>Signatures in Bitcoin</div>\n<div>\n<p>Bitcoin uses this type of signature for most payments today, but it\nisn’t the only way to authenticate a payment.</p>\n</div>\n</div>\n</div>\n<div>\n<p>The signature is an encrypted hash of a message. If John had used\nanother private key to sign with or a slightly different message, the\nsignature would have looked completely different.</p>\n</div>\n<div>\n<p>For example, using the input message “Lisa, please move 10CT to\nMallory.  /John” would generate this signature:</p>\n</div>\n<div>\n<div>\n<pre>ILDtL+AVMmOrcrvCRwnsJUJUtzedNkSoLb7OLRoH2iaD\nG1f2WX1dAOTYkszR1z0TfTVIVwdAlD0W7B2hBTAzFkk=</pre>\n</div>\n</div>\n<div>\n<p>This isn’t remotely similar to the previous signature. This is good\nfor John, because he knows his signature can’t be used for messages\nother than his specific message.</p>\n</div>\n<div>\n<p>John has now composed an email to Lisa. This email contains a message\nand a signature of that message. John finishes by sending the email to\nLisa.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Lisa verifies the signature</h4>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Lisa looks at the email and sees it claims to be from John, so she\nlooks up John in her table of public keys (<a>Lisa uses the message (A), the signature (B), and John’s public key (C) to verify that the message is signed with John’s private key.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 20. Lisa uses the message (A), the signature (B), and John’s public key (C) to verify that the message is signed with John’s private key.</div>\n</div>\n<div>\n<p>Lisa’s actions in this figure aim to determine that the cookie token\ntransfer was signed by the private key it claims to be signed with. The\nmessage <em>says</em> it’s from John. She received John’s public key the other\nday and put that public key in her table of public keys. The things she\nhas at hand are</p>\n</div>\n<div>\n<ol>\n<li>\n<p>The message “Lisa, please move 10CT to Cafe. /John”</p>\n</li>\n<li>\n<p>The signature <code>INxAs7oFDr8…</code></p>\n</li>\n<li>\n<p>John’s public key that she just looked up in her table</p>\n</li>\n</ol>\n</div>\n<div>\n<div>\n<div>A signature is an encrypted hash</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>John encrypted the message’s hash with his <em>private</em> key. This\nencrypted hash is the signature. If Lisa decrypts the signature (B) with\nJohn’s <em>public</em> key (C), the result should be a hash that equals the\nhash of the message (A) in the email.</p>\n</div>\n<div>\n<p>Lisa takes the signature (B) and decrypts it with the public key (C)\nshe looked up in her table of public keys. The decryption outputs a\nbig number. If this number is equal to the hash of the message (A), it\nproves John’s private key was used to sign the message. Lisa takes the\nmessage (A), exactly as written, and hashes that message just like John\ndid when he created the signature. This message hash is then compared\nwith the decrypted signature. The message hash and the decrypted\nsignature match, which means the signature is valid.</p>\n</div>\n<div>\n<p>Note that this process works only if John and Lisa use the exact same\ndigital signature scheme. This must be agreed on beforehand, but it’s\nusually standardized. In Bitcoin, everyone knows exactly what digital\nsignature scheme to use.</p>\n</div>\n<div>\n<p>Lisa can now be sure no one is trying to fool her. She updates the\nspreadsheet with John’s transfer, as shown in <a>Lisa has added a row for John’s cookie token transfer after verifying the signature of John’s message.</a>.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 21. Lisa has added a row for John’s cookie token transfer after verifying the signature of John’s message.</div>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Private key security</h4>\n<div>\n<p>John is in control of his cookie tokens because he owns the private key.\nNo one but John can use John’s cookie tokens because he’s the only one\nwith access to his private key. If his private key is stolen, he can\nlose any and all of his cookie tokens.</p>\n</div>\n<div>\n<p>The morning after John’s transfer, he comes to the office, takes his\nlaptop from his desk, and goes straight to the cafe to buy two morning\ncookies. He opens his laptop to write an email to Lisa:</p>\n</div>\n<div>\n<div>\n<pre>Good morning Lisa! Please move 20 CT to Cafe. /John\nSignature:\nH1CdE34cRuJDsHo5VnpvKqllC5JrMJ1jWcUjL2VjPbsj\nX6pi/up07q/gWxStb1biGU2fjcKpT4DIxlNd2da9x0o=</pre>\n</div>\n</div>\n<div>\n<p>He sends this email containing the message and a signature to Lisa. But\nthe cafe doesn’t hand him any cookies. The guy behind the desk says he\nhasn’t seen an incoming payment of 20 CT yet. Lisa usually verifies and\nexecutes transfers quickly.</p>\n</div>\n<div>\n<p>John opens the spreadsheet—he has read-only access, remember—and\nsearches for “John.” <a>Someone stole money from John. Who is Melissa, and how was this possible? John didn’t sign any such transfer.</a> shows what he sees.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 22. Someone stole money from John. Who is Melissa, and how was this possible? John didn’t sign any such transfer.</div>\n</div>\n<div>\n<p>John steps into Lisa’s office, asking for an explanation. She answers\nthat she got a message signed with John’s private key, asking her to\nsend money to a new coworker, Melissa. Lisa even shows him the message\nand signature. Of course, there is no Melissa at the office, even though\nseveral new employees have started at the company. Lisa doesn’t care\nabout names anymore, only public keys and signatures. But she needs the\nname to look up the correct public key in the table.</p>\n</div>\n<div>\n<p>The explanation to all this is that Mallory has</p>\n</div>\n<div>\n<ol>\n<li>\n<p>Managed to copy John’s private key. John’s laptop has been on his desk\nall night long. Anyone could have taken the hard drive out of the laptop\nto search for his private key.</p>\n</li>\n<li>\n<p>Created a new key pair and sent the new public key to Lisa, with the\nfollowing message:</p>\n<div>\n<div>\n<pre>Hi Lisa. My name is Melissa, and I’m new here.\nMy public key is\n02c5d2dd24ad71f89bfd99b9c2132f796fa746596a06f5a33c53c9d762e37d9008</pre>\n</div>\n</div>\n</li>\n<li>\n<p>Sent a fraudulent message, signed with the stolen private key, to Lisa\nas follows:</p>\n<div>\n<div>\n<pre>Hi Lisa, please move 90 CT to Melissa. Thanks, John\nSignature:\nIPSq8z0IyCVZNZNMIgrOz5CNRRtRO+A8Tc3j9og4pWbA\nH/zT22dQEhSaFSwOXNp0lOyE34d1+4e30R86qzEbJIw=</pre>\n</div>\n</div>\n</li>\n</ol>\n</div>\n<div>\n<p>Lisa verified the transfer in step 3, concluded it was valid, and\nexecuted the transfer. John asks Lisa to revert the—according to\nhim—fraudulent transfer. But Lisa refuses to do so. She thinks the\ntransfer is perfectly valid. If John let someone see his private key,\nthat’s his problem, not Lisa’s. That’s part of why she’s so trusted in\nthe company—she keeps her promises.</p>\n</div>\n<div>\n<p>John creates a new key pair and asks Lisa to add his new public key\nunder the name John2. How can John secure his new private key and still\nhave it readily available when he wants a cookie? John is pretty sure he\nwon’t have more than 1,000 cookie tokens on that key.</p>\n</div>\n<div>\n<div>\n<div>You are responsible</div>\n<div>\n<p>You have full responsibility for the security of your private keys.</p>\n</div>\n</div>\n</div>\n<div>\n<p>The security of the spreadsheet has shifted from a system in which Lisa\nknows everyone’s face to one in which she knows everyone’s public key.\nIn a sense, the security could be worse now, because it might be easier\nfor Mallory to steal John’s private key than it is for her to trick Lisa\ninto thinking Mallory is John. This depends on how John protects his\nprivate key. An important thing to note is that the security of John’s\nprivate key is totally up to him. No one will be able to restore John’s\nprivate key if he loses it. And Lisa sure isn’t going to reverse\n“fraudulent” transfers just because John is sloppy with security.</p>\n</div>\n<div>\n<p>If John stores his private key in cleartext in a shared folder on the\ncompany’s intranet, anyone can easily copy it and use it to steal his\ncookie tokens. But if John stores the private key in an encrypted file,\nprotected by a strong password, on his own laptop’s hard drive, getting\na copy of his key is a lot harder. An attacker would have to</p>\n</div>\n<div>\n<ol>\n<li>\n<p>Get access to John’s hard drive</p>\n</li>\n<li>\n<p>Know John’s password</p>\n</li>\n</ol>\n</div>\n<div>\n<p>If John never has more than 50 CT on his private key, he might not be\nthat concerned with security. But the cafe, which manages about 10,000\nCT daily, might be concerned. John and the cafe probably need different\nstrategies for storing their private keys.</p>\n</div>\n<div>\n<p>A trade-off exists between security and convenience. You can, for\nexample, keep your private key encrypted on an offline laptop in a bank\nsafe-deposit box. When you want to buy a cookie, you’ll need to go to\nthe bank, take the laptop out of your safe-deposit box, decrypt the\nprivate key with your password, and use it to digitally sign a message\nto Lisa that you save to a USB stick. Then, you’ll have to put the\nlaptop back into the safe-deposit box, bring the USB stick back to the\noffice, and send the email to Lisa. The private key never leaves<br/>\nthe laptop in the safe-deposit box. Very secure, and very inconvenient.</p>\n</div>\n<div>\n<p>On the other hand, you can store your private key in cleartext on your\nmobile phone. You’ll have the key at your fingertips and can sign a\nmessage within seconds of when the urge for a cookie starts to nudge\nyou. Very insecure, and very convenient.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 23. Security considerations against attackers. Note how the more secure options are also more inconvenient.</div>\n</div>\n<div>\n<p>Some of the different trade-offs, as illustrated in <a>Security considerations against attackers. Note how the more secure options are also more inconvenient.</a>, are\nas follows:</p>\n</div>\n<div>\n<dl>\n<dt>Online vs. offline</dt>\n<dd>\n<p>Online means the private key is stored on a\ndevice with network access, like your mobile phone or general-purpose\nlaptop. Offline means the private key is stored on a piece of paper or\na computer without any network access. Online storage is risky because\nremote security exploits or malicious software on your computer, such\nas computer viruses, might send the private key to someone without you\nnoticing. If the device is offline, no one can take the private key\nwithout physical access to the device.</p>\n</dd>\n<dt>Cleartext vs. encrypted</dt>\n<dd>\n<p>If the private key is stored in cleartext in\na file on your computer’s hard drive, anyone with access to your\ncomputer, either remotely over a computer network or physically, can\ncopy the private key. This includes any viruses your computer might be\nvictim to. You can avoid many of these attacks by encrypting your\nprivate key with a password that only you know. An attacker would then\nneed access to both your hard drive and your secret password to get\nthe private key.</p>\n</dd>\n<dt>Whole key vs. split key</dt>\n<dd>\n<p>People usually store their entire private\nkey on a single computer. This is convenient—you need only one\ncomputer to spend your cookie tokens. An attacker must get access to\nyour hard drive to steal the private key. But if your private key is\nsplit into three parts (there are good and bad schemes for this—be\ncareful), and you store the three parts separately on three different\ncomputers, then the attacker must get access to the hard drives of\nthree computers. This is much harder because they must know what three\ncomputers to attack and also successfully attack them. Making a\npayment in this setup is a real hassle, but very secure.</p>\n</dd>\n</dl>\n</div>\n<div>\n<p>You can use any combination of these methods to store your keys. But\nas a rule of thumb, the greater the security against attackers, the\ngreater the risk of you accidentally losing access to your key. For\nexample, if you store the private key encrypted on your hard drive,\nyou risk losing your key due to both computer failure and forgetting\nyour password. In this sense, the more securely you store your key,\nthe less secure it is.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Recap</h3>\n<div>\n<p>Lisa has solved the problem with people claiming to be someone else when\nthey make a payment. She requires all payers to digitally sign the\ncookie token transfers. Every spreadsheet user needs a private key and a\npublic key. Lisa keeps track of who owns which public key. From now on,\na payment must be written in an email to Lisa, and the message must be\ndigitally signed with the person’s private key. Lisa can then verify the\nsignature to make sure she isn’t being fooled. The gist is that as long\nas John keeps his private key to himself, no one will be able to spend\nhis money.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n<div>\n<p>We need to add “Email to Lisa” to our concept table (<a>Adding “Email to Lisa” as a key concept</a>).</p>\n</div>\n\nTable 5. Adding “Email to Lisa” as a key concept\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Cookie Tokens</th>\n<th>Bitcoin</th>\n<th>Covered in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>1 cookie token</p></td>\n<td><p>1 bitcoin</p></td>\n<td><p><a>Cryptographic hash functions and digital signatures</a></p></td>\n</tr>\n<tr>\n<td><p>The spreadsheet</p></td>\n<td><p>The blockchain</p></td>\n<td><p><a>[ch06]</a></p></td>\n</tr>\n<tr>\n<td><p><strong>Email to Lisa</strong></p></td>\n<td><p><strong>A transaction</strong></p></td>\n<td><p><strong><a>[ch05]</a></strong></p></td>\n</tr>\n<tr>\n<td><p>A row in the spreadsheet</p></td>\n<td><p>A transaction</p></td>\n<td><p><a>[ch05]</a></p></td>\n</tr>\n<tr>\n<td><p>Lisa</p></td>\n<td><p>A miner</p></td>\n<td><p><a>[ch07]</a></p></td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>The email to Lisa will be replaced by transactions in <a>[ch05]</a>.\nTransactions will replace both the email to Lisa and the row in the\nspreadsheet. It’s time to release version 2.0 of the cookie token\nspreadsheet system (<a>Release notes, cookie tokens 2.0</a>).</p>\n</div>\n\nTable 6. Release notes, cookie tokens 2.0\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Version</th>\n<th>Feature</th>\n<th>How</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p><span><a><img/></a></span>2.0</p></td>\n<td><p>Secure payments</p></td>\n<td><p>Digital signatures solve the problem with imposters.</p></td>\n</tr>\n<tr>\n<td><p>1.0</p></td>\n<td><p>Simple payment system</p></td>\n<td><p>Relies on Lisa being trustworthy and knowing everyone’s face</p></td>\n</tr>\n<tr>\n<td><p>Finite money supply</p></td>\n<td><p>7,200 new CT rewarded to Lisa daily; halves every four years</p></td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>Everybody still trusts Lisa to not change the spreadsheet in any way\nexcept when executing signed cookie token transfers. If Lisa wanted\nto, she could steal anyone’s cookie tokens just by adding a transfer\nto the spreadsheet. But she wouldn’t do that—or would she?</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>You now have a lot of new tools to put in your toolbox for later use:\nkey-pair generation, digital signing, the signature, and the\nverification.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Exercises</h3>\n<div>\n<h4><a><svg><path></path></svg></a>Warm up</h4>\n<div>\n<ol>\n<li>\n<p>Lisa is currently rewarded 7,200 CT per day for her work. Why won’t\nthe supply increase infinitely over time? Why don’t we have 7,200 ×\n10,000 = 72 million CT after 10,000 days?</p>\n</li>\n<li>\n<p>How can coworkers detect if Lisa rewards herself too much or too\noften?</p>\n</li>\n<li>\n<p>How is the private key of a key pair created?</p>\n</li>\n<li>\n<p>What key is used to digitally sign a message?</p>\n</li>\n<li>\n<p>The signing process hashes the message to sign. Why?</p>\n</li>\n<li>\n<p>What would Mallory need to steal cookie tokens from John?</p>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Dig in</h4>\n<div>\n<ol>\n<li>\n<p>Suppose you have a private key and you’ve given your public key to a\nfriend, Fred. Suggest how Fred can send you a secret message that only\nyou can understand.</p>\n</li>\n<li>\n<p>Suppose you (let’s pretend your name is Laura) and Fred still have\nthe keys from the previous exercise. Now you want to send a message in\na bottle to Fred saying,</p>\n<div>\n<div>\n<pre>Hi Fred! Can we meet at Tiffany’s at sunset tomorrow? /Laura</pre>\n</div>\n</div>\n<div>\n<p>Explain how you would sign the message so Fred can be sure the message\nis actually from you. Explain what steps you and Fred take in the\nprocess.</p>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Summary</h3>\n<div>\n<ul>\n<li>\n<p>Bitcoins are created as rewards to nodes securing the blockchain.</p>\n</li>\n<li>\n<p>The reward halves every four years to limit the money supply.</p>\n</li>\n<li>\n<p>You can use cryptographic hash functions to detect changes in a file\nor in a message.</p>\n</li>\n<li>\n<p>You can’t make up a pre-image of a cryptographic hash. A pre-image\nis an input that has a certain known output.</p>\n</li>\n<li>\n<p>Digital signatures are useful to prove a payment’s\nauthenticity. Only the rightful owner of bitcoins may spend them.</p>\n</li>\n<li>\n<p>Someone verifying a digital signature doesn’t have to know <em>who</em>\nmade the signature. They just have to know the signature was made with\nthe private key the signature claims to be signed with.</p>\n</li>\n<li>\n<p>To receive bitcoins or cookie tokens, you need a public key. First,\nyou create a private key for yourself in private. You then derive your\npublic key from your private key.</p>\n</li>\n<li>\n<p>Several strategies are available for storing private keys, ranging\nfrom unencrypted on your mobile phone to split and encrypted across\nseveral offline devices.</p>\n</li>\n<li>\n<p>As a general rule of thumb, the more secure the private key is\nagainst theft, the easier it is to accidentally lose the key, and vice\nversa.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div></article>', 'body': '\nCryptographic hash functions and digital signatures\n\n\nThis chapter covers\n\n\n\n\nCreating a simple money system: cookie tokens\n\n\nUnderstanding cryptographic hash functions\n\n\nAuthenticating payments using digital signatures\n\n\nKeeping your secrets secret\n\n\n\n\nI’ll start this chapter by setting the stage for the rest of this\nbook.  We’ll look at a simple payment system that we can improve on\nusing Bitcoin technologies. By the time we get to [ch08], this\nsimple system will have evolved into what we call Bitcoin.\n\n\nThe second part of this chapter will teach you what you need to know\nabout cryptographic hash functions. These are so important to Bitcoin\nthat you really need to understand them before learning anything else.\nYou’ll see how a cryptographic hash function can be used to verify\nthat a file hasn’t changed since a previous point in time.\n\n\nThe rest of the chapter will solve the problem of the imposter: a\nbad guy claiming to be someone else to pay money from that someone’s\naccount. We solve this problem by introducing digital signatures\n(Digital signatures in Bitcoin) into the simple system.\n\n\n\n\n\nFigure 1. Digital signatures in Bitcoin\n\n\nThe cookie token spreadsheet\n\nSuppose there’s a cafe in the office where you work. You and your\ncoworkers use a spreadsheet to keep track of cookie tokens\n(The cookie token spreadsheet has a column for the sender, a column for the recipient, and a column for the number of cookie tokens transferred. New cookie token transfers are appended at the end of the spreadsheet.), which use the symbol CT. You can exchange cookie tokens\nfor cookies in the cafe.\n\n\n\nBitcoin, the currency\n\nA cookie token corresponds to a bitcoin, the currency unit of\nBitcoin. Bitcoin got its first price point 2010 when someone bought\ntwo pizzas for 10,000 BTC. That money would get you 6,000,000 pizzas\nas of November 2018.\n\n\n\n\n\n\n\nFigure 2. The cookie token spreadsheet has a column for the sender, a column for the recipient, and a column for the number of cookie tokens transferred. New cookie token transfers are appended at the end of the spreadsheet.\n\n\nLisa stores this spreadsheet on her computer. It’s shared read-only\nfor everybody on the office network to open and watch, except\nLisa. Lisa is very trustworthy. Everybody trusts her. She has full\naccess to do whatever she likes with the spreadsheet. You and all the\nothers can only view the spreadsheet by opening it in read-only mode.\n\n\nWhenever Alice wants a cookie, she asks Lisa, who sits right next to\nthe cafe, to transfer 10 CT from Alice to the cafe. Lisa knows who\nAlice is and can verify in the spreadsheet that she owns enough cookie\ntokens; she’ll search for “Alice” in the spreadsheet, sum all the\namounts with Alice’s name in the To column, and subtract all the\namounts with Alice’s name in the From column. Lisa calculates Alice’s balance. The sum of her received cookie tokens is 100, and the sum of her withdrawn cookie tokens is 30. Alice’s balance is 70 CT. shows the\ncomplete search result; three transfers involve Alice.\n\n\n\n\n\nFigure 3. Lisa calculates Alice’s balance. The sum of her received cookie tokens is 100, and the sum of her withdrawn cookie tokens is 30. Alice’s balance is 70 CT.\n\n\nLisa calculates that Alice has 70 CT, enough for Alice to pay 10 CT to\nthe cafe. She appends a row at the end of the spreadsheet (Lisa adds Alice’s payment for a cookie. The payment is appended last in the cookie token spreadsheet.).\n\n\n\n\n\nFigure 4. Lisa adds Alice’s payment for a cookie. The payment is appended last in the cookie token spreadsheet.\n\n\nThe cafe sees this new row in the spreadsheet and hands a cookie over to\nAlice.\n\n\n\nEarn them\n\nYou can also get cookie tokens as part of your salary.\n\n\n\n\nWhen you run out of cookie tokens, you can buy tokens for dollars from\nsomeone who is willing to sell you some—possibly Anne or the cafe—at a\nprice you both agree on. Lisa will then add a row to the spreadsheet\naccordingly.\n\n\nLisa has promised never to remove or change anything in the\nspreadsheet, just add to it. What happens in the spreadsheet, stays in\nthe spreadsheet!\n\n\nLisa, who is performing valuable work to secure this money system, is\nrewarded with 7,200 newly minted cookie tokens per day (Lisa is rewarded with cookie tokens.).\nEvery day, she adds a new row to the spreadsheet that creates 7,200\nnew cookie tokens with Lisa as the recipient.\n\n\n\n\n\nFigure 5. Lisa is rewarded with cookie tokens.\n\n\n\nMoney supply curve\n\nBitcoin uses the same schedule for issuance as the cookie token\nspreadsheet. All new bitcoins are created as rewards to the nodes\nsecuring the Bitcoin ledger—the blockchain—just as Lisa is rewarded\nfor securing the cookie token spreadsheet.\n\n\n\n\n\n\n\n\n\nThis is how all the cookie tokens in the spreadsheet are created. The\nfirst row in the spreadsheet is a reward row—like the one in the\nspreadsheet just shown—that creates the very first 7,200 CT ever. The\nplan is that Lisa is rewarded with 7,200 CT per day during the first\nfour years, and then the reward is halved to 3,600 CT/day for the next\nfour years, and so on until the reward is 0 CT/day.\n\n\nDon’t worry, for now, about what happens when the reward approaches\n0—that’s far in the future. We’ll discuss that in [ch07]. This reward\nhalving makes the total money supply—the total number of cookie tokens\nin circulation—approach 21 million CT, but it will never exceed 21\nmillion.\n\n\nWhat Lisa does with the new cookie tokens she earns is up to her. She\ncan buy cookies or sell the cookie tokens. She can also save them for\nlater. The spreadsheet system works well, and everybody eats a healthy\nnumber of cookies.\n\n\nLisa basically performs the same work as miners in the Bitcoin network.\nShe verifies payments and updates the ledger, the cookie token\nspreadsheet. How key ingredients of the cookie token system and the Bitcoin system relate clarifies how the concepts in the spreadsheet\ncorrespond to concepts in Bitcoin.\n\n\nTable 1. How key ingredients of the cookie token system and the Bitcoin system relate\n\n\n\n\n\n\n\nCookie tokens\nBitcoin\nCovered in\n\n\n\n\n1 cookie token\n1 bitcoin\nCryptographic hash functions and digital signatures\n\n\nThe spreadsheet\nThe blockchain\n[ch06]\n\n\nA row in the spreadsheet\nA transaction\n[ch05]\n\n\nLisa\nA miner\n[ch07]\n\n\n\n\nThis table will follow us throughout the book. It describes differences\nbetween the cookie token system and Bitcoin. I’ll delete rows from it as\nI introduce various Bitcoin stuff. For example, the row “The\nspreadsheet” will be deleted in [ch06], when we use a blockchain to\nstore transactions. I’ll also add a few rows as I introduce new concepts\nfor the cookie token system that differ from those in Bitcoin.\n\n\nAt the end of [ch08], this table will contain only the first row,\nmapping 1 cookie token to 1 bitcoin. This will mark the end of this\ncookie token example, and from that point, we’ll talk only about Bitcoin\nitself.\n\n\nRelease notes, cookie tokens 1.0 is your starting point for learning how Bitcoin works, which\nwe can call version 1.0 of the cookie token spreadsheet system.\n\n\nTable 2. Release notes, cookie tokens 1.0\n\n\n\n\n\n\n\nVersion\nFeature\nHow\n\n\n\n\n1.0\nSimple payment system\nRelies on Lisa being trustworthy and knowing everyone’s face\n\n\nFinite money supply\n7,200 new CT rewarded to Lisa daily; halves every four years\n\n\n\n\nWe’ll add a lot of fancy stuff to this system and release a new version\nin every chapter. For example, at the end of this chapter, we’ll release\nversion 2.0, which uses digital signatures to solve the problem of\nimposters. Every chapter will take us closer to the end result: Bitcoin.\nBut please be aware that this isn’t at all how Bitcoin evolved in\nreality—I’m just using this made-up system to help explain each\nimportant topic in isolation.\n\n\n\nCryptographic hashes\n\nCryptographic hashes are used everywhere in Bitcoin. Trying to learn\nBitcoin without knowing what cryptographic hashes are is like trying to\nlearn chemistry without knowing what an atom is.\n\n\nYou can think of a cryptographic hash as a fingerprint. A person will\nproduce the same fingerprint of her left thumb every time it’s taken,\nbut it’s extremely hard to find another person with the same left thumb\nfingerprint. The fingerprint doesn’t disclose any information about the\nperson other than that particular fingerprint. You can’t know what math\nskills or eye color the person has by looking at this fingerprint.\n\n\nDigital information also has fingerprints. This fingerprint is called a\ncryptographic hash. To create a cryptographic hash of a file, you\nsend the file into a computer program called a cryptographic hash\nfunction. Suppose you want to create a cryptographic hash—a\nfingerprint—of your favorite cat picture. Creating a cryptographic hash of a cat picture. Input is the cat picture and output is a big number of 32 bytes. illustrates this\nprocess.\n\n\n\n\n\nFigure 6. Creating a cryptographic hash of a cat picture. Input is the cat picture and output is a big number of 32 bytes.\n\n\n\nBits? Bytes? Hex?\n\nA bit is the smallest unit of information in a computer. It can take\neither of two different values: 0 or 1. Like a lightbulb, it can be\neither on or off. A byte is 8 bits that together can take 256\ndifferent values. We often use hexadecimal, or hex, encoding\nwhen we display numbers in this book. Each byte is printed as two hex\ndigits each in the range 0–f, where a = 10 and f = 15.\n\n\n\n\n\n\n\n\n\nThe output—the hash—is a 256-bit number; 256 bits equals 32 bytes\nbecause 1 byte consists of 8 bits. Thus, to store the number in a file,\nthe file will be 32 bytes big, which is tiny compared to the size of the\n1.21 MB cat picture. The particular cryptographic hash function used in\nthis example is called SHA256 (Secure Hash Algorithm with 256-bit\noutput) and is the most commonly used one in Bitcoin.\n\n\nThe word hash means something that’s chopped into small pieces or\nmixed up. That’s a good description of what a cryptographic hash\nfunction does. It takes the cat picture and performs a mathematical\ncalculation on it. Out comes a big number—the cryptographic hash—that\ndoesn’t look remotely like a cat. You can’t “reconstruct” the cat\npicture from just the hash—a cryptographic hash function is a one-way\nfunction. Hashing a modified cat picture. Can you spot the difference? The cryptographic hash function certainly did. shows what happens when you change the cat\npicture a little and run it through the same cryptographic hash\nfunction.\n\n\n\n\n\nFigure 7. Hashing a modified cat picture. Can you spot the difference? The cryptographic hash function certainly did.\n\n\nThis hash turns out completely different than the first hash. Let’s\ncompare them:\n\n\n\nOld hash: dee6a5d375827436ee4b47a930160457901dce84ff0fac58bf79ab0edb479561\nNew hash: d2ca4f53c825730186db9ea585075f96cd6df1bfd4fb7c687a23b912b2b39bf6\n\n\n\nSee how that tiny change to the cat picture made a huge difference in\nthe hash value? The hash value is completely different, but the length\nof the hash is always the same regardless of input. The input “Hello”\nwill also result in a 256-bit hash value.\n\n\nWhy are cryptographic hash functions useful?\n\nCryptographic hash functions can be used as an integrity check to detect\nchanges in data. Suppose you want to store your favorite cat picture on\nyour laptop’s hard drive, but you suspect the stored picture might\nbecome corrupted. This could happen, for example, due to disk errors or\nhackers. How can you make sure you detect corruption?\n\n\nFirst, you calculate a cryptographic hash of the cat picture on your\nhard drive and write it down on a piece of paper (Save a hash of the cat picture on a piece of paper).\n\n\n\n\n\nFigure 8. Save a hash of the cat picture on a piece of paper\n\n\nLater, when you want to look at the picture, you can check if it’s\nchanged since you wrote the hash on that paper. Calculate the\ncryptographic hash of the cat picture again, and compare it to the\noriginal hash on your paper (Check the integrity of the cat picture. You detect a change.).\n\n\n\n\n\nFigure 9. Check the integrity of the cat picture. You detect a change.\n\n\n\nHow sure?\n\nThere’s a tiny chance the cat picture has changed even though the\nhashes match. But as you’ll see later, that chance is so small, you\ncan ignore it.\n\n\n\n\nIf the new hash matches the one on paper, you can be sure the picture\nhasn’t changed. On the other hand, if the hashes don’t match, the cat\npicture has definitely changed.\n\n\nBitcoin uses cryptographic hash functions a lot to verify that data\nhasn’t changed. For example, every now and then—on average, every 10\nminutes—a new hash of the entire payment history is created. If someone\ntries to change the data, anyone verifying the hash of the modified data\nwill notice.\n\n\n\nHow does a cryptographic hash function work?\n\nThe real answer is complex, so I won’t go into exact detail. But to\nhelp you understand the operation of a cryptographic hash function,\nwe’ll create a very simplistic one. Well, it isn’t really\ncryptographic, as I’ll explain later. Let’s just call it a hash\nfunction for now.\n\n\n\nModulo\n\nModulo means to wrap around when a calculation reaches a certain\nvalue. For example:\n\n\n\n0   mod 256 = 0\n255 mod 256 = 255\n256 mod 256 = 0\n257 mod 256 = 1\n258 mod 256 = 2\n\n\n\n258 mod 256 is the remainder of the integer division 258/256: 258 = 1\n× 256 + 2. The remainder is 2.\n\n\n\n\nSuppose you want to hash a file containing the six bytes a1 02 12 6b\nc6 7d. You want the hash to be a 1-byte number (8 bits). You can\nconstruct a hash function using addition modulo 256, which means\nto wrap around to 0 when the result of an addition reaches 256\n(Simplistic hash function using byte-wise addition modulo 256).\n\n\n\n\n\nFigure 10. Simplistic hash function using byte-wise addition modulo 256\n\n\nThe result is the decimal number 99. What does 99 say about the original\ninput a1 02 12 6b c6 7d? Not much—99 looks just as random as any other\nsingle-byte number.\n\n\nIf you change the input, the hash will change, although a chance exists\nthat the hash will remain 99. After all, this simple hash function has\njust 256 different possible outputs. With real cryptographic hash\nfunctions, like the one we used to hash the cat picture, this chance is\nunimaginably small. You’ll soon get a glimpse of this probability.\n\n\n\nProperties of a cryptographic hash function\n\nA cryptographic hash function takes any digital input data, called a\npre-image, and produces a fixed-length output, called a hash. In\nthe example with the cat picture on your hard drive, the pre-image is\nthe cat picture of 1.21 MB, and the hash is a 256-bit number. The\nfunction will output the exact same hash each time the same pre-image is\nused. But it will, with extremely high probability, output a totally\ndifferent hash when even the slightest variation of that pre-image is\nused. The hash is also commonly referred to as a digest.\n\n\nLet’s look at what properties you can expect from a cryptographic hash\nfunction. I’ll illustrate using SHA256 because it’s the one Bitcoin uses\nmost. Several cryptographic hash functions are available, but they all\nprovide the same basic properties:\n\n\n\n\nThe same input will always produce the same hash.\n\n\nSlightly different inputs will produce very different hashes.\n\n\nThe hash is always of the same fixed size. For SHA256, it’s 256 bits.\n\n\nBrute-force trial and error is the only known way to find an input\nthat gives a certain hash.\n\n\n\n\n\n\n\nFigure 11. A cryptographic hash function, SHA256, in action. The input “Hello!” will give you the same output every time, but the slightly modified input “Hello” will give you totally different output.\n\n\nA cryptographic hash function, SHA256, in action. The input “Hello!” will give you the same output every time, but the slightly modified input “Hello” will give you totally different output. illustrates the first three properties. The fourth property\nof a cryptographic hash function is what makes it a cryptographic hash\nfunction, and this needs a bit more elaboration. There are some\nvariations to the fourth property, all of which are desirable for\ncryptographic hash functions (Different desirable properties for cryptographic hash functions. For collision resistance, X can be anything, as long as the two different inputs give the same output X.):\n\n\n\nCollision resistance\n\nYou have only the cryptographic hash function\nat hand. It’s hard to find two different inputs that result in the\nsame hash.\n\nPre-image resistance\n\nYou have the hash function and a hash. It’s\nhard to find a pre-image of that hash.\n\nSecond-pre-image resistance\n\nYou have the hash function and a\npre-image (and thus the hash of that pre-image). It’s hard to find\nanother pre-image with the same hash.\n\n\n\n\n\n\n\nFigure 12. Different desirable properties for cryptographic hash functions. For collision resistance, X can be anything, as long as the two different inputs give the same output X.\n\n\n\nIllustration of “hard”\n\nThe term hard in this context means astronomically hard. It’s silly to\neven try. We’ll look at second-pre-image resistance as an example of\nwhat hard means, but a similar example can be made for any of the\nthree variants.\n\n\n\n\n\n\n\n\n\n\n\nSuppose you want to find an input to SHA256 that results in the same hash\nas “Hello!”:\n\n\n\n334d016f755cd6dc58c53a86e183882f8ec14f52fb05345887c8a5edd42c87b7\n\n\n\nYou can’t change the input “Hello!” just a little so the function “won’t\nnotice.” It will notice and will output a totally different hash. The\nonly way to find an input other than “Hello!” that gives the hash\n334d016f…\u200bd42c87b7 is to try different inputs one by one and check\nwhether one produces the desired hash.\n\n\nLet’s try, using Finding an input with the same hash as “Hello!” is nearly impossible..\n\n\nTable 3. Finding an input with the same hash as “Hello!” is nearly impossible.\n\n\n\n\n\n\n\nInput\nHash\nSuccess?\n\n\n\n\n Hello1!\n 82642dd9...2e366e64\nNope\n\n\n Hello2!\n 493cb8b9...83ba14f8\nNope\n\n\n Hello3!\n 90488e86...64530bae\nNope\n\n\n ...\n ...\nNope, nope, …, nope\n\n\n Hello9998!\n cf0bc6de...e6b0caa4\nNope\n\n\n Hello9999!\n df82680f...ef9bc235\nNope\n\n\n Hello10000!\n 466a7662...ce77859c\nNope\n\n\n\n\n\n dee6a5d3...db479561\nNope\n\n\n My entire music collection\n a5bcb2d9...9c143f7a\nNope\n\n\n\n\n\nHow big is 2256?\n\n2256 is about 1077, which is almost the number of atoms in the\nuniverse. Finding a pre-image of a SHA256 hash is like picking an atom\nin the universe and hoping it’s the correct one.\n\n\n\n\nAs you can see, we aren’t very successful. Think about how much time\nit would take for a typical desktop computer to find such an input. It\ncan calculate about 60 million hashes per second, and the expected\nnumber of tries needed to find a solution is 2255. The result is\n2255 / (60 × 106) s ≈ 1068 s ≈ 3 × 1061 years, or about\n30,000,000,000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000,\u200b000\nyears.\n\n\nI think we can stop trying, don’t you? I don’t think buying a faster\ncomputer will help, either. Even if we had 1 trillion computers and\nran them concurrently, it would take about 3 × 1049 years.\n\n\nPre-image resistance, second-pre-image resistance, and collision\nresistance are extremely important in Bitcoin. Most of its security\nrelies on these properties.\n\n\n\nSome well-known hash functions\n\n\nDouble SHA256\n\nWe most often use double SHA256 in Bitcoin:\n\n\n\n\n\n\n\n\n\nA few cryptographic hash functions. Some old ones have been deemed insecure. shows several different cryptographic hash functions. Some\naren’t considered cryptographically secure.\n\n\nTable 4. A few cryptographic hash functions. Some old ones have been deemed insecure.\n\n\n\n\n\n\n\n\nName\nBits\nSecure so far?\nUsed in Bitcoin?\n\n\n\n\nSHA256\n256\nYes\nYes\n\n\nSHA512\n512\nYes\nYes, in some wallets\n\n\nRIPEMD160\n160\nYes\nYes\n\n\nSHA-1\n160\nNo. A collision has been found.\nNo\n\n\nMD5\n128\nNo. Collisions can be trivially created. The algorithm is also\nvulnerable to pre-image attacks, but not trivially.\nNo\n\n\n\n\nGenerally, when a single collision has been found in a cryptographic\nhash function, most cryptographers will consider the function\ninsecure.\n\n\n\nRecap of cryptographic hashes\n\nA cryptographic hash function is a computer program that takes any data\nas input and computes a big number—a cryptographic hash—based on that\ninput.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt’s astronomically hard to find an input that will result in a specific\noutput. This is why we call it a one-way function. You have to\nrepeatedly guess different inputs.\n\n\nWe’ll discuss important topics throughout this book. When you’ve learned\nabout a specific topic, like cryptographic hash functions, you can put a\nnew tool into your toolbox for later use. Your first tool is the\ncryptographic hash function, which is represented here by a paper\nshredder; the cryptographic hash is represented by a pile of paper\nstrips.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom now on, we’ll use these tool icons to represent cryptographic\nhash functions and cryptographic hashes, with some exceptions.\n\n\n\nExercises\n\nWarm up\n\n\n\nHow many bits is the output of SHA256?\n\n\nHow many bytes is the output of SHA256?\n\n\nWhat’s needed to calculate the cryptographic hash of the text\n“hash me”?\n\n\nWhat are the decimal and the binary representations of the\nhexadecimal data 061a?\n\n\nCan you, in practice, modify the text “cat” so the modified text\ngets the same cryptographic hash as “cat”?\n\n\n\n\n\nDig in\n\n\n\nThe simplistic hash function from\nHow does a cryptographic hash function work?, repeated for you as\nfollows, isn’t a cryptographic hash function. Which two of the four\nproperties of a cryptographic hash function is it lacking?\n\n\n\n\n\n\nThe four properties are also repeated as follows:\n\n\n\n\nThe same input will always produce the same hash.\n\n\nSlightly different inputs will produce very different hashes.\n\n\nThe hash is always of the same fixed size. For SHA256, it’s 256 bits.\n\n\nBrute-force trial and error is the only known way to find an input that\ngives a certain hash.\n\n\n\n\n\nLet’s go back to the example where you had a cat picture on your\nhard drive and wrote down the cryptographic hash of the picture on a\npiece of paper. Suppose someone wanted to change the cat picture on your\nhard drive without you noticing. What variant of the fourth property is\nimportant for stopping the attacker from succeeding?\n\n\n\n\n\n\n\n\n\n\n\n\nDigital signatures\n\n\n\n\n\n\n\n\n\n\nIn this section, we explore how you can prove to someone that you\napprove a payment. To do that, we use digital signatures. A digital\nsignature is a digital equivalent of a handwritten signature. The\ndifference is that a handwritten signature is tied to a person, whereas\na digital signature is tied to a random number called a private key.\nA digital signature is much harder to forge than a handwritten\nsignature.\n\n\nTypical use of digital signatures\n\nSuppose you want to send your favorite cat picture to your friend Fred\nvia email, but you suspect the picture might be, maliciously or\naccidentally, corrupted during transfer. How would you and Fred make\nsure the picture Fred receives is exactly the same as the one you\nsend?\n\n\n\n\n\nFigure 13. You send a digitally signed cat picture to Fred. Fred verifies the signature to make sure he’s got the same cat as the cat you signed.\n\n\nYou can include a digital signature of the cat picture in the email.\nFred can then verify this digital signature to make sure the cat\npicture is authentic. You do this in three different phases, as\nYou send a digitally signed cat picture to Fred. Fred verifies the signature to make sure he’s got the same cat as the cat you signed. shows.\n\n\nStep 1 is preparation. You create a huge random number: the private\nkey. You can use this to create digital signatures. You then create the\npublic key, which is used to verify the signatures the private key\ncreates. The public key is calculated from the private key. You hand\nthe public key to Fred in person so Fred is sure it belongs to you.\n\n\nStep 2 is signing. You write an email to Fred and attach the cat\npicture. You also use your private key and the cat picture to digitally\nsign the cat picture. The result is a digital signature that you include\nin your email message. You then send the email to Fred.\n\n\nStep 3 is verifying. Fred receives your email, but he’s concerned\nthe cat picture might be corrupt, so he wants to verify the signature.\nHe uses the public key he got from you in step 1, the digital signature\nin the email, and the attached cat picture. If the signature or the cat\npicture has changed since you created the signature, the verification\nwill fail.\n\n\n\nImproving cookie token security\n\nIt’s time to return to our cookie token spreadsheet. The company is\ngrowing, and Lisa has a hard time recognizing everyone. She notices that\nsome people aren’t honest. For example, Mallory says she is Anne, to\ntrick Lisa into moving cookie tokens from Anne to the cafe, instead of\nfrom Mallory to the cafe. Lisa thinks of requiring everybody to\ndigitally sign their cookie token transfers by writing a message and a\ndigital signature in an email, as John needs to digitally sign his payment request and include the signature in the email. shows.\n\n\n\n\n\nFigure 14. John needs to digitally sign his payment request and include the signature in the email.\n\n\nSuppose John is the new guy at the office. The company gave him some\ncookie tokens as a welcome gift when he started. Now, John wants to buy\na cookie in the cafe for 10 CT. He needs to digitally sign a cookie\ntoken transfer. The digital signature process. 1. John creates a key pair and gives the public key to Lisa. 2. John signs a message with the private key. 3. Lisa verifies the message is signed with the private key belonging to the public key she got from John. shows what he has to do.\n\n\n\n\n\nFigure 15. The digital signature process. 1. John creates a key pair and gives the public key to Lisa. 2. John signs a message with the private key. 3. Lisa verifies the message is signed with the private key belonging to the public key she got from John.\n\n\nJust as with the email to Fred in the previous section, there are three\nphases in this process (please compare with the steps in You send a digitally signed cat picture to Fred. Fred verifies the signature to make sure he’s got the same cat as the cat you signed. to\nsee the similarities):\n\n\n\nKey pair reuse\n\nA key pair is created once. The same private key can be used several\ntimes to digitally sign stuff.\n\n\n\n\n\n\nJohn prepares by generating a key pair. John keeps the private key\nsecret and hands the public key over to Lisa. This is a one-time setup\nstep.\n\n\nJohn wants a cookie. He writes a message and signs it with his\nprivate key. He sends the message and the digital signature in an\nemail to Lisa.\n\n\nLisa verifies the signature of the message using John’s public key\nand updates the spreadsheet.\n\n\n\n\n\nPreparation: John generates a key pair\n\n\n\n\n\n\n\n\n\n\nThe signing and verification processes are based on a key pair. John\nneeds a private key to sign payments, and Lisa will need John’s public\nkey to verify John’s signatures. John needs to prepare for this by\ncreating a key pair. He does this by first generating a private key and\nthen calculating the public key from that private key, as John creates a key pair. The private key is a huge random number, and the public key is derived from that random number. John stores his private key on his hard drive, and the public key is handed to Lisa.\nshows.\n\n\n\n\n\nFigure 16. John creates a key pair. The private key is a huge random number, and the public key is derived from that random number. John stores his private key on his hard drive, and the public key is handed to Lisa.\n\n\nJohn will use a random number generator to generate a huge, 256-bit\nrandom number. A random number generator is available on almost all\noperating systems. The random number is now John’s private key. The\nprivate key is then transformed into a public key using a public-key\nderivation function.\n\n\n\n\n\n\n\n\n\nPublic-key derivation is a one-way function, just like cryptographic\nhash functions; you can’t derive the private key from the public key.\nThe security of digital signatures relies heavily on this feature. Also,\nrunning the private key through the public-key derivation function\nmultiple times will always result in the same public key.\n\n\nThe public key is 33 bytes (66 hex digits) long. This is longer than\nthe private key, which is 32 bytes (64 hex digits) long. The reason\nfor the “extra” byte and how the public-key derivation function works\nis a hard topic, covered in [ch04]. Luckily, you don’t have to be a\ncryptography expert to understand how signatures work from a user’s\nperspective.\n\n\nTwo ways to use the key pair\n\nKeys are used to encrypt and decrypt data. Encryption is used to make\nmessages unreadable to everybody but those who hold the proper\ndecryption key.\n\n\nWe can think of the private and public keys as a pair because they have\na strong relationship: the public key can be used to encrypt messages\nthat only the private key can decrypt, and the private key can encrypt\nmessages that only the public key can decrypt (Encrypting and decrypting with the public and private keys. Left: Encrypt with the public key, and decrypt with the private key. Right: Encrypt with the private key, and decrypt with the public key.).\n\n\n\n\n\nFigure 17. Encrypting and decrypting with the public and private keys. Left: Encrypt with the public key, and decrypt with the private key. Right: Encrypt with the private key, and decrypt with the public key.\n\n\n\n\nWe’ll use the right side of Encrypting and decrypting with the public and private keys. Left: Encrypt with the public key, and decrypt with the private key. Right: Encrypt with the private key, and decrypt with the public key. to make digital\nsignatures. We won’t use the left side at all in this book.\n\n\n\n\nFollowing the left side of Encrypting and decrypting with the public and private keys. Left: Encrypt with the public key, and decrypt with the private key. Right: Encrypt with the private key, and decrypt with the public key., only John would\nbe able to read the encrypted message because he’s the only one with\naccess to his private key. Bitcoin doesn’t use this feature of public\nand private keys at all. It’s used when two parties want to\ncommunicate in private, as when you do your online banking. When you\nsee the little padlock in the address bar of your web browser, then\nyou know the process shown on the left side of the figure is being\nused to secure your communication.\n\n\nFollowing the right side of the figure, Lisa can decrypt the message\nbecause she has the public key belonging to John’s private key. This\nfeature is used for digital signatures. Using the private key to\nencrypt secret messages isn’t a good idea because the public key is,\nwell, public. Anyone with the public key can decrypt the\nmessage. Digital signatures, on the other hand, don’t need any secret\nmessages. We’ll explore digital signatures deeper soon. But first,\nsome recap and orientation.\n\n\n\n\nRecap of key pairs\n\nLet’s summarize what you’ve learned about public and private keys. You\ncreate a key pair by first creating a private key. The private key is\na huge, secret random number. The public key is then calculated from\nthe private key.\n\n\n\n\n\n\n\nYou can use the private key to encrypt a message that can be decrypted\nonly using the public key.\n\n\n\n\n\n\n\nThe encryption and decryption in this figure are the foundation for\ndigital signatures. This process is not suitable for sending secret\nmessages because the public key is usually widely known.\n\n\nThe reverse process is also common, in which the public key is used to\nencrypt and the private key is used to decrypt. This process is used\nto send secret messages. Bitcoin doesn’t use it.\n\n\n\nWhere were we?\n\nDigital signatures were briefly mentioned in [ch01], where Alice\nsigned her Bitcoin transaction of 1 BTC to Bob using her private key\n(Digital signatures in Bitcoin).\n\n\n\n\n\nFigure 18. Digital signatures in Bitcoin\n\n\nJohn has created a pair of keys and is about to digitally sign his\npayment to the cafe with his private key so Lisa can verify that it’s\nactually John making the payment. Lisa verifies this using John’s\npublic\nkey.\n\n\n\nJohn signs his payment\n\n\n\n\n\n\n\n\n\n\nLet’s have a close look at how the signing really happens (John digitally signs the transfer of 10 CT to the cafe. The message to Lisa is first hashed and then encrypted with John’s private key. The email to Lisa contains both the message in cleartext and the signature.).\n\n\nThe message John wants to sign is, “Lisa, please move 10CT to Cafe.\n/John”. The signing function will hash this message with SHA256, whose\noutput is a 256-bit number. This hash value is then encrypted with\nJohn’s private key. The result is a digital signature that looks like\nthis:\n\n\n\nINxAs7oFDr80ywy4bt5uYPIv/09fJMW+04U3sJUfgV39\nA2k8BKzoFRHBXm8AJeQwnroNb7qagg9QMj7Vp2wcl+c=\n\n\n\n\n\n\nFigure 19. John digitally signs the transfer of 10 CT to the cafe. The message to Lisa is first hashed and then encrypted with John’s private key. The email to Lisa contains both the message in cleartext and the signature.\n\n\n\nSignatures in Bitcoin\n\nBitcoin uses this type of signature for most payments today, but it\nisn’t the only way to authenticate a payment.\n\n\n\n\nThe signature is an encrypted hash of a message. If John had used\nanother private key to sign with or a slightly different message, the\nsignature would have looked completely different.\n\n\nFor example, using the input message “Lisa, please move 10CT to\nMallory.  /John” would generate this signature:\n\n\n\nILDtL+AVMmOrcrvCRwnsJUJUtzedNkSoLb7OLRoH2iaD\nG1f2WX1dAOTYkszR1z0TfTVIVwdAlD0W7B2hBTAzFkk=\n\n\n\nThis isn’t remotely similar to the previous signature. This is good\nfor John, because he knows his signature can’t be used for messages\nother than his specific message.\n\n\nJohn has now composed an email to Lisa. This email contains a message\nand a signature of that message. John finishes by sending the email to\nLisa.\n\n\n\nLisa verifies the signature\n\n\n\n\n\n\n\n\n\n\nLisa looks at the email and sees it claims to be from John, so she\nlooks up John in her table of public keys (Lisa uses the message (A), the signature (B), and John’s public key (C) to verify that the message is signed with John’s private key.).\n\n\n\n\n\nFigure 20. Lisa uses the message (A), the signature (B), and John’s public key (C) to verify that the message is signed with John’s private key.\n\n\nLisa’s actions in this figure aim to determine that the cookie token\ntransfer was signed by the private key it claims to be signed with. The\nmessage says it’s from John. She received John’s public key the other\nday and put that public key in her table of public keys. The things she\nhas at hand are\n\n\n\n\nThe message “Lisa, please move 10CT to Cafe. /John”\n\n\nThe signature INxAs7oFDr8…\n\n\nJohn’s public key that she just looked up in her table\n\n\n\n\n\nA signature is an encrypted hash\n\n\n\n\n\n\n\n\nJohn encrypted the message’s hash with his private key. This\nencrypted hash is the signature. If Lisa decrypts the signature (B) with\nJohn’s public key (C), the result should be a hash that equals the\nhash of the message (A) in the email.\n\n\nLisa takes the signature (B) and decrypts it with the public key (C)\nshe looked up in her table of public keys. The decryption outputs a\nbig number. If this number is equal to the hash of the message (A), it\nproves John’s private key was used to sign the message. Lisa takes the\nmessage (A), exactly as written, and hashes that message just like John\ndid when he created the signature. This message hash is then compared\nwith the decrypted signature. The message hash and the decrypted\nsignature match, which means the signature is valid.\n\n\nNote that this process works only if John and Lisa use the exact same\ndigital signature scheme. This must be agreed on beforehand, but it’s\nusually standardized. In Bitcoin, everyone knows exactly what digital\nsignature scheme to use.\n\n\nLisa can now be sure no one is trying to fool her. She updates the\nspreadsheet with John’s transfer, as shown in Lisa has added a row for John’s cookie token transfer after verifying the signature of John’s message..\n\n\n\n\n\nFigure 21. Lisa has added a row for John’s cookie token transfer after verifying the signature of John’s message.\n\n\n\nPrivate key security\n\nJohn is in control of his cookie tokens because he owns the private key.\nNo one but John can use John’s cookie tokens because he’s the only one\nwith access to his private key. If his private key is stolen, he can\nlose any and all of his cookie tokens.\n\n\nThe morning after John’s transfer, he comes to the office, takes his\nlaptop from his desk, and goes straight to the cafe to buy two morning\ncookies. He opens his laptop to write an email to Lisa:\n\n\n\nGood morning Lisa! Please move 20 CT to Cafe. /John\nSignature:\nH1CdE34cRuJDsHo5VnpvKqllC5JrMJ1jWcUjL2VjPbsj\nX6pi/up07q/gWxStb1biGU2fjcKpT4DIxlNd2da9x0o=\n\n\n\nHe sends this email containing the message and a signature to Lisa. But\nthe cafe doesn’t hand him any cookies. The guy behind the desk says he\nhasn’t seen an incoming payment of 20 CT yet. Lisa usually verifies and\nexecutes transfers quickly.\n\n\nJohn opens the spreadsheet—he has read-only access, remember—and\nsearches for “John.” Someone stole money from John. Who is Melissa, and how was this possible? John didn’t sign any such transfer. shows what he sees.\n\n\n\n\n\nFigure 22. Someone stole money from John. Who is Melissa, and how was this possible? John didn’t sign any such transfer.\n\n\nJohn steps into Lisa’s office, asking for an explanation. She answers\nthat she got a message signed with John’s private key, asking her to\nsend money to a new coworker, Melissa. Lisa even shows him the message\nand signature. Of course, there is no Melissa at the office, even though\nseveral new employees have started at the company. Lisa doesn’t care\nabout names anymore, only public keys and signatures. But she needs the\nname to look up the correct public key in the table.\n\n\nThe explanation to all this is that Mallory has\n\n\n\n\nManaged to copy John’s private key. John’s laptop has been on his desk\nall night long. Anyone could have taken the hard drive out of the laptop\nto search for his private key.\n\n\nCreated a new key pair and sent the new public key to Lisa, with the\nfollowing message:\n\n\nHi Lisa. My name is Melissa, and I’m new here.\nMy public key is\n02c5d2dd24ad71f89bfd99b9c2132f796fa746596a06f5a33c53c9d762e37d9008\n\n\n\n\nSent a fraudulent message, signed with the stolen private key, to Lisa\nas follows:\n\n\nHi Lisa, please move 90 CT to Melissa. Thanks, John\nSignature:\nIPSq8z0IyCVZNZNMIgrOz5CNRRtRO+A8Tc3j9og4pWbA\nH/zT22dQEhSaFSwOXNp0lOyE34d1+4e30R86qzEbJIw=\n\n\n\n\n\n\nLisa verified the transfer in step 3, concluded it was valid, and\nexecuted the transfer. John asks Lisa to revert the—according to\nhim—fraudulent transfer. But Lisa refuses to do so. She thinks the\ntransfer is perfectly valid. If John let someone see his private key,\nthat’s his problem, not Lisa’s. That’s part of why she’s so trusted in\nthe company—she keeps her promises.\n\n\nJohn creates a new key pair and asks Lisa to add his new public key\nunder the name John2. How can John secure his new private key and still\nhave it readily available when he wants a cookie? John is pretty sure he\nwon’t have more than 1,000 cookie tokens on that key.\n\n\n\nYou are responsible\n\nYou have full responsibility for the security of your private keys.\n\n\n\n\nThe security of the spreadsheet has shifted from a system in which Lisa\nknows everyone’s face to one in which she knows everyone’s public key.\nIn a sense, the security could be worse now, because it might be easier\nfor Mallory to steal John’s private key than it is for her to trick Lisa\ninto thinking Mallory is John. This depends on how John protects his\nprivate key. An important thing to note is that the security of John’s\nprivate key is totally up to him. No one will be able to restore John’s\nprivate key if he loses it. And Lisa sure isn’t going to reverse\n“fraudulent” transfers just because John is sloppy with security.\n\n\nIf John stores his private key in cleartext in a shared folder on the\ncompany’s intranet, anyone can easily copy it and use it to steal his\ncookie tokens. But if John stores the private key in an encrypted file,\nprotected by a strong password, on his own laptop’s hard drive, getting\na copy of his key is a lot harder. An attacker would have to\n\n\n\n\nGet access to John’s hard drive\n\n\nKnow John’s password\n\n\n\n\nIf John never has more than 50 CT on his private key, he might not be\nthat concerned with security. But the cafe, which manages about 10,000\nCT daily, might be concerned. John and the cafe probably need different\nstrategies for storing their private keys.\n\n\nA trade-off exists between security and convenience. You can, for\nexample, keep your private key encrypted on an offline laptop in a bank\nsafe-deposit box. When you want to buy a cookie, you’ll need to go to\nthe bank, take the laptop out of your safe-deposit box, decrypt the\nprivate key with your password, and use it to digitally sign a message\nto Lisa that you save to a USB stick. Then, you’ll have to put the\nlaptop back into the safe-deposit box, bring the USB stick back to the\noffice, and send the email to Lisa. The private key never leaves\nthe laptop in the safe-deposit box. Very secure, and very inconvenient.\n\n\nOn the other hand, you can store your private key in cleartext on your\nmobile phone. You’ll have the key at your fingertips and can sign a\nmessage within seconds of when the urge for a cookie starts to nudge\nyou. Very insecure, and very convenient.\n\n\n\n\n\nFigure 23. Security considerations against attackers. Note how the more secure options are also more inconvenient.\n\n\nSome of the different trade-offs, as illustrated in Security considerations against attackers. Note how the more secure options are also more inconvenient., are\nas follows:\n\n\n\nOnline vs. offline\n\nOnline means the private key is stored on a\ndevice with network access, like your mobile phone or general-purpose\nlaptop. Offline means the private key is stored on a piece of paper or\na computer without any network access. Online storage is risky because\nremote security exploits or malicious software on your computer, such\nas computer viruses, might send the private key to someone without you\nnoticing. If the device is offline, no one can take the private key\nwithout physical access to the device.\n\nCleartext vs. encrypted\n\nIf the private key is stored in cleartext in\na file on your computer’s hard drive, anyone with access to your\ncomputer, either remotely over a computer network or physically, can\ncopy the private key. This includes any viruses your computer might be\nvictim to. You can avoid many of these attacks by encrypting your\nprivate key with a password that only you know. An attacker would then\nneed access to both your hard drive and your secret password to get\nthe private key.\n\nWhole key vs. split key\n\nPeople usually store their entire private\nkey on a single computer. This is convenient—you need only one\ncomputer to spend your cookie tokens. An attacker must get access to\nyour hard drive to steal the private key. But if your private key is\nsplit into three parts (there are good and bad schemes for this—be\ncareful), and you store the three parts separately on three different\ncomputers, then the attacker must get access to the hard drives of\nthree computers. This is much harder because they must know what three\ncomputers to attack and also successfully attack them. Making a\npayment in this setup is a real hassle, but very secure.\n\n\n\n\nYou can use any combination of these methods to store your keys. But\nas a rule of thumb, the greater the security against attackers, the\ngreater the risk of you accidentally losing access to your key. For\nexample, if you store the private key encrypted on your hard drive,\nyou risk losing your key due to both computer failure and forgetting\nyour password. In this sense, the more securely you store your key,\nthe less secure it is.\n\n\n\n\nRecap\n\nLisa has solved the problem with people claiming to be someone else when\nthey make a payment. She requires all payers to digitally sign the\ncookie token transfers. Every spreadsheet user needs a private key and a\npublic key. Lisa keeps track of who owns which public key. From now on,\na payment must be written in an email to Lisa, and the message must be\ndigitally signed with the person’s private key. Lisa can then verify the\nsignature to make sure she isn’t being fooled. The gist is that as long\nas John keeps his private key to himself, no one will be able to spend\nhis money.\n\n\n\n\n\n\n\nWe need to add “Email to Lisa” to our concept table (Adding “Email to Lisa” as a key concept).\n\n\nTable 5. Adding “Email to Lisa” as a key concept\n\n\n\n\n\n\n\nCookie Tokens\nBitcoin\nCovered in\n\n\n\n\n1 cookie token\n1 bitcoin\nCryptographic hash functions and digital signatures\n\n\nThe spreadsheet\nThe blockchain\n[ch06]\n\n\nEmail to Lisa\nA transaction\n[ch05]\n\n\nA row in the spreadsheet\nA transaction\n[ch05]\n\n\nLisa\nA miner\n[ch07]\n\n\n\n\nThe email to Lisa will be replaced by transactions in [ch05].\nTransactions will replace both the email to Lisa and the row in the\nspreadsheet. It’s time to release version 2.0 of the cookie token\nspreadsheet system (Release notes, cookie tokens 2.0).\n\n\nTable 6. Release notes, cookie tokens 2.0\n\n\n\n\n\n\n\nVersion\nFeature\nHow\n\n\n\n\n2.0\nSecure payments\nDigital signatures solve the problem with imposters.\n\n\n1.0\nSimple payment system\nRelies on Lisa being trustworthy and knowing everyone’s face\n\n\nFinite money supply\n7,200 new CT rewarded to Lisa daily; halves every four years\n\n\n\n\nEverybody still trusts Lisa to not change the spreadsheet in any way\nexcept when executing signed cookie token transfers. If Lisa wanted\nto, she could steal anyone’s cookie tokens just by adding a transfer\nto the spreadsheet. But she wouldn’t do that—or would she?\n\n\n\n\n\n\n\n\n\n\n\nYou now have a lot of new tools to put in your toolbox for later use:\nkey-pair generation, digital signing, the signature, and the\nverification.\n\n\n\n\n\n\n\n\nExercises\n\nWarm up\n\n\n\nLisa is currently rewarded 7,200 CT per day for her work. Why won’t\nthe supply increase infinitely over time? Why don’t we have 7,200 ×\n10,000 = 72 million CT after 10,000 days?\n\n\nHow can coworkers detect if Lisa rewards herself too much or too\noften?\n\n\nHow is the private key of a key pair created?\n\n\nWhat key is used to digitally sign a message?\n\n\nThe signing process hashes the message to sign. Why?\n\n\nWhat would Mallory need to steal cookie tokens from John?\n\n\n\n\n\nDig in\n\n\n\nSuppose you have a private key and you’ve given your public key to a\nfriend, Fred. Suggest how Fred can send you a secret message that only\nyou can understand.\n\n\nSuppose you (let’s pretend your name is Laura) and Fred still have\nthe keys from the previous exercise. Now you want to send a message in\na bottle to Fred saying,\n\n\nHi Fred! Can we meet at Tiffany’s at sunset tomorrow? /Laura\n\n\n\nExplain how you would sign the message so Fred can be sure the message\nis actually from you. Explain what steps you and Fred take in the\nprocess.\n\n\n\n\n\n\n\nSummary\n\n\n\nBitcoins are created as rewards to nodes securing the blockchain.\n\n\nThe reward halves every four years to limit the money supply.\n\n\nYou can use cryptographic hash functions to detect changes in a file\nor in a message.\n\n\nYou can’t make up a pre-image of a cryptographic hash. A pre-image\nis an input that has a certain known output.\n\n\nDigital signatures are useful to prove a payment’s\nauthenticity. Only the rightful owner of bitcoins may spend them.\n\n\nSomeone verifying a digital signature doesn’t have to know who\nmade the signature. They just have to know the signature was made with\nthe private key the signature claims to be signed with.\n\n\nTo receive bitcoins or cookie tokens, you need a public key. First,\nyou create a private key for yourself in private. You then derive your\npublic key from your private key.\n\n\nSeveral strategies are available for storing private keys, ranging\nfrom unencrypted on your mobile phone to split and encrypted across\nseveral offline devices.\n\n\nAs a general rule of thumb, the more secure the private key is\nagainst theft, the easier it is to accidentally lose the key, and vice\nversa.\n\n\n\n\n\n', 'body_type': 'html', 'authors': ['Kalle Rosenbaum'], 'domain': 'https://github.com', 'url': 'https://github.com/kallerosenbaum/grokkingbitcoin/blob/master/ch02-hash-functions-and-signatures.adoc', 'created_at': '2023-06-29T13:58:30.137488'}}, {'_index': 'bitcoin-search-scrapy-23', '_id': 'lDfSBokBCZBMBhpp-dVf', '_score': 1.0, '_ignored': ['body.keyword', 'body_formatted.keyword'], '_source': {'id': 'grokkingbtc-6e60fe4a-58c7-48ef-957c-f0c08b8270c2', 'title': '[Grokking Bitcoin] Appendix A: Using bitcoin-cli', 'body_formatted': '<article><div>\n<h2><a><svg><path></path></svg></a>Appendix A: Using bitcoin-cli</h2>\n<div>\n<div>\n<p>This appendix continues from <a>[run-your-own-full-node]</a>. I’ll show you\nhow to set up a Bitcoin wallet, receive and send bitcoins, and explore\nthe Bitcoin blockchain using <code>bitcoin-cli</code>, Bitcoin Core’s\ncommand-line tool.</p>\n</div>\n<div>\n<p>Note that this appendix won’t go into great depth on <code>bitcoin-cli</code>.\nThis should only be regarded as a source of inspiration; it will\nprovide you with the basics to get started. You’re encouraged to\nexplore further.</p>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Communicating with bitcoind</h3>\n<div>\n<p>When <code>bitcoind</code> starts, it also starts a web server that listens on TCP\nport 8332 by default. When you use <code>bitcoin-cli</code>, it will connect to the\nweb server, send your command to the web server over HTTP, and display\nrelevant parts of the response to you.</p>\n</div>\n<div>\n<p>For example, suppose I want to know the block ID of the genesis block\n(the block at height 0), and I issue the following command:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli getblockhash 0</pre>\n</div>\n</div>\n<div>\n<p><code>bitcoin-cli</code> creates an HTTP <code>POST</code> request with the body</p>\n</div>\n<div>\n<div>\n<pre>{"method":"getblockhash","params":[0],"id":1}</pre>\n</div>\n</div>\n<div>\n<p>and sends it to the web server that <code>bitcoind</code> runs. The request body’s\n<code>method</code> property is the command you want to execute, and the argument\n<code>0</code> is passed to the web server as an array with a single element.</p>\n</div>\n<div>\n<p>The web server processes the HTTP request by looking up the block hash\nin the blockchain and replies with an HTTP response with the following\nbody:</p>\n</div>\n<div>\n<div>\n<pre>{"result":"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f","error":null,"id":"1"}</pre>\n</div>\n</div>\n<div>\n<p><code>bitcoin-cli</code> then displays the value of the <code>result</code> property on the\nterminal:</p>\n</div>\n<div>\n<div>\n<pre>000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f</pre>\n</div>\n</div>\n<div>\n<p>This body of the HTTP request follows a standard called JSON-RPC, which\ndescribes how a client can call functions on a remote process using\nJavaScript Object Notation (JSON).</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Using curl</h4>\n<div>\n<p>Because the communication with <code>bitcoind</code> happens through <code>HTTP</code>, any\nprogram that can send <code>HTTP POST</code> requests, such as the command-line\ntool <code>curl</code>, can be used to communicate with <code>bitcoind</code>. But to use\ntools other than <code>bitcoin-cli</code>, you need to set up a username and\npassword to use as authentication to the web server.</p>\n</div>\n<div>\n<div>\n<div>More parameters</div>\n<div>\n<p>Bitcoin Core offers a lot of options. Run <code>./bitcoind --help</code> to get a\ncomplete list.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Stop the node with <code>./bitcoin-cli stop</code>. Open—or create, if it doesn’t\nexist—Bitcoin Core’s configuration file ~/.bitcoin/bitcoin.conf, and add\nthese lines:</p>\n</div>\n<div>\n<div>\n<pre>rpcuser=&lt;a username that you select&gt;\nrpcpassword=&lt;a password that you select&gt;</pre>\n</div>\n</div>\n<div>\n<p>After you’ve modified and saved the ~/.bitcoin/bitcoin.conf file, start\nyour node using <code>./bitcoind -daemon</code>, to make the changes effective.</p>\n</div>\n<div>\n<p>Here’s how I called <code>getblockhash</code> using <code>curl</code> (the backslash <code>\\</code>\ncharacter means the command continues on the next line):</p>\n</div>\n<div>\n<div>\n<pre>curl --user kalle --data-binary \\\n    \'{"method":"getblockhash","params":[0],"id":1}\' \\\n    -H \'content-type: text/plain;\' http://127.0.0.1:8332/\nEnter host password for user \'kalle\':\n{"result":"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f","error":null,"id":1}</pre>\n</div>\n</div>\n<div>\n<p>Remember to change the username from <code>kalle</code> to the username you\nconfigured in bitcoin.conf.</p>\n</div>\n<div>\n<p>This command will prompt you for the password. Enter the password, and\npress Enter. The reply from the web server will be the same as when you\nused <code>bitcoin-cli</code>, but you’ll need to scan through the response body to\nspot the result, which is the hash of block 0.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Graphical user interface</h3>\n<div>\n<p>Bitcoin Core comes with a graphical user interface (GUI). This appendix\nmainly deals with the command-line interface <code>bitcoin-cli</code> for\ncontrolling and querying your running <code>bitcoind</code>. But if you want to use\nBitcoin Core as a Bitcoin wallet (and not just as a full node), it can\nbe useful to familiarize yourself with the GUI version. The GUI version\nof Bitcoin Core lets you perform most common tasks expected from a\nBitcoin wallet, but to access Bitcoin Core’s full set of features,\nyou’ll need to use <code>bitcoin-cli</code>.</p>\n</div>\n<div>\n<p>To use the GUI version of Bitcoin Core, you need to stop the current\nnode and start the GUI version, called <code>bitcoin-qt</code>:</p>\n</div>\n<div>\n<div>\n<div>Why -qt?</div>\n<div>\n<p>The Bitcoin Core GUI is built using a GUI programming library called QT.\nHence the name, <code>bitcoin-qt</code>.</p>\n</div>\n</div>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli stop\nBitcoin server stopping\n$ ./bitcoin-qt &amp;</pre>\n</div>\n</div>\n<div>\n<p>If <code>bitcoind</code> didn’t have time to finish shutting down before you\nstarted <code>bitcoin-qt</code>, you’ll get an error message from <code>bitcoin-qt</code>. If\nso, click OK and try running <code>./bitcoin-qt &amp;</code> again in a few seconds.</p>\n</div>\n<div>\n<p><code>bitcoin-qt</code> uses the same data directory, ~/.bitcoin/, as <code>bitcoind</code>,\nwhich means <code>bitcoin-qt</code> will use the already downloaded and verified\nblockchain and the same wallet as <code>bitcoind</code>. It’s just the user\ninterface that differs.</p>\n</div>\n<div>\n<p>By default, <code>bitcoin-qt</code> won’t start the web server to accept JSON-RPC\nrequests as <code>bitcoind</code> does. To use <code>bitcoin-cli</code> with <code>bitcoin-qt</code>,\nstart <code>bitcoin-qt</code> as follows, instead:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-qt -server &amp;</pre>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Getting to know bitcoin-cli</h3>\n<div>\n<p>You’ve started Bitcoin Core in the background by running</p>\n</div>\n<div>\n<div>\n<pre> $ ./bitcoind -daemon</pre>\n</div>\n</div>\n<div>\n<p>The most important command to know is the <code>help</code> command. Run it without\nany arguments to get a list of all available commands:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli help</pre>\n</div>\n</div>\n<div>\n<p>You’ll get a long list of commands grouped by subject—for example,\n<code>Blockchain</code>, <code>Mining</code>, and <code>Wallet</code>. Some commands are\nself-explanatory, but if you want to know more about a specific command,\nyou can run <code>help</code> with the command name as an argument. For example:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli help getblockhash\ngetblockhash height\n\nReturns hash of block in best-block-chain at height provided.\n\nArguments:\n1. height         (numeric, required) The height index\n\nResult:\n"hash"         (string) The block hash\n\nExamples:\n&gt; bitcoin-cli getblockhash 1000\n&gt; curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getblockhash", "params": [1000] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/</pre>\n</div>\n</div>\n<div>\n<p>You can invoke <code>bitcoin-cli</code> in two ways:</p>\n</div>\n<div>\n<ul>\n<li>\n<p><em>Using positional arguments</em>—The meanings of the arguments are based\non their relative positions: for example, <code>./bitcoin-cli getblockhash\n1000</code>. This is the most common way to use <code>bitcoin-cli.</code></p>\n</li>\n<li>\n<p><em>Using named arguments</em>—The arguments are named on the command line:\nfor example, <code>./bitcoin-cli -named getblockhash height=1000</code>. This is\nsometimes useful when the command takes optional arguments and you\nwant to specify the second optional argument but not the first. You’ll\nsee examples later.</p>\n</li>\n</ul>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Getting to work</h3>\n<div>\n<p>Let’s create an encrypted wallet and back it up. You’ll then receive\nsome bitcoins and pass that money on to another address while dissecting\nthe transactions for details—all using <code>bitcoin-cli</code>.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Creating an encrypted wallet</h4>\n<div>\n<p>When <code>bitcoind</code> (or <code>bitcoin-qt</code>) starts, it will automatically create a\nwallet for you and store it in the file ~/.bitcoin/wallet.dat. But this\nwallet isn’t encrypted, which means its private keys and its seed, used\nto derive key pairs as discussed in <a>[ch04]</a>, are stored in the clear\non your hard drive. Let’s look at some data for such a wallet:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli getwalletinfo\n{\n  "walletname": "",\n  "walletversion": 169900,\n  "balance": 0.00000000,\n  "unconfirmed_balance": 0.00000000,\n  "immature_balance": 0.00000000,\n  "txcount": 0,\n  "keypoololdest": 1541941001,\n  "keypoolsize": 1000,\n  "keypoolsize_hd_internal": 1000,\n  "paytxfee": 0.00000000,\n  "hdseedid": "bb989ad4e23f7bb713eab0a272eaef3d4857f5e3",\n  "hdmasterkeyid": "bb989ad4e23f7bb713eab0a272eaef3d4857f5e3",\n  "private_keys_enabled": true\n}</pre>\n</div>\n</div>\n<div>\n<p>The output from the <code>getwalletinfo</code> command shows various information\nabout the wallet currently being used. This automatically created wallet\nis unnamed, which is why <code>walletname</code> is empty.</p>\n</div>\n<div>\n<p><code>balance</code> is how many confirmed bitcoins you have (including unconfirmed\noutgoing transactions), and <code>unconfirmed_balance</code> is the sum of incoming\nunconfirmed payments. <code>immature_balance</code> is relevant only for miners and\ndenotes the number of newly created bitcoins, which can’t be spent until\nafter 100 blocks passed. Refer to the help section on <code>getwalletinfo</code>\nfor more details about the output.</p>\n</div>\n<div>\n<p>To create an encrypted wallet, you need to create a <em>new</em> wallet using\nthe command <code>encryptwallet</code>:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli -stdin encryptwallet\nsecretpassword&lt;ENTER&gt;\n&lt;CTRL-D&gt;\nwallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup.</pre>\n</div>\n</div>\n<div>\n<p>This command creates a new encrypted wallet. The <code>-stdin</code> option is used\nto read the password argument from standard input, which in this case\nmeans you type the password in your terminal window after starting the\ncommand. End your input by pressing Enter and Ctrl-D. The reason for\nusing <code>-stdin</code> is that you don’t want the password to be written in the\ncommand itself, because most shell interpreters, such as bash, keep a\nhistory of commands in a file. The <code>-stdin</code> option ensures that the\npassword doesn’t end up in any such history files.</p>\n</div>\n<div>\n<p>It’s important to create a new encrypted wallet instead of just\nencrypting the existing wallet, because the old wallet might already\nhave been compromised on your hard drive. As noted by the output,\n<code>bitcoind</code> has stopped. Bitcoin Core can’t currently switch to a new\nwallet file while running.</p>\n</div>\n<div>\n<p>Let’s start <code>bitcoind</code> again and look at the wallet. You’ll see\nsomething similar to this:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoind -daemon\nBitcoin server starting\n$ ./bitcoin-cli getwalletinfo\n{\n  "walletname": "",\n  "walletversion": 169900,\n  "balance": 0.00000000,\n  "unconfirmed_balance": 0.00000000,\n  "immature_balance": 0.00000000,\n  "txcount": 0,\n  "keypoololdest": 1541941063,\n  "keypoolsize": 1000,\n  "keypoolsize_hd_internal": 1000,\n  "unlocked_until": 0,\n  "paytxfee": 0.00000000,\n  "hdseedid": "590ec0fa4cec43d9179e5b6f7b2cdefaa35ed282",\n  "hdmasterkeyid": "590ec0fa4cec43d9179e5b6f7b2cdefaa35ed282",\n  "private_keys_enabled": true\n}</pre>\n</div>\n</div>\n<div>\n<p>Your old, unencrypted wallet.dat has been overwritten by the new,\nencrypted wallet.dat. For safety, however, your old seed is kept in the\nnew encrypted wallet, in case you had actual funds in the old wallet or\naccidentally receive funds to that old wallet in the future. The\n<code>unlocked_until</code> value of <code>0</code> means your private keys are encrypted with\nthe password you entered when you encrypted your wallet. From now on,\nyou need to decrypt your private keys to access them. You’ll do that\nwhen you send bitcoin later.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Backing up the wallet</h4>\n<div>\n<p>You’ve created an encrypted wallet, and before you start using it, you\nneed to back it up. In <a>[ch04]</a>, we talked about mnemonic sentences, as\ndefined in BIP39, which made backing up hierarchical deterministic (HD)\nwallet seeds simple. But this feature is <em>not</em> implemented in Bitcoin\nCore, for a few reasons—mainly, that the mnemonic sentence lacks\ninformation about the following:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>The version of the seed format.</p>\n</li>\n<li>\n<p>The <em>birthday</em>, which is when the seed was created. Without a\nbirthday, you have to scan the entire blockchain to find your old\ntransactions. With a birthday, you only have to scan the blockchain from\nthe birthday onward.</p>\n</li>\n<li>\n<p>The derivation paths to use for restoration. This is somewhat remedied\nby using standard derivation paths, but not all wallets implement the\nstandard.</p>\n</li>\n<li>\n<p>Other arbitrary metadata, such as labels on addresses.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>To back up your Bitcoin Core wallet, you need to make a copy of the\nwallet.dat file. Be careful not to copy the file using your operating\nsystem’s copy facilities while <code>bitcoind</code> or <code>bitcoin-qt</code> is running. If\nyou do this, your backup might be in an inconsistent state because\n<code>bitcoind</code> might be writing data to it while you copy. To make sure you\nget a consistent copy of the file while Bitcoin Core is running, run the\nfollowing command:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli backupwallet ~/walletbackup.dat</pre>\n</div>\n</div>\n<div>\n<p>This will instruct <code>bitcoind</code> to save a copy of the wallet file to\nwalletbackup.dat in your home directory (you can change the name and\npath of the file to anything you like). The backup file will be an exact\ncopy of the original wallet.dat file. Move the walletbackup.dat file to\na safe place—for example, a USB memory stick in a bank safe-deposit box\nor on a computer at your brother’s apartment.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Receiving money</h4>\n<div>\n<p>You’ve created an encrypted, backed-up wallet. Great! Let’s put some\nbitcoins into it. To do this, you need a Bitcoin address to receive the\nbitcoins to, so let’s get one:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli -named getnewaddress address_type=bech32\nbc1q2r9mql4mkz3z7yfxvef76yxjd637r429620j75</pre>\n</div>\n</div>\n<div>\n<p>This command creates a bech32 p2wpkh address for you. If you prefer\nanother type of address, you can change <code>bech32</code> to <code>legacy</code> to get a\np2pkh address or to <code>p2sh-segwit</code> to get a p2wpkh nested in p2sh\naddress. Head back to the <a>[recap-of-payment-types]</a> to refresh your\nmemory on the different payment and address types.</p>\n</div>\n<div>\n<p>Now, let’s send bitcoin to that address. Be careful not to send money to\nthe address printed in this book (although I’ll happily accept it), but\nrather to an address you generate yourself with your own full node\nwallet.</p>\n</div>\n<div>\n<p>This raises the question of how to get bitcoins to send to your\nwallet. You can get bitcoins in several ways:</p>\n</div>\n<div>\n<div>\n<div>On the web</div>\n<div>\n<p>Visit <a>[web-getting-started]</a> to find out more about how to get\nbitcoins where you live.</p>\n</div>\n</div>\n</div>\n<div>\n<ul>\n<li>\n<p>Buy bitcoins on an exchange.</p>\n</li>\n<li>\n<p>Ask friends who have bitcoins if they can give or sell you some.</p>\n</li>\n<li>\n<p>Earn bitcoins as payment for your labor.</p>\n</li>\n<li>\n<p>Mine bitcoins.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>I’ll leave it up to you how you obtain bitcoins and assume that you\nsomehow will get bitcoins into the address you created previously.</p>\n</div>\n<div>\n<p>I made a payment to my new address and then checked my wallet:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli getunconfirmedbalance\n0.00500000</pre>\n</div>\n</div>\n<div>\n<p>This shows a pending incoming payment of 5 mBTC (0.005 BTC). I now have\nto wait until it’s confirmed in the blockchain. Meanwhile, you can dig\ninto the transaction by running the <code>listtransactions</code> command. Here are\nmy results:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli listtransactions\n[\n  {\n    "address": "bc1q2r9mql4mkz3z7yfxvef76yxjd637r429620j75",\n    "category": "receive",\n    "amount": 0.00500000,\n    "label": "",\n    "vout": 1,\n    "confirmations": 0,\n    "trusted": false,\n    "txid": "ebfd0d14c2ea74ce408d01d5ea79636b8dee88fe06625f5d4842d2a0ba45c195",\n    "walletconflicts": [\n    ],\n    "time": 1541941483,\n    "timereceived": 1541941483,\n    "bip125-replaceable": "yes"\n  }\n]</pre>\n</div>\n</div>\n<div>\n<p>This transaction has 0 confirmations and pays 0.005 BTC. You can also\nsee that this transaction’s txid is <code>ebfd0d14…ba45c195</code>.</p>\n</div>\n<div>\n<p>Let’s take a closer look at the transaction using the command\n<code>getrawtransaction</code>:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli getrawtransaction \\\n    ebfd0d14c2ea74ce408d01d5ea79636b8dee88fe06625f5d4842d2a0ba45c195 1\n{\n  "txid": "ebfd0d14c2ea74ce408d01d5ea79636b8dee88fe06625f5d4842d2a0ba45c195",\n  "hash": "ebfd0d14c2ea74ce408d01d5ea79636b8dee88fe06625f5d4842d2a0ba45c195",\n  "version": 1,\n  "size": 223,\n  "vsize": 223,\n  "weight": 892,\n  "locktime": 549655,\n  "vin": [\n    {\n      "txid": "8a4023dbcf57dc7f51d368606055e47636fc625a512d3481352a1eec909ab22f",\n      "vout": 0,\n      "scriptSig": {\n        "asm": "3045022100cc095e6b7c0d4c42a1741371cfdda4f1b518590f1af0915578d3966fee7e34ea02205fc1e976edcf4fe62f16035a5389c661844f7189a9eb45adf59e061ac8cc6fd3[ALL] 030ace35cc192cedfe2a730244945f1699ea2f6b7ee77c65c83a2d7a37440e3dae",\n        "hex": "483045022100cc095e6b7c0d4c42a1741371cfdda4f1b518590f1af0915578d3966fee7e34ea02205fc1e976edcf4fe62f16035a5389c661844f7189a9eb45adf59e061ac8cc6fd30121030ace35cc192cedfe2a730244945f1699ea2f6b7ee77c65c83a2d7a37440e3dae"\n      },\n      "sequence": 4294967293\n    }\n  ],\n  "vout": [\n    {\n      "value": 0.00313955,\n      "n": 0,\n      "scriptPubKey": {\n        "asm": "OP_DUP OP_HASH160 6da68d8f89dced72d4339959c94a4fcc872fa089 OP_EQUALVERIFY OP_CHECKSIG",\n        "hex": "76a9146da68d8f89dced72d4339959c94a4fcc872fa08988ac",\n        "reqSigs": 1,\n        "type": "pubkeyhash",\n        "addresses": [\n          "1AznBDM2ZfjYNoRw3DLSR9NL2cwwqDHJY6"\n        ]\n      }\n    },\n    {\n      "value": 0.00500000,\n      "n": 1,\n      "scriptPubKey": {\n        "asm": "0 50cbb07ebbb0a22f11266653ed10d26ea3e1d545",\n        "hex": "001450cbb07ebbb0a22f11266653ed10d26ea3e1d545",\n        "reqSigs": 1,\n        "type": "witness_v0_keyhash",\n        "addresses": [\n          "bc1q2r9mql4mkz3z7yfxvef76yxjd637r429620j75"\n        ]\n      }\n    }\n  ],\n  "hex": "01000000012fb29a90ec1e2a3581342d515a62fc3676e455606068d3517fdc57cfdb23408a000000006b483045022100cc095e6b7c0d4c42a1741371cfdda4f1b518590f1af0915578d3966fee7e34ea02205fc1e976edcf4fe62f16035a5389c661844f7189a9eb45adf59e061ac8cc6fd30121030ace35cc192cedfe2a730244945f1699ea2f6b7ee77c65c83a2d7a37440e3daefdffffff0263ca0400000000001976a9146da68d8f89dced72d4339959c94a4fcc872fa08988ac20a107000000000016001450cbb07ebbb0a22f11266653ed10d26ea3e1d54517630800"\n}</pre>\n</div>\n</div>\n<div>\n<p>This command prints the entire transaction in a human-readable (well, at\nleast developer-readable) form. Let’s start from the top and go through\nthe most relevant parts of this transaction. The <code>txid</code> is the\ntransaction id. The <code>hash</code> is the double SHA256 hash of the whole\ntransaction, including the witness. For non-segwit transactions, <code>hash</code>\nis equal to <code>txid</code>.</p>\n</div>\n<div>\n<p>The <code>size</code> of the transaction is 223 bytes, and <code>vsize</code> (the virtual\nsize) is also 223 vbytes; <code>vsize</code> is the transaction’s number of weight\nunits (<code>892</code>) divided by 4, so the virtual size of a non-segwit\ntransaction (which this is, because it only spends non-segwit outputs)\nis equal to its actual <code>size</code>.</p>\n</div>\n<div>\n<p>The locktime of this transaction is set to <code>549655</code>, which was the\nheight of the strongest chain at the time of the transaction’s creation.\nThus the transaction can’t be mined until block height 549656. This\nreduces the attractiveness of an attack in which a miner deliberately\ntries to reorg the blockchain and include the transaction into a block\nheight that’s already been mined.</p>\n</div>\n<div>\n<p>Next comes the list of inputs. This transaction has a single input that\nspends output at index <code>0</code> (<code>vout</code>) of the transaction with <code>txid</code>\n<code>8a4023db…909ab22f</code>. The input spends a p2pkh output.</p>\n</div>\n<div>\n<p>The input’s sequence number is <code>4294967293</code>, which is <code>fffffffd</code> in hex\ncode. This means the lock time is enabled (≤<code>fffffffe</code>) and the\ntransaction is replaceable (≤<code>fffffffd</code>) according to BIP125. The\nmeaning of the sequence number was summarized in <a>[tab0901]</a>.</p>\n</div>\n<div>\n<p>After the list of inputs comes the list of transaction outputs. This\ntransaction has a list of two outputs. The first pays 0.00313955 BTC to\na p2pkh address you haven’t seen before. This is <em>probably</em> a change\noutput. The second output sends 0.005 BTC to the p2wpkh address created\nearlier.</p>\n</div>\n<div>\n<p>Let’s see if the transaction is confirmed yet. You can check, for\nexample, with <code>getbalance</code>. In my case, if it shows <code>0.00500000</code>, then\nthe transaction has confirmed:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli getbalance\n0.00500000</pre>\n</div>\n</div>\n<div>\n<p>Cool, the money is confirmed! Let’s move on.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Sending money</h4>\n<div>\n<p>You’ve received some bitcoins. Now, you want to send bitcoins to someone\nelse. To send bitcoins, you can use the <code>sendtoaddress</code> command. You\nneed to make a few decisions first:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Address to send to</p>\n</li>\n<li>\n<p>How much money to send: 0.001 BTC</p>\n</li>\n<li>\n<p>How urgent the transaction is: not urgent (you’ll be happy if it\nconfirms within 20 blocks)</p>\n</li>\n</ul>\n</div>\n<div>\n<p>I’ll send the bitcoins to address <code>bc1qu456…5t7uulqm</code>, but you should\nget another address to send to. If you have no other wallet, you can\ncreate a new address in Bitcoin Core to send to just for experimental\npurposes. I’ve obfuscated my address below so that you don’t send to my\naddress by mistake.</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli -named sendtoaddress \\\n    address="bc1qu456w7a5mawlgXXXXXXu03wp8wc7d65t7uulqm" \\\n    amount=0.001 conf_target=20 estimate_mode=ECONOMICAL\nerror code: -13\nerror message:\nError: Please enter the wallet passphrase with walletpassphrase first.</pre>\n</div>\n</div>\n<div>\n<p>Oh, dear! An error. As indicated by the error message, the private keys\nare encrypted in the wallet.dat file. Bitcoin Core needs the private\nkeys to sign the transaction. To make the private keys accessible, you\nneed to decrypt them. You do this using the <code>walletpassphrase</code> command\nwith the <code>-stdin</code> option to prevent the passphrase from being stored by\nyour command-line interpreter, such as bash:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli -stdin walletpassphrase\nsecretpassword&lt;ENTER&gt;\n300&lt;ENTER&gt;\n&lt;CTRL-D&gt;</pre>\n</div>\n</div>\n<div>\n<p>The last argument, <code>300</code>, is the number of seconds you should keep the\nwallet unlocked. After 300 seconds, the wallet will be automatically\nlocked again in case you forget to lock it manually. Let’s retry the\n<code>sendtoaddress</code> command:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli -named sendtoaddress \\\n    address="bc1qu456w7a5mawlgXXXXXXu03wp8wc7d65t7uulqm" \\\n    amount=0.001 conf_target=20 estimate_mode=ECONOMICAL\na13bcb16d8f41851cab8e939c017f1e05cc3e2a3c7735bf72f3dc5ef4a5893a2</pre>\n</div>\n</div>\n<div>\n<p>The command output a txid for the newly created transaction. This means\nit went well. You can relock the wallet using the <code>walletlock</code> command:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli walletlock</pre>\n</div>\n</div>\n<div>\n<p>The wallet is now locked. I’ll list my transactions again:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli listtransactions\n[\n  {\n    "address": "bc1q2r9mql4mkz3z7yfxvef76yxjd637r429620j75",\n    "category": "receive",\n    "amount": 0.00500000,\n    "label": "",\n    "vout": 1,\n    "confirmations": 1,\n    "blockhash": "000000000000000000240eec03ac7499805b0f3df34a7d5005670f3a8fa836ca",\n    "blockindex": 311,\n    "blocktime": 1541946325,\n    "txid": "ebfd0d14c2ea74ce408d01d5ea79636b8dee88fe06625f5d4842d2a0ba45c195",\n    "walletconflicts": [\n    ],\n    "time": 1541941483,\n    "timereceived": 1541941483,\n    "bip125-replaceable": "no"\n  },\n  {\n    "address": "bc1qu456w7a5mawlg35y00xu03wp8wc7d65t7uulqm",\n    "category": "send",\n    "amount": -0.00100000,\n    "vout": 1,\n    "fee": -0.00000141,\n    "confirmations": 0,\n    "trusted": true,\n    "txid": "a13bcb16d8f41851cab8e939c017f1e05cc3e2a3c7735bf72f3dc5ef4a5893a2",\n    "walletconflicts": [\n    ],\n    "time": 1541946631,\n    "timereceived": 1541946631,\n    "bip125-replaceable": "no",\n    "abandoned": false\n  }\n]</pre>\n</div>\n</div>\n<div>\n<p>The new transaction is the last one of the two. It isn’t yet confirmed,\nas indicated by <code>"confirmations": 0</code>. The fee paid was 141 satoshis.\nLet’s look into this transaction in detail:</p>\n</div>\n<div>\n<div>\n<pre>$ ./bitcoin-cli getrawtransaction \\\n    a13bcb16d8f41851cab8e939c017f1e05cc3e2a3c7735bf72f3dc5ef4a5893a2 1\n{\n  "txid": "a13bcb16d8f41851cab8e939c017f1e05cc3e2a3c7735bf72f3dc5ef4a5893a2",\n  "hash": "554a3a3e57dcd07185414d981af5fd272515d7f2159cf9ed9808d52b7d852ead",\n  "version": 2,\n  "size": 222,\n  "vsize": 141,\n  "weight": 561,\n  "locktime": 549665,\n  "vin": [\n    {\n      "txid": "ebfd0d14c2ea74ce408d01d5ea79636b8dee88fe06625f5d4842d2a0ba45c195",\n      "vout": 1,\n      "scriptSig": {\n        "asm": "",\n        "hex": ""\n      },\n      "txinwitness": [\n        "30440220212043afeaf70a97ea0aa09a15749ab94e09c6fad427677610286666a3decf0b022076818b2b2dc64b1599fd6b39bb8c249efbf4c546e334bcd7e1874115da4dfd0c01",\n        "020127d82280a939add393ddbb1b8d08f0371fffbde776874cd69740b59e098866"\n      ],\n      "sequence": 4294967294\n    }\n  ],\n  "vout": [\n    {\n      "value": 0.00399859,\n      "n": 0,\n      "scriptPubKey": {\n        "asm": "0 4bf041f271bd94385d6bcac8487adf6c9a862d10",\n        "hex": "00144bf041f271bd94385d6bcac8487adf6c9a862d10",\n        "reqSigs": 1,\n        "type": "witness_v0_keyhash",\n        "addresses": [\n          "bc1qf0cyrun3hk2rshttetyys7kldjdgvtgs6ymhzz"\n        ]\n      }\n    },\n    {\n      "value": 0.00100000,\n      "n": 1,\n      "scriptPubKey": {\n        "asm": "0 e569a77bb4df5df446847bcdc7c5c13bb1e6ea8b",\n        "hex": "0014e569a77bb4df5df446847bcdc7c5c13bb1e6ea8b",\n        "reqSigs": 1,\n        "type": "witness_v0_keyhash",\n        "addresses": [\n          "bc1qu456w7a5mawlg35y00xu03wp8wc7d65t7uulqm"\n        ]\n      }\n    }\n  ],\n  "hex": "0200000000010195c145baa0d242485d5f6206fe88ee8d6b6379ead5018d40ce74eac2140dfdeb0100000000feffffff02f3190600000000001600144bf041f271bd94385d6bcac8487adf6c9a862d10a086010000000000160014e569a77bb4df5df446847bcdc7c5c13bb1e6ea8b024730440220212043afeaf70a97ea0aa09a15749ab94e09c6fad427677610286666a3decf0b022076818b2b2dc64b1599fd6b39bb8c249efbf4c546e334bcd7e1874115da4dfd0c0121020127d82280a939add393ddbb1b8d08f0371fffbde776874cd69740b59e09886621630800"\n}</pre>\n</div>\n</div>\n<div>\n<p>The first thing to note is that <code>txid</code> and <code>hash</code> differ. That’s because\nthis is a segwit transaction. As you may recall from <a>[ch10]</a>, the\nwitness isn’t included in the txid—that’s how you avoid transaction\nmalleability—but the <code>hash</code> in the output includes it. Note that <code>size</code>\nand <code>vsize</code> differ, too, which is expected from a segwit transaction.\nThe fee was 141 satoshis, as shown by the <code>listtransactions</code> command,\nand the <code>vsize</code> was 141 vbytes. The fee rate was thus selected by\nBitcoin Core to be 1 sat/vbyte.</p>\n</div>\n<div>\n<p>The transaction has a single input that spends output <code>1</code> of transaction\n<code>ebfd0d14…ba45c195</code>. You should recognize this output from the section\nwhere I paid 0.005 BTC to my Bitcoin Core wallet. Because that output\nwas a p2wpkh output, the signature script (<code>scriptSig</code>) is empty, and\nthe <code>txinwitness</code> contains the signature and pubkey.</p>\n</div>\n<div>\n<p>The sequence number of the input is 4294967294, which equals <code>fffffffe</code>.\nThis means the transaction has lock time enabled but isn’t replaceable\nusing BIP125 (opt-in replace-by-fee).</p>\n</div>\n<div>\n<p>I have two outputs. The first is the change of 0.00399859 BTC back to an\naddress I own. The other is the actual payment of 0.001 BTC. Let’s check\nthe balance again:</p>\n</div>\n<div>\n<div>\n<pre> ./bitcoin-cli getbalance\n0.00399859</pre>\n</div>\n</div>\n<div>\n<p>Yep, there it is. I didn’t have to wait for confirmation to see the\nnew balance, because <code>getbalance</code> always includes my own <em>outgoing</em>\nunconfirmed transactions. I’ve spent my only UTXO (of 0.005 BTC) and\ncreated a new UTXO of 0.00399859 to myself:</p>\n</div>\n<div>\n<div>\n<pre>Spent:   0.005\nPay:    -0.001\nFee:    -0.00000141\n===================\nChange:  0.00399859</pre>\n</div>\n</div>\n<div>\n<p>It sums up perfectly.</p>\n</div>\n<div>\n<p>I’ve shown a few commands you can use to wing your Bitcoin Core node,\nbut there’s a lot more to it. Explore <code>./bitcoin-cli help</code> to find out\nmore.</p>\n</div>\n</div>\n</div>\n</div>\n</div></article>', 'body': '\nAppendix A: Using bitcoin-cli\n\n\nThis appendix continues from [run-your-own-full-node]. I’ll show you\nhow to set up a Bitcoin wallet, receive and send bitcoins, and explore\nthe Bitcoin blockchain using bitcoin-cli, Bitcoin Core’s\ncommand-line tool.\n\n\nNote that this appendix won’t go into great depth on bitcoin-cli.\nThis should only be regarded as a source of inspiration; it will\nprovide you with the basics to get started. You’re encouraged to\nexplore further.\n\n\nCommunicating with bitcoind\n\nWhen bitcoind starts, it also starts a web server that listens on TCP\nport 8332 by default. When you use bitcoin-cli, it will connect to the\nweb server, send your command to the web server over HTTP, and display\nrelevant parts of the response to you.\n\n\nFor example, suppose I want to know the block ID of the genesis block\n(the block at height 0), and I issue the following command:\n\n\n\n$ ./bitcoin-cli getblockhash 0\n\n\n\nbitcoin-cli creates an HTTP POST request with the body\n\n\n\n{"method":"getblockhash","params":[0],"id":1}\n\n\n\nand sends it to the web server that bitcoind runs. The request body’s\nmethod property is the command you want to execute, and the argument\n0 is passed to the web server as an array with a single element.\n\n\nThe web server processes the HTTP request by looking up the block hash\nin the blockchain and replies with an HTTP response with the following\nbody:\n\n\n\n{"result":"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f","error":null,"id":"1"}\n\n\n\nbitcoin-cli then displays the value of the result property on the\nterminal:\n\n\n\n000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n\n\n\nThis body of the HTTP request follows a standard called JSON-RPC, which\ndescribes how a client can call functions on a remote process using\nJavaScript Object Notation (JSON).\n\n\nUsing curl\n\nBecause the communication with bitcoind happens through HTTP, any\nprogram that can send HTTP POST requests, such as the command-line\ntool curl, can be used to communicate with bitcoind. But to use\ntools other than bitcoin-cli, you need to set up a username and\npassword to use as authentication to the web server.\n\n\n\nMore parameters\n\nBitcoin Core offers a lot of options. Run ./bitcoind --help to get a\ncomplete list.\n\n\n\n\nStop the node with ./bitcoin-cli stop. Open—or create, if it doesn’t\nexist—Bitcoin Core’s configuration file ~/.bitcoin/bitcoin.conf, and add\nthese lines:\n\n\n\nrpcuser=<a username that you select>\nrpcpassword=<a password that you select>\n\n\n\nAfter you’ve modified and saved the ~/.bitcoin/bitcoin.conf file, start\nyour node using ./bitcoind -daemon, to make the changes effective.\n\n\nHere’s how I called getblockhash using curl (the backslash \\\ncharacter means the command continues on the next line):\n\n\n\ncurl --user kalle --data-binary \\\n    \'{"method":"getblockhash","params":[0],"id":1}\' \\\n    -H \'content-type: text/plain;\' http://127.0.0.1:8332/\nEnter host password for user \'kalle\':\n{"result":"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f","error":null,"id":1}\n\n\n\nRemember to change the username from kalle to the username you\nconfigured in bitcoin.conf.\n\n\nThis command will prompt you for the password. Enter the password, and\npress Enter. The reply from the web server will be the same as when you\nused bitcoin-cli, but you’ll need to scan through the response body to\nspot the result, which is the hash of block 0.\n\n\n\n\nGraphical user interface\n\nBitcoin Core comes with a graphical user interface (GUI). This appendix\nmainly deals with the command-line interface bitcoin-cli for\ncontrolling and querying your running bitcoind. But if you want to use\nBitcoin Core as a Bitcoin wallet (and not just as a full node), it can\nbe useful to familiarize yourself with the GUI version. The GUI version\nof Bitcoin Core lets you perform most common tasks expected from a\nBitcoin wallet, but to access Bitcoin Core’s full set of features,\nyou’ll need to use bitcoin-cli.\n\n\nTo use the GUI version of Bitcoin Core, you need to stop the current\nnode and start the GUI version, called bitcoin-qt:\n\n\n\nWhy -qt?\n\nThe Bitcoin Core GUI is built using a GUI programming library called QT.\nHence the name, bitcoin-qt.\n\n\n\n\n\n$ ./bitcoin-cli stop\nBitcoin server stopping\n$ ./bitcoin-qt &\n\n\n\nIf bitcoind didn’t have time to finish shutting down before you\nstarted bitcoin-qt, you’ll get an error message from bitcoin-qt. If\nso, click OK and try running ./bitcoin-qt & again in a few seconds.\n\n\nbitcoin-qt uses the same data directory, ~/.bitcoin/, as bitcoind,\nwhich means bitcoin-qt will use the already downloaded and verified\nblockchain and the same wallet as bitcoind. It’s just the user\ninterface that differs.\n\n\nBy default, bitcoin-qt won’t start the web server to accept JSON-RPC\nrequests as bitcoind does. To use bitcoin-cli with bitcoin-qt,\nstart bitcoin-qt as follows, instead:\n\n\n\n$ ./bitcoin-qt -server &\n\n\n\n\nGetting to know bitcoin-cli\n\nYou’ve started Bitcoin Core in the background by running\n\n\n\n $ ./bitcoind -daemon\n\n\n\nThe most important command to know is the help command. Run it without\nany arguments to get a list of all available commands:\n\n\n\n$ ./bitcoin-cli help\n\n\n\nYou’ll get a long list of commands grouped by subject—for example,\nBlockchain, Mining, and Wallet. Some commands are\nself-explanatory, but if you want to know more about a specific command,\nyou can run help with the command name as an argument. For example:\n\n\n\n$ ./bitcoin-cli help getblockhash\ngetblockhash height\n\nReturns hash of block in best-block-chain at height provided.\n\nArguments:\n1. height         (numeric, required) The height index\n\nResult:\n"hash"         (string) The block hash\n\nExamples:\n> bitcoin-cli getblockhash 1000\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getblockhash", "params": [1000] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/\n\n\n\nYou can invoke bitcoin-cli in two ways:\n\n\n\n\nUsing positional arguments—The meanings of the arguments are based\non their relative positions: for example, ./bitcoin-cli getblockhash\n1000. This is the most common way to use bitcoin-cli.\n\n\nUsing named arguments—The arguments are named on the command line:\nfor example, ./bitcoin-cli -named getblockhash height=1000. This is\nsometimes useful when the command takes optional arguments and you\nwant to specify the second optional argument but not the first. You’ll\nsee examples later.\n\n\n\n\n\nGetting to work\n\nLet’s create an encrypted wallet and back it up. You’ll then receive\nsome bitcoins and pass that money on to another address while dissecting\nthe transactions for details—all using bitcoin-cli.\n\n\nCreating an encrypted wallet\n\nWhen bitcoind (or bitcoin-qt) starts, it will automatically create a\nwallet for you and store it in the file ~/.bitcoin/wallet.dat. But this\nwallet isn’t encrypted, which means its private keys and its seed, used\nto derive key pairs as discussed in [ch04], are stored in the clear\non your hard drive. Let’s look at some data for such a wallet:\n\n\n\n$ ./bitcoin-cli getwalletinfo\n{\n  "walletname": "",\n  "walletversion": 169900,\n  "balance": 0.00000000,\n  "unconfirmed_balance": 0.00000000,\n  "immature_balance": 0.00000000,\n  "txcount": 0,\n  "keypoololdest": 1541941001,\n  "keypoolsize": 1000,\n  "keypoolsize_hd_internal": 1000,\n  "paytxfee": 0.00000000,\n  "hdseedid": "bb989ad4e23f7bb713eab0a272eaef3d4857f5e3",\n  "hdmasterkeyid": "bb989ad4e23f7bb713eab0a272eaef3d4857f5e3",\n  "private_keys_enabled": true\n}\n\n\n\nThe output from the getwalletinfo command shows various information\nabout the wallet currently being used. This automatically created wallet\nis unnamed, which is why walletname is empty.\n\n\nbalance is how many confirmed bitcoins you have (including unconfirmed\noutgoing transactions), and unconfirmed_balance is the sum of incoming\nunconfirmed payments. immature_balance is relevant only for miners and\ndenotes the number of newly created bitcoins, which can’t be spent until\nafter 100 blocks passed. Refer to the help section on getwalletinfo\nfor more details about the output.\n\n\nTo create an encrypted wallet, you need to create a new wallet using\nthe command encryptwallet:\n\n\n\n$ ./bitcoin-cli -stdin encryptwallet\nsecretpassword<ENTER>\n<CTRL-D>\nwallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup.\n\n\n\nThis command creates a new encrypted wallet. The -stdin option is used\nto read the password argument from standard input, which in this case\nmeans you type the password in your terminal window after starting the\ncommand. End your input by pressing Enter and Ctrl-D. The reason for\nusing -stdin is that you don’t want the password to be written in the\ncommand itself, because most shell interpreters, such as bash, keep a\nhistory of commands in a file. The -stdin option ensures that the\npassword doesn’t end up in any such history files.\n\n\nIt’s important to create a new encrypted wallet instead of just\nencrypting the existing wallet, because the old wallet might already\nhave been compromised on your hard drive. As noted by the output,\nbitcoind has stopped. Bitcoin Core can’t currently switch to a new\nwallet file while running.\n\n\nLet’s start bitcoind again and look at the wallet. You’ll see\nsomething similar to this:\n\n\n\n$ ./bitcoind -daemon\nBitcoin server starting\n$ ./bitcoin-cli getwalletinfo\n{\n  "walletname": "",\n  "walletversion": 169900,\n  "balance": 0.00000000,\n  "unconfirmed_balance": 0.00000000,\n  "immature_balance": 0.00000000,\n  "txcount": 0,\n  "keypoololdest": 1541941063,\n  "keypoolsize": 1000,\n  "keypoolsize_hd_internal": 1000,\n  "unlocked_until": 0,\n  "paytxfee": 0.00000000,\n  "hdseedid": "590ec0fa4cec43d9179e5b6f7b2cdefaa35ed282",\n  "hdmasterkeyid": "590ec0fa4cec43d9179e5b6f7b2cdefaa35ed282",\n  "private_keys_enabled": true\n}\n\n\n\nYour old, unencrypted wallet.dat has been overwritten by the new,\nencrypted wallet.dat. For safety, however, your old seed is kept in the\nnew encrypted wallet, in case you had actual funds in the old wallet or\naccidentally receive funds to that old wallet in the future. The\nunlocked_until value of 0 means your private keys are encrypted with\nthe password you entered when you encrypted your wallet. From now on,\nyou need to decrypt your private keys to access them. You’ll do that\nwhen you send bitcoin later.\n\n\n\nBacking up the wallet\n\nYou’ve created an encrypted wallet, and before you start using it, you\nneed to back it up. In [ch04], we talked about mnemonic sentences, as\ndefined in BIP39, which made backing up hierarchical deterministic (HD)\nwallet seeds simple. But this feature is not implemented in Bitcoin\nCore, for a few reasons—mainly, that the mnemonic sentence lacks\ninformation about the following:\n\n\n\n\nThe version of the seed format.\n\n\nThe birthday, which is when the seed was created. Without a\nbirthday, you have to scan the entire blockchain to find your old\ntransactions. With a birthday, you only have to scan the blockchain from\nthe birthday onward.\n\n\nThe derivation paths to use for restoration. This is somewhat remedied\nby using standard derivation paths, but not all wallets implement the\nstandard.\n\n\nOther arbitrary metadata, such as labels on addresses.\n\n\n\n\nTo back up your Bitcoin Core wallet, you need to make a copy of the\nwallet.dat file. Be careful not to copy the file using your operating\nsystem’s copy facilities while bitcoind or bitcoin-qt is running. If\nyou do this, your backup might be in an inconsistent state because\nbitcoind might be writing data to it while you copy. To make sure you\nget a consistent copy of the file while Bitcoin Core is running, run the\nfollowing command:\n\n\n\n$ ./bitcoin-cli backupwallet ~/walletbackup.dat\n\n\n\nThis will instruct bitcoind to save a copy of the wallet file to\nwalletbackup.dat in your home directory (you can change the name and\npath of the file to anything you like). The backup file will be an exact\ncopy of the original wallet.dat file. Move the walletbackup.dat file to\na safe place—for example, a USB memory stick in a bank safe-deposit box\nor on a computer at your brother’s apartment.\n\n\n\nReceiving money\n\nYou’ve created an encrypted, backed-up wallet. Great! Let’s put some\nbitcoins into it. To do this, you need a Bitcoin address to receive the\nbitcoins to, so let’s get one:\n\n\n\n$ ./bitcoin-cli -named getnewaddress address_type=bech32\nbc1q2r9mql4mkz3z7yfxvef76yxjd637r429620j75\n\n\n\nThis command creates a bech32 p2wpkh address for you. If you prefer\nanother type of address, you can change bech32 to legacy to get a\np2pkh address or to p2sh-segwit to get a p2wpkh nested in p2sh\naddress. Head back to the [recap-of-payment-types] to refresh your\nmemory on the different payment and address types.\n\n\nNow, let’s send bitcoin to that address. Be careful not to send money to\nthe address printed in this book (although I’ll happily accept it), but\nrather to an address you generate yourself with your own full node\nwallet.\n\n\nThis raises the question of how to get bitcoins to send to your\nwallet. You can get bitcoins in several ways:\n\n\n\nOn the web\n\nVisit [web-getting-started] to find out more about how to get\nbitcoins where you live.\n\n\n\n\n\n\nBuy bitcoins on an exchange.\n\n\nAsk friends who have bitcoins if they can give or sell you some.\n\n\nEarn bitcoins as payment for your labor.\n\n\nMine bitcoins.\n\n\n\n\nI’ll leave it up to you how you obtain bitcoins and assume that you\nsomehow will get bitcoins into the address you created previously.\n\n\nI made a payment to my new address and then checked my wallet:\n\n\n\n$ ./bitcoin-cli getunconfirmedbalance\n0.00500000\n\n\n\nThis shows a pending incoming payment of 5 mBTC (0.005 BTC). I now have\nto wait until it’s confirmed in the blockchain. Meanwhile, you can dig\ninto the transaction by running the listtransactions command. Here are\nmy results:\n\n\n\n$ ./bitcoin-cli listtransactions\n[\n  {\n    "address": "bc1q2r9mql4mkz3z7yfxvef76yxjd637r429620j75",\n    "category": "receive",\n    "amount": 0.00500000,\n    "label": "",\n    "vout": 1,\n    "confirmations": 0,\n    "trusted": false,\n    "txid": "ebfd0d14c2ea74ce408d01d5ea79636b8dee88fe06625f5d4842d2a0ba45c195",\n    "walletconflicts": [\n    ],\n    "time": 1541941483,\n    "timereceived": 1541941483,\n    "bip125-replaceable": "yes"\n  }\n]\n\n\n\nThis transaction has 0 confirmations and pays 0.005 BTC. You can also\nsee that this transaction’s txid is ebfd0d14…ba45c195.\n\n\nLet’s take a closer look at the transaction using the command\ngetrawtransaction:\n\n\n\n$ ./bitcoin-cli getrawtransaction \\\n    ebfd0d14c2ea74ce408d01d5ea79636b8dee88fe06625f5d4842d2a0ba45c195 1\n{\n  "txid": "ebfd0d14c2ea74ce408d01d5ea79636b8dee88fe06625f5d4842d2a0ba45c195",\n  "hash": "ebfd0d14c2ea74ce408d01d5ea79636b8dee88fe06625f5d4842d2a0ba45c195",\n  "version": 1,\n  "size": 223,\n  "vsize": 223,\n  "weight": 892,\n  "locktime": 549655,\n  "vin": [\n    {\n      "txid": "8a4023dbcf57dc7f51d368606055e47636fc625a512d3481352a1eec909ab22f",\n      "vout": 0,\n      "scriptSig": {\n        "asm": "3045022100cc095e6b7c0d4c42a1741371cfdda4f1b518590f1af0915578d3966fee7e34ea02205fc1e976edcf4fe62f16035a5389c661844f7189a9eb45adf59e061ac8cc6fd3[ALL] 030ace35cc192cedfe2a730244945f1699ea2f6b7ee77c65c83a2d7a37440e3dae",\n        "hex": "483045022100cc095e6b7c0d4c42a1741371cfdda4f1b518590f1af0915578d3966fee7e34ea02205fc1e976edcf4fe62f16035a5389c661844f7189a9eb45adf59e061ac8cc6fd30121030ace35cc192cedfe2a730244945f1699ea2f6b7ee77c65c83a2d7a37440e3dae"\n      },\n      "sequence": 4294967293\n    }\n  ],\n  "vout": [\n    {\n      "value": 0.00313955,\n      "n": 0,\n      "scriptPubKey": {\n        "asm": "OP_DUP OP_HASH160 6da68d8f89dced72d4339959c94a4fcc872fa089 OP_EQUALVERIFY OP_CHECKSIG",\n        "hex": "76a9146da68d8f89dced72d4339959c94a4fcc872fa08988ac",\n        "reqSigs": 1,\n        "type": "pubkeyhash",\n        "addresses": [\n          "1AznBDM2ZfjYNoRw3DLSR9NL2cwwqDHJY6"\n        ]\n      }\n    },\n    {\n      "value": 0.00500000,\n      "n": 1,\n      "scriptPubKey": {\n        "asm": "0 50cbb07ebbb0a22f11266653ed10d26ea3e1d545",\n        "hex": "001450cbb07ebbb0a22f11266653ed10d26ea3e1d545",\n        "reqSigs": 1,\n        "type": "witness_v0_keyhash",\n        "addresses": [\n          "bc1q2r9mql4mkz3z7yfxvef76yxjd637r429620j75"\n        ]\n      }\n    }\n  ],\n  "hex": "01000000012fb29a90ec1e2a3581342d515a62fc3676e455606068d3517fdc57cfdb23408a000000006b483045022100cc095e6b7c0d4c42a1741371cfdda4f1b518590f1af0915578d3966fee7e34ea02205fc1e976edcf4fe62f16035a5389c661844f7189a9eb45adf59e061ac8cc6fd30121030ace35cc192cedfe2a730244945f1699ea2f6b7ee77c65c83a2d7a37440e3daefdffffff0263ca0400000000001976a9146da68d8f89dced72d4339959c94a4fcc872fa08988ac20a107000000000016001450cbb07ebbb0a22f11266653ed10d26ea3e1d54517630800"\n}\n\n\n\nThis command prints the entire transaction in a human-readable (well, at\nleast developer-readable) form. Let’s start from the top and go through\nthe most relevant parts of this transaction. The txid is the\ntransaction id. The hash is the double SHA256 hash of the whole\ntransaction, including the witness. For non-segwit transactions, hash\nis equal to txid.\n\n\nThe size of the transaction is 223 bytes, and vsize (the virtual\nsize) is also 223 vbytes; vsize is the transaction’s number of weight\nunits (892) divided by 4, so the virtual size of a non-segwit\ntransaction (which this is, because it only spends non-segwit outputs)\nis equal to its actual size.\n\n\nThe locktime of this transaction is set to 549655, which was the\nheight of the strongest chain at the time of the transaction’s creation.\nThus the transaction can’t be mined until block height 549656. This\nreduces the attractiveness of an attack in which a miner deliberately\ntries to reorg the blockchain and include the transaction into a block\nheight that’s already been mined.\n\n\nNext comes the list of inputs. This transaction has a single input that\nspends output at index 0 (vout) of the transaction with txid\n8a4023db…909ab22f. The input spends a p2pkh output.\n\n\nThe input’s sequence number is 4294967293, which is fffffffd in hex\ncode. This means the lock time is enabled (≤fffffffe) and the\ntransaction is replaceable (≤fffffffd) according to BIP125. The\nmeaning of the sequence number was summarized in [tab0901].\n\n\nAfter the list of inputs comes the list of transaction outputs. This\ntransaction has a list of two outputs. The first pays 0.00313955 BTC to\na p2pkh address you haven’t seen before. This is probably a change\noutput. The second output sends 0.005 BTC to the p2wpkh address created\nearlier.\n\n\nLet’s see if the transaction is confirmed yet. You can check, for\nexample, with getbalance. In my case, if it shows 0.00500000, then\nthe transaction has confirmed:\n\n\n\n$ ./bitcoin-cli getbalance\n0.00500000\n\n\n\nCool, the money is confirmed! Let’s move on.\n\n\n\nSending money\n\nYou’ve received some bitcoins. Now, you want to send bitcoins to someone\nelse. To send bitcoins, you can use the sendtoaddress command. You\nneed to make a few decisions first:\n\n\n\n\nAddress to send to\n\n\nHow much money to send: 0.001 BTC\n\n\nHow urgent the transaction is: not urgent (you’ll be happy if it\nconfirms within 20 blocks)\n\n\n\n\nI’ll send the bitcoins to address bc1qu456…5t7uulqm, but you should\nget another address to send to. If you have no other wallet, you can\ncreate a new address in Bitcoin Core to send to just for experimental\npurposes. I’ve obfuscated my address below so that you don’t send to my\naddress by mistake.\n\n\n\n$ ./bitcoin-cli -named sendtoaddress \\\n    address="bc1qu456w7a5mawlgXXXXXXu03wp8wc7d65t7uulqm" \\\n    amount=0.001 conf_target=20 estimate_mode=ECONOMICAL\nerror code: -13\nerror message:\nError: Please enter the wallet passphrase with walletpassphrase first.\n\n\n\nOh, dear! An error. As indicated by the error message, the private keys\nare encrypted in the wallet.dat file. Bitcoin Core needs the private\nkeys to sign the transaction. To make the private keys accessible, you\nneed to decrypt them. You do this using the walletpassphrase command\nwith the -stdin option to prevent the passphrase from being stored by\nyour command-line interpreter, such as bash:\n\n\n\n$ ./bitcoin-cli -stdin walletpassphrase\nsecretpassword<ENTER>\n300<ENTER>\n<CTRL-D>\n\n\n\nThe last argument, 300, is the number of seconds you should keep the\nwallet unlocked. After 300 seconds, the wallet will be automatically\nlocked again in case you forget to lock it manually. Let’s retry the\nsendtoaddress command:\n\n\n\n$ ./bitcoin-cli -named sendtoaddress \\\n    address="bc1qu456w7a5mawlgXXXXXXu03wp8wc7d65t7uulqm" \\\n    amount=0.001 conf_target=20 estimate_mode=ECONOMICAL\na13bcb16d8f41851cab8e939c017f1e05cc3e2a3c7735bf72f3dc5ef4a5893a2\n\n\n\nThe command output a txid for the newly created transaction. This means\nit went well. You can relock the wallet using the walletlock command:\n\n\n\n$ ./bitcoin-cli walletlock\n\n\n\nThe wallet is now locked. I’ll list my transactions again:\n\n\n\n$ ./bitcoin-cli listtransactions\n[\n  {\n    "address": "bc1q2r9mql4mkz3z7yfxvef76yxjd637r429620j75",\n    "category": "receive",\n    "amount": 0.00500000,\n    "label": "",\n    "vout": 1,\n    "confirmations": 1,\n    "blockhash": "000000000000000000240eec03ac7499805b0f3df34a7d5005670f3a8fa836ca",\n    "blockindex": 311,\n    "blocktime": 1541946325,\n    "txid": "ebfd0d14c2ea74ce408d01d5ea79636b8dee88fe06625f5d4842d2a0ba45c195",\n    "walletconflicts": [\n    ],\n    "time": 1541941483,\n    "timereceived": 1541941483,\n    "bip125-replaceable": "no"\n  },\n  {\n    "address": "bc1qu456w7a5mawlg35y00xu03wp8wc7d65t7uulqm",\n    "category": "send",\n    "amount": -0.00100000,\n    "vout": 1,\n    "fee": -0.00000141,\n    "confirmations": 0,\n    "trusted": true,\n    "txid": "a13bcb16d8f41851cab8e939c017f1e05cc3e2a3c7735bf72f3dc5ef4a5893a2",\n    "walletconflicts": [\n    ],\n    "time": 1541946631,\n    "timereceived": 1541946631,\n    "bip125-replaceable": "no",\n    "abandoned": false\n  }\n]\n\n\n\nThe new transaction is the last one of the two. It isn’t yet confirmed,\nas indicated by "confirmations": 0. The fee paid was 141 satoshis.\nLet’s look into this transaction in detail:\n\n\n\n$ ./bitcoin-cli getrawtransaction \\\n    a13bcb16d8f41851cab8e939c017f1e05cc3e2a3c7735bf72f3dc5ef4a5893a2 1\n{\n  "txid": "a13bcb16d8f41851cab8e939c017f1e05cc3e2a3c7735bf72f3dc5ef4a5893a2",\n  "hash": "554a3a3e57dcd07185414d981af5fd272515d7f2159cf9ed9808d52b7d852ead",\n  "version": 2,\n  "size": 222,\n  "vsize": 141,\n  "weight": 561,\n  "locktime": 549665,\n  "vin": [\n    {\n      "txid": "ebfd0d14c2ea74ce408d01d5ea79636b8dee88fe06625f5d4842d2a0ba45c195",\n      "vout": 1,\n      "scriptSig": {\n        "asm": "",\n        "hex": ""\n      },\n      "txinwitness": [\n        "30440220212043afeaf70a97ea0aa09a15749ab94e09c6fad427677610286666a3decf0b022076818b2b2dc64b1599fd6b39bb8c249efbf4c546e334bcd7e1874115da4dfd0c01",\n        "020127d82280a939add393ddbb1b8d08f0371fffbde776874cd69740b59e098866"\n      ],\n      "sequence": 4294967294\n    }\n  ],\n  "vout": [\n    {\n      "value": 0.00399859,\n      "n": 0,\n      "scriptPubKey": {\n        "asm": "0 4bf041f271bd94385d6bcac8487adf6c9a862d10",\n        "hex": "00144bf041f271bd94385d6bcac8487adf6c9a862d10",\n        "reqSigs": 1,\n        "type": "witness_v0_keyhash",\n        "addresses": [\n          "bc1qf0cyrun3hk2rshttetyys7kldjdgvtgs6ymhzz"\n        ]\n      }\n    },\n    {\n      "value": 0.00100000,\n      "n": 1,\n      "scriptPubKey": {\n        "asm": "0 e569a77bb4df5df446847bcdc7c5c13bb1e6ea8b",\n        "hex": "0014e569a77bb4df5df446847bcdc7c5c13bb1e6ea8b",\n        "reqSigs": 1,\n        "type": "witness_v0_keyhash",\n        "addresses": [\n          "bc1qu456w7a5mawlg35y00xu03wp8wc7d65t7uulqm"\n        ]\n      }\n    }\n  ],\n  "hex": "0200000000010195c145baa0d242485d5f6206fe88ee8d6b6379ead5018d40ce74eac2140dfdeb0100000000feffffff02f3190600000000001600144bf041f271bd94385d6bcac8487adf6c9a862d10a086010000000000160014e569a77bb4df5df446847bcdc7c5c13bb1e6ea8b024730440220212043afeaf70a97ea0aa09a15749ab94e09c6fad427677610286666a3decf0b022076818b2b2dc64b1599fd6b39bb8c249efbf4c546e334bcd7e1874115da4dfd0c0121020127d82280a939add393ddbb1b8d08f0371fffbde776874cd69740b59e09886621630800"\n}\n\n\n\nThe first thing to note is that txid and hash differ. That’s because\nthis is a segwit transaction. As you may recall from [ch10], the\nwitness isn’t included in the txid—that’s how you avoid transaction\nmalleability—but the hash in the output includes it. Note that size\nand vsize differ, too, which is expected from a segwit transaction.\nThe fee was 141 satoshis, as shown by the listtransactions command,\nand the vsize was 141 vbytes. The fee rate was thus selected by\nBitcoin Core to be 1 sat/vbyte.\n\n\nThe transaction has a single input that spends output 1 of transaction\nebfd0d14…ba45c195. You should recognize this output from the section\nwhere I paid 0.005 BTC to my Bitcoin Core wallet. Because that output\nwas a p2wpkh output, the signature script (scriptSig) is empty, and\nthe txinwitness contains the signature and pubkey.\n\n\nThe sequence number of the input is 4294967294, which equals fffffffe.\nThis means the transaction has lock time enabled but isn’t replaceable\nusing BIP125 (opt-in replace-by-fee).\n\n\nI have two outputs. The first is the change of 0.00399859 BTC back to an\naddress I own. The other is the actual payment of 0.001 BTC. Let’s check\nthe balance again:\n\n\n\n ./bitcoin-cli getbalance\n0.00399859\n\n\n\nYep, there it is. I didn’t have to wait for confirmation to see the\nnew balance, because getbalance always includes my own outgoing\nunconfirmed transactions. I’ve spent my only UTXO (of 0.005 BTC) and\ncreated a new UTXO of 0.00399859 to myself:\n\n\n\nSpent:   0.005\nPay:    -0.001\nFee:    -0.00000141\n===================\nChange:  0.00399859\n\n\n\nIt sums up perfectly.\n\n\nI’ve shown a few commands you can use to wing your Bitcoin Core node,\nbut there’s a lot more to it. Explore ./bitcoin-cli help to find out\nmore.\n\n\n\n\n', 'body_type': 'html', 'authors': ['Kalle Rosenbaum'], 'domain': 'https://github.com', 'url': 'https://github.com/kallerosenbaum/grokkingbitcoin/blob/master/app1-bitcoin-cli.adoc', 'created_at': '2023-06-29T13:58:26.754126'}}, {'_index': 'bitcoin-search-scrapy-23', '_id': 'lTfSBokBCZBMBhpp-9Wj', '_score': 1.0, '_ignored': ['body.keyword', 'body_formatted.keyword'], '_source': {'id': 'grokkingbtc-c4c32412-60ac-4d4d-bf77-2feb120f3a90', 'title': '[Grokking Bitcoin] Addresses', 'body_formatted': '<article><div>\n<h2><a><svg><path></path></svg></a>Addresses</h2>\n<div>\n<div>\n<p>This chapter covers</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Basic privacy</p>\n</li>\n<li>\n<p>Replacing names with public key hashes</p>\n</li>\n<li>\n<p>Protecting against expensive typing errors</p>\n</li>\n</ul>\n</div>\n<div>\n<p>By the time you reach the end of this chapter, the cookie token\nspreadsheet will no longer have personal names—you’ll be replacing\nthese names with hashes of public keys. This is useful from a privacy\nperspective. No one can easily see who’s paying whom, making it harder\nfor others to extract information from the spreadsheet and see how\nmany cookies any of your coworkers eat. Lisa also finds this useful\nbecause she doesn’t have to maintain a table of names and public keys.</p>\n</div>\n<div>\n<p>When switching to public key hashes in the spreadsheet, coworkers will\nno longer use names in their emails to Lisa. They will instead use\nstrings of hex code representing public key hashes. This means it will\nbe easy to make typing errors. If you make a typing error, your money\nmay end up digitally burned!</p>\n</div>\n<div>\n<p>Some coworkers invent cookie token addresses (Bitcoin addresses) that\nprotect them from losing money due to typing errors\n(<a>Cookie token addresses are exactly the same as Bitcoin addresses. They’re used mainly by wallet software.</a>). Cookie token addresses are used between users to pay\neach other, pretty much like an email address, but they aren’t used in\nthe spreadsheet.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 1. Cookie token addresses are exactly the same as Bitcoin addresses. They’re used mainly by wallet software.</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Cookie-eating habits disclosed</h3>\n<div>\n<div>\n<div>Acme Insurances</div>\n<div>\n<p>This highly unethical insurance company will make serious attempts to\nspy on your habits, to “adjust” your premium.</p>\n</div>\n</div>\n</div>\n<div>\n<p>You and many of your coworkers have health insurance with Acme\nInsurances. Acme has persuaded John to give it a copy of the\nspreadsheet. Acme figures it can adjust premiums or hold workers’\ncookie-eating habits (<a>Acme Insurances keeps an eye on Chloe’s cookie-eating habits.</a>) against them in an eventual\ninsurance dispute.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 2. Acme Insurances keeps an eye on Chloe’s cookie-eating habits.</div>\n</div>\n<div>\n<p>Another disturbing fact about the spreadsheet is that every coworker\ncan easily look up other coworkers’ balances, as well as their\ncookie-eating habits.</p>\n</div>\n<div>\n<p>The coworkers have asked Lisa to come up with a solution to these\nproblems. Otherwise, they’ll stop using the spreadsheet.</p>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Replacing names with public keys</h3>\n<div>\n<div>\n<div>\n<p><span><a><img/></a></span></p>\n</div>\n</div>\n</div>\n<div>\n<p>Lisa has kept the table of names and public keys updated at all times\nsince the coworkers started using digital signatures. She’s sick of\ndoing this, so she comes up with an idea that will benefit both her and\nher coworkers: Lisa will replace all names in the spreadsheet with their\nrespective public keys (<a>Replacing names with public keys. The spreadsheet is now more unreadable, which is good from a privacy perspective.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 3. Replacing names with public keys. The spreadsheet is now more unreadable, which is good from a privacy perspective.</div>\n</div>\n<div>\n<p>It’s now hard to see how many cookies Chloe has eaten without knowing\nher public key. If Acme Insurances receives this new spreadsheet, it\nwon’t be able to see who the senders and recipients<br/>\nare. It will see only the sender and recipient public keys of each\npayment.</p>\n</div>\n<div>\n<p>Lisa can now delete her cumbersome table of names and public keys. But\nwhen she does this, users should no longer use names when making\npayments. They must instead use the sender’s public key and the\nrecipient’s public key (<a>New-style payment using public keys instead of names</a>).</p>\n</div>\n<div>\n<div>\n<div>Old style</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 4. New-style payment using public keys instead of names</div>\n</div>\n<div>\n<p>The email to Lisa contains a few vital parts:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>A message containing the</p>\n<div>\n<ul>\n<li>\n<p>Amount</p>\n</li>\n<li>\n<p>Sender public key</p>\n</li>\n<li>\n<p>Recipient public key</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>A signature made with the sender’s private key</p>\n</li>\n</ul>\n</div>\n<div>\n<p>The essential difference is that the payment is now pseudonymous:\nnames are replaced with the corresponding public keys. Otherwise, the\npayment looks the same as before.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>New payment process</h4>\n<div>\n<p>Suppose a new coworker just started at the company. Her name is Faiza.\nThe company wants to send her 100 CT as a welcome gift. How can the\ncompany send 100 CT to Faiza?</p>\n</div>\n<div>\n<p>First, the company needs the recipient’s—Faiza’s—public key. Faiza\nhasn’t used cookie tokens yet, so she needs to create a key pair and\ngive the public key to the sender—the company—as <a>Faiza creates her public key and gives it to the company. The company creates a payment with Faiza’s public key as the recipient.</a> shows.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 5. Faiza creates her public key and gives it to the company. The company creates a payment with Faiza’s public key as the recipient.</div>\n</div>\n<div>\n<p>Faiza creates a private and a public key, following the same process\ndescribed in <a>[improving-cookie-token-security]</a>, but she doesn’t give\nher public key to Lisa. Now that Lisa doesn’t have the table of names\nand public keys, there’s no longer any point in giving her the\npublic key. She doesn’t need it. Instead, Faiza gives the public key\nto the entity that wants to pay her cookie tokens—the company.</p>\n</div>\n<div>\n<p>The company creates a message asking Lisa to move 100 CT from\n<code>037e944a…36de9496</code> to <code>029a726c…ad8f436d</code>. It then digitally signs\nthe message and sends it to Lisa. Lisa uses</p>\n</div>\n<div>\n<ul>\n<li>\n<p>The message</p>\n</li>\n<li>\n<p>The sender’s public key</p>\n</li>\n<li>\n<p>The signature</p>\n</li>\n</ul>\n</div>\n<div>\n<div>\n<div>Lisa In Bitcoin</div>\n<div>\n<p>Lisa is performing the same duties with cookie token payments that a\nBitcoin miner would do with Bitcoin payments.</p>\n</div>\n</div>\n</div>\n<div>\n<p>to verify that the message is signed with the private key belonging to\nthe sender’s public key. She also verifies that the sender’s public key\nhas enough funds in the spreadsheet. She does this the same way she did\nwhen the spreadsheet contained names—she searches for the sender’s\npublic key and calculates the balance.</p>\n</div>\n<div>\n<p>Lisa has never seen the recipient’s public key before, but she doesn’t\ncare. She cares only that the sender has the money to spend and that the\nmessage is correctly signed. She’ll write into the spreadsheet’s\nrecipient column whatever the message asks her to write.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Faiza sees the new row with her public key in the To column. It gives\nher a warm, fuzzy feeling. She can now spend her cookie tokens as she\npleases. Faiza didn’t have to bother Lisa with her public key, saving\nLisa a lot of work.</p>\n</div>\n<div>\n<p>Let’s summarize what’s happened so far:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Names have been replaced with public keys in the spreadsheet.</p>\n</li>\n<li>\n<p>Lisa has thrown away the table of names and public keys.</p>\n</li>\n<li>\n<p>Payments are made using public keys instead of names to denote sender\nand recipient.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>These changes have improved privacy and simplified Lisa’s work. At the\nend of this chapter, we’ll discuss more about how to further improve\nprivacy.</p>\n</div>\n<div>\n<p>The email to Lisa in this example probably reveals, <em>to Lisa</em>, who the\nsender is (the company, in this case) because of the From field of the\nemail. For now, we can assume Lisa doesn’t reveal or use this personal\ninformation in any way. We use email in this example in place of\nBitcoin’s peer-to-peer network. The Bitcoin network, discussed in detail\nin <a>[ch08]</a>, doesn’t use any personal information.</p>\n</div>\n<div>\n<p>Please take a moment to think about what Acme Insurances can now figure\nout from the spreadsheet. What information can it get if it figures out\nthe name of the sender or recipient of <em>one</em> payment? It will be able to\nidentify all payments that person has made.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Shortening the public key</h3>\n<div>\n<p>Using public keys in the spreadsheet improved privacy, but such keys\ntake up a lot of space compared to names. The name “John” takes 4 bytes\nin the spreadsheet, whereas a public key takes 33 bytes. Keeping the\nspreadsheet as small as possible is important because a smaller\nspreadsheet means faster downloading for coworkers wanting to check\ntheir balance; it also takes less space on Lisa’s hard drive.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Hashing the public key to 20 bytes</h4>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Among the coworkers, some developers think they can replace 33-byte\npublic keys with something shorter while still preserving enough\nsecurity. They suggest replacing each public key in the cookie token\nspreadsheet with a cryptographic hash of the public key. This shortens\nsenders and recipients in the spreadsheet but also protects users’\nmoney in the event of a flaw in the public key derivation function, as\nwe’ll see later. The hashing isn’t made with a single cryptographic\nhash function but with two different cryptographic hash functions, as\n<a>Replacing the public keys with the RIPEMD160 hash of the SHA256 hash of the public key</a> illustrates. We’ll discuss the reason for using two hash\nfunctions in the next section.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 6. Replacing the public keys with the RIPEMD160 hash of the SHA256 hash of the public key</div>\n</div>\n<div>\n<p>The public key is first hashed with SHA256, which you should be\nfamiliar with from the previous chapter. The output of this\ncryptographic hash function is then hashed with RIPEMD160, a\ncryptographic hash function that outputs a 160-bit (20-byte)\nnumber. We call this final hash the <em>public key hash</em> (PKH). All\npublic keys in the spreadsheet are replaced with their respective\nPKHs.</p>\n</div>\n<div>\n<div>\n<div>Old style payment</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>The payment process now differs from when Faiza received her 100 CT from\nthe company. Suppose John wants to buy a cookie (<a>John buys a cookie. The sender is still a public key, but the recipient is a PKH instead of public key. Lisa needs to create the PKH from the sender’s public key to verify the balance and execute the payment.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 7. John buys a cookie. The sender is still a public key, but the recipient is a PKH instead of public key. Lisa needs to create the PKH from the sender’s public key to verify the balance and execute the payment.</div>\n</div>\n<div>\n<div>\n<div>p2pkh</div>\n<div>\n<p>Most payments in Bitcoin are made with a PKH as the recipient. This\ntype is often called <em>pay-to-public-key-hash</em> (p2pkh), but other\npayment types exist as well.</p>\n</div>\n</div>\n</div>\n<div>\n<p>First, the message to Lisa is changed a bit. John must use the cafe’s\nPKH—which was previously a public key—as the recipient. The sender is\nstill a public key in the message because that public key is needed to\nverify the signature. Lisa doesn’t keep people’s public keys around\nanymore.</p>\n</div>\n<div>\n<p>Second, because the spreadsheet now contains PKHs, Lisa must calculate\nthe PKH from the sender’s public key to check the sender’s balance and\nbe able to enter the payment into the spreadsheet.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Why SHA256 and RIPEMD160?</h4>\n<div>\n<p>Using RIPEMD160 as the last cryptographic hash function is a deliberate\nchoice to make the PKHs shorter. Compare the output from SHA256 with the\noutput from RIPEMD160:</p>\n</div>\n<div>\n<div>\n<pre>SHA256:\n85ae273f0aa730eddf2285d3f3ab071eb29caba1e428db90e6dfbd71b8e1e918\nRIPEMD160:\n5f2613791b36f667fdb8e95608b55e3df4c5f9eb</pre>\n</div>\n</div>\n<div>\n<p>It’s a well-balanced trade-off between security and size.</p>\n</div>\n<div>\n<p>But why have two different cryptographic hash functions? We don’t\nreally know why this scheme was chosen for Bitcoin because its\ninventor, Satoshi Nakamoto, has stopped corresponding with the Bitcoin\ncommunity.  We can only speculate. Instead, let’s discuss some of the\nscheme’s properties.</p>\n</div>\n<div>\n<p>If either hash function isn’t pre-image-resistant, the other still is.\nThis means if you can calculate an input to RIPEMD160 that gives a\ncertain PKH output, you still need to pre-image attack SHA256 (with\nabout 2<sup>255</sup> guesses) to find the public key. Likewise, if you can\ncalculate an input to SHA256 that gives a certain output, you first\nneed to pre-image attack RIPEMD160 before you can use that pre-image\nto calculate the public key.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>On the other hand, if it turns out that the output set of either\ncryptographic hash function is smaller than anticipated, then the\nsecurity of the combined hash-function chain suffers. To make this\nclearer, pretend SHA256 has only 100 possible output values. You can\nsteal money from anyone by trying different random private keys and\ncalculating the corresponding PKHs. If a PKH matches your target,\nyou’ve found a private key you can steal the money with. On average,\nyou’d only have to test 50 different private keys to steal from\none PKH. This property gives the worst of both worlds: if either of\nthe two functions is weak, then the whole chain is weak. The\nprobability that any function has this flaw is small. If any such flaw\nexists, the reduction in the output set likely isn’t significant\nenough to endanger security in practice. Remember, we’ve yet to find\none single collision in any of these cryptographic hash functions.</p>\n</div>\n<div>\n<p>Another thing to note is that different organizations developed the\ntwo cryptographic hash functions. RIPEMD160 was developed at a\nEuropean university in open collaboration with a broad community of\ncryptographers. SHA256 was developed by the US National Security\nAgency (NSA). Both are considered secure, and both have been subject\nto scrutiny from a large number of people.</p>\n</div>\n<div>\n<div>\n<div>Has privacy improved?</div>\n<div>\n<p>No.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Now that we’ve strengthened the security of the cookie token\nspreadsheet, let’s think about privacy again. Has this improved privacy?\nIs it harder for Acme Insurances to figure out information about who’s\npaying whom now compared to when we used public keys in the spreadsheet?</p>\n</div>\n<div>\n<p>The answer is no. There is practically a one-to-one correspondence\nbetween the public keys and the PKHs. Using PKHs doesn’t hide personal\ninformation any more than using plain public keys.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Avoiding expensive typing errors</h3>\n<div>\n<p>When Lisa verifies a payment before executing it, she doesn’t care who\nthe recipient is or if it’s even an existing recipient. She’ll put into\nthe recipient column of the spreadsheet whatever the payer asks her to.\nShe can’t even know if a recipient is valid or not, because she no\nlonger knows everyone’s public keys.</p>\n</div>\n<div>\n<p>This is convenient for Lisa, but it can cause people to lose money if\nthey aren’t careful. Imagine once again that John wants to buy a cookie.\nThis time, he’s not careful enough when writing the message, as <a>John makes a typo in the recipient in the email to Lisa. What now?</a> shows.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 8. John makes a typo in the recipient in the email to Lisa. What now?</div>\n</div>\n<div>\n<p>He makes a typing error in the recipient PKH. The last character is <code>d</code>\nwhen it should have been <code>c</code>. What happens now?</p>\n</div>\n<div>\n<div>\n<div>Any recipient goes</div>\n<div>\n<p>There is no “wrong” recipient PKH. Lisa adds any recipient as long as\nthe signature is valid.</p>\n</div>\n</div>\n</div>\n<div>\n<p>John doesn’t notice the error and happily signs the message and sends\nthe email to Lisa. Lisa verifies the signature, which verifies fine,\nand calculates the sender’s PKH. She doesn’t care about the\nrecipient. She inserts a new row in the spreadsheet paying from\n<code>5f261379…f4c5f9eb</code> to <code>87e3d169…8393b1cd</code>.</p>\n</div>\n<div>\n<p>Then she considers herself done, moving on to other interesting tasks.\nThe cafe owner, who is searching for his PKH in the spreadsheet,\ndoesn’t see an incoming payment. John stands at the counter in the\ncafe yelling at the cafe owner that he <em>did</em> send money, so “Give me\nthe freakin’ cookie!” The cafe owner refuses. John takes a close look\nat the spreadsheet and searches for his PKH. He finds the one he just\nmade and realizes his spelling mistake.</p>\n</div>\n<div>\n<div>\n<div>\n<p><span><a><img/></a></span></p>\n</div>\n</div>\n</div>\n<div>\n<p>John has sent money to a “public key hash” for which there is no known\nprivate key. No one will ever be able to spend those 10 CT—not the\ncafe, not John, nobody. John has just digitally burned 10 CT.</p>\n</div>\n<div>\n<p>Unfortunately, this will probably happen again and again in the future\nif nothing is done to prevent it. The problem can happen at any point\nfrom when the cafe owner reads his own PKH to give to John to when\nJohn writes his message before signing it. You could argue that Lisa\ncould also make this mistake when she updates the spreadsheet, but\nshe’s so thorough that this would <em>never</em> happen. She’s just too good\nat what she’s doing. Lisa will never cause someone else’s funds to be\nburned.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Where were we?</h4>\n<div>\n<p>This chapter deals with Bitcoin addresses. To remind you where this\nall fits into Bitcoin, remember the diagram from <a>[ch01]</a>, shown again\nin <a>Bitcoin addresses</a>.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 9. Bitcoin addresses</div>\n</div>\n<div>\n<p>Toward the end of this chapter, we’ll end up with Bitcoin (cookie\ntoken) addresses. We’ve just replaced the names in the spreadsheet\nwith PKHs.  We’ll now get to <em>Bitcoin addresses</em>. A Bitcoin address\nis a <em>converted PKH</em>—that is, it’s a PKH written in a way more\nsuitable for human users and safe against spelling errors. The PKH is\nsent to Lisa (or Bitcoin nodes), but the address is what users see and\ngive to each other.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Base58check</h4>\n<div>\n<p>Among the coworkers, the security-oriented people discuss the problem\nwith typos and come up with the idea of <em>cookie token addresses</em>. A\ncookie token address is a PKH <em>encoded</em> to detect typing errors. The\nPKH can be converted back and forth between this encoding and plain\nbyte format.</p>\n</div>\n<div>\n<div>\n<div>Bitcoin addresses</div>\n<div>\n<p>Cookie token addresses are exactly the same as the most common version\nof Bitcoin addresses. Other types of Bitcoin addresses are available,\nhowever.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Suppose Faiza feels sorry for John and wants to give him 20 CT from\nher 100 CT to ease his pain. She doesn’t want to make the same mistake\nJohn did, so she asks him for his cookie token address. John creates\nthis by encoding his PKH with a function called <em>base58check</em>\n(<a>Overview of base58check encoding, which transforms a PKH into a cookie token address</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 10. Overview of base58check encoding, which transforms a PKH into a cookie token address</div>\n</div>\n<div>\n<div>\n<div>Who uses cookie token addresses?</div>\n<div>\n<p>Cookie token addresses are employed only between users to safely\ntransmit a PKH. Lisa never sees them.</p>\n</div>\n</div>\n</div>\n<div>\n<p>The result is John’s cookie token address: <code>19g6oo8f…gCenRBPD</code>. John\nhands this address to Faiza, who then makes a payment following the\nprocess in <a>Faiza makes a payment to John’s cookie token address. She decodes the address into a PKH, verifying that the address isn’t misspelled.</a>.</p>\n</div>\n<div>\n<p>The payment process changes for the payer, but nothing changes for Lisa.\nFaiza will base58check <em>decode</em> John’s address into a PKH. This decoding\nensures that no typing errors were made in the address.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 11. Faiza makes a payment to John’s cookie token address. She decodes the address into a PKH, verifying that the address isn’t misspelled.</div>\n</div>\n<div>\n<p>As mentioned previously, a PKH can be converted to an address and back\nto a PKH. It is <em>not</em> a one-way function. It’s just different ways to\n<em>represent</em> the PKH, either as a series of bytes or as an address\n(<a>The PKH can be encoded into an address and decoded back into the PKH.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 12. The PKH can be encoded into an address and decoded back into the PKH.</div>\n</div>\n<div>\n<p>The email to Lisa is exactly the same as before. Only users employ the\ncookie token address. It isn’t part of Lisa’s validation process or\nthe spreadsheet in any way.</p>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Base58check encoding</h5>\n<div>\n<p>Let’s see how this mysterious base58check encoding works\n(<a>Base58check encoding John’s PKH. A version is added to the hash, and then a checksum is created and appended to the versioned hash. Finally, the checksummed, versioned hash is base58 encoded.</a>).  First, a version is added before the PKH. The people\nwho came up with the idea of cookie token addresses wanted to make\nfuture upgrades to the address format easy. Right now, only one\nversion of cookie token addresses is available. This version is a\nsingle 0 byte.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 13. Base58check encoding John’s PKH. A version is added to the hash, and then a checksum is created and appended to the versioned hash. Finally, the checksummed, versioned hash is base58 encoded.</div>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>To detect typing errors, a <em>checksum</em> is added. This checksum is\ncalculated from the versioned PKH. To create a checksum, base58check\nhashes the versioned PKH with double SHA256. This means it’s first\nhashed with SHA256, and the resulting hash is hashed again with\nSHA256.  Take the first 4 bytes of the second hash, and let those 4\nbytes be the checksum. This checksum is then appended to the\nversioned PKH. You’ll soon see how this checksum protects users from\ntyping errors. Be patient!</p>\n</div>\n<div>\n<p>You started with a PKH of 20 bytes (40 hex characters). But now that\nyou’ve added a version and a checksum, you have 25 bytes (50 hex\ncharacters). To make up for this increase, you’ll encode the 25 bytes\nin a more compact way than hexadecimal encoding.</p>\n</div>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Using a more compact encoding</h5>\n<div>\n<p>Hex encoding is an inefficient way to represent data bytes. It\nrequires 2 characters for each byte. We use only 16 characters, where\neach character represent 4 bits, <code>0000</code> to <code>1111</code>.</p>\n</div>\n<div>\n<p>Many encoding schemes exist that use more characters to represent data.\nThe most widely known is base64, in which each character represents 6\nbits of data; to do this, the scheme needs more characters than just\nletters and digits. Base64 uses the following alphabet:</p>\n</div>\n<div>\n<div>\n<pre>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</pre>\n</div>\n</div>\n<div>\n<p>The character <code>A</code> represents the bits <code>000000</code>, <code>B</code> represents\n<code>000001</code>, and the character <code>/</code> represents <code>111111</code>. This is a nice,\neasy, compact way to represent data with human-readable\ncharacters. I’ve already used base64-encoded data several times in\nthis book to represent signatures.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>But base64 doesn’t quite fit the bill for cookie token addresses. We\nneed an encoding that doesn’t just detect typing errors when they happen\nbut minimizes the risk of making them. Notice how some characters look\nsimilar in some fonts, like <code>lI</code> (lowercase L, capital I) and <code>0O</code> (zero\nand capital O). We also need a format that users can easily copy and\npaste, meaning special characters such as <code>+</code> and <code>/</code> shouldn’t be\nallowed—they’ll prevent us from marking the whole address by\ndouble-clicking it. Removing those six characters reduces the\npossibility of typing errors. But now we have only 58 characters left,\nso we need another type of encoding.</p>\n</div>\n<div>\n<p>This new way to encode data is called <em>base58</em> because the alphabet is\nthe following 58 characters:</p>\n</div>\n<div>\n<div>\n<pre>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</pre>\n</div>\n</div>\n<div>\n<table>\n<tbody><tr>\n<td>\n<div>Warning</div>\n</td>\n<td>\nIf you feel put off by this low-level base58 mumbo jumbo, you can skip\nto <a>Base58check decoding</a> and just accept that base58 is a way to encode\nand decode data. For the rest of you, please continue. It’s fun.\n</td>\n</tr>\n</tbody></table>\n</div>\n<div>\n<p>In base64, each character represents exactly 6 bits, which makes it\nstraightforward to encode and decode data. But with base58, each\ncharacter represents slightly less than 6 bits but more than 5\nbits. We need to encode data differently.</p>\n</div>\n<div>\n<p>Let’s get back to the example in which John creates his address. He’s\njust added a version and a checksum. Now it’s time to encode the 25\nbytes into the final result: the address (<a>Encoding John’s versioned and checksummed PKH with base58. The essential part is where you divide the number by 58 and keep the remainders, which are then mapped one by one in the lookup table.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 14. Encoding John’s versioned and checksummed PKH with base58. The essential part is where you divide the number by 58 and keep the remainders, which are then mapped one by one in the lookup table.</div>\n</div>\n<div>\n<p>The overall strategy of base58 is to treat the data as a huge number\nthat you divide by 58 over and over until the quotient is 0; you keep\nthe remainders of every division. You look up each remainder in the\nlookup table and append a <code>1</code> last for each leading 0 byte in the\ninput.  The string is finally reversed, and the result is John’s\ncookie token address. Note that all cookie token addresses, not just\nJohn’s, will start with a <code>1</code>. This is because the version byte is 0,\nwhich is encoded by the character <code>1</code>.</p>\n</div>\n<div>\n<p>You can decode base58-encoded data such as John’s address back to the\noriginal input of the base58 encoding. I’ll leave this as an exercise\nfor the interested reader.</p>\n</div>\n<div>\n<p>Note that base58 encoding is nothing new. It’s a generic way to\nconvert a decimal number to any other base. You can use the same\nalgorithm to convert to base3, instead—divide by 3 instead\nof 58. Maybe you’d also like to change the lookup table to map 0 to 0,\n1 to 1, and 2 to 2 to get the characters you’re used to. For example,\nwrite 17 in base 3:</p>\n</div>\n<div>\n<div>\n\\$17=5*3+2 \\\\$\n\\$5=1*3+2 \\\\$\n\\$1=0*3+1\\$\n</div>\n</div>\n<div>\n<p>Then, look up the remainders in the lookup table (same digits as the\nones you convert), and you’ll get <code>2 2 1</code>. Reverse that to get the final\nresult: <code>1 2 2</code>. Verify that it’s correct as follows:</p>\n</div>\n<div>\n<div>\n\\$1*3^2+2*3^1+2*3^0=9+6+2=17\\$\n</div>\n</div>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Base58check decoding</h5>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>John has just created his cookie token address by base58check encoding\nhis PKH. He’s given the address to Faiza so she can send him 20 CT. Now,\nFaiza needs to write a message to Lisa. To do this, she needs John’s\nPKH. The great thing about base58check encoding is that the process can\nbe reversed so you can get the PKH from the address while simultaneously\nchecking for typing errors (<a>Base58check decoding is basically done by reversing the base58check encoding. Typing errors are detected when the checksums don’t match.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 15. Base58check decoding is basically done by reversing the base58check encoding. Typing errors are detected when the checksums don’t match.</div>\n</div>\n<div>\n<p>Faiza takes John’s cookie token address and base58 decodes it. Then,\nshe removes the checksum and uses the remaining part, the versioned\nPKH, to calculate the checksum again. The newly calculated checksum\nand the just-removed checksum must match. Otherwise, a typing error\nhas occurred, in which case Faiza won’t create the message. She’ll\nknow the address was corrupted somewhere along the way and refrain\nfrom sending an email to Lisa. She’ll verify that she entered the\naddress correctly and that John gave her the correct address to learn\nwhere it went wrong.</p>\n</div>\n<div>\n<p>How safe is the checksum? Suppose a typing error occurred in an\naddress.  What’s the probability that the checksum won’t detect the\nerror? The checksum is 4 bytes, which corresponds to 2<sup>32</sup> ≈ 4.3\nbillion values.  The chance is about 1 in 4.3 billion that base58check\nfails to detect the typing error. It’s pretty safe.</p>\n</div>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Back to privacy</h3>\n<div>\n<p>Although privacy improved when we replaced names with PKHs, the\nspreadsheet still reveals some information that Acme Insurances finds\nuseful.</p>\n</div>\n<div>\n<div>\n<div>Forensics</div>\n<div>\n<p>This technique is often used in Bitcoin—for example, during crime\ninvestigations.</p>\n</div>\n</div>\n</div>\n<div>\n<p>For example, Acme can probably figure out the cafe has the PKH\n<code>87e3d169…8393b1cc</code> because a lot of 10 CT payments have been made\nto this PKH. From this, Acme will be able to see which PKHs are making\nthe most 10 CT payments to that PKH. Let’s say Acme talks to Faiza and\nasks her for information about her recent payments. She’s made only one\npayment so far, the one to John. Faiza, unaware of why Acme is asking\nthese questions, discloses that the transaction is for John.</p>\n</div>\n<div>\n<div>\n<div>Dear John,</div>\n<div>\n<p>It has come to our attention that you live an unhealthy life. We have\ntherefore promoted you to a higher risk category. Congratulations.</p>\n</div>\n<div>\n<p>Sincerely,<br/>\nAcme Insurances</p>\n</div>\n</div>\n</div>\n<div>\n<p>A week later, John receives a letter from Acme politely informing him\nthat he’s been promoted to a higher risk category, and his insurance\npremium has been adjusted accordingly.</p>\n</div>\n<div>\n<p>Some privacy issues obviously remain. Luckily, users can create as\nmany addresses they like. For example, the cafe could create a unique\naddress for every incoming payment. And John could create a brand-new\ncookie token address the next time he accepts cookie tokens from\nFaiza.</p>\n</div>\n<div>\n<p>Using unique addresses for each payment will make it harder for Acme\nto extract information from the cookie token spreadsheet, because they\nwon’t be able to tell which payments belong to the same person.</p>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Recap</h3>\n<div>\n<p>This chapter started with replacing the names in the spreadsheet with\nusers’ respective PKHs.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n<div>\n<p>Then, we used base58check to create an address from a PKH. Let’s put the\npieces together and look at the whole cookie token address-creation\nprocess from random number generator to the address.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n<div>\n<p>Faiza makes sure no typing errors happen by base58check decoding the\naddress before signing the message.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>System changes</h4>\n<div>\n<p>The concept table (<a>Nothing new in the concept table</a>) isn’t updated in this chapter. Cookie\ntoken addresses are exactly what Bitcoin uses, so we haven’t\nintroduced any concepts that differ from Bitcoin.</p>\n</div>\n\nTable 1. Nothing new in the concept table\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Cookie Tokens</th>\n<th>Bitcoin</th>\n<th>Covered in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>1 cookie token</p></td>\n<td><p>1 bitcoin</p></td>\n<td><p><a>[ch02]</a></p></td>\n</tr>\n<tr>\n<td><p>The spreadsheet</p></td>\n<td><p>The blockchain</p></td>\n<td><p><a>[ch06]</a></p></td>\n</tr>\n<tr>\n<td><p>Email to Lisa</p></td>\n<td><p>A transaction</p></td>\n<td><p><a>[ch05]</a></p></td>\n</tr>\n<tr>\n<td><p>A row in the spreadsheet</p></td>\n<td><p>A transaction</p></td>\n<td><p><a>[ch05]</a></p></td>\n</tr>\n<tr>\n<td><p>Lisa</p></td>\n<td><p>A miner</p></td>\n<td><p><a>[ch07]</a></p></td>\n</tr>\n</tbody>\n</table>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Thanks to PKH and cookie token addresses, Lisa can ditch her table of\npublic keys. You can add PKH and addresses to your toolbox for later\nuse, and we release version 3.0 of the cookie token system\n(<a>Release notes, cookie tokens 3.0</a>).</p>\n</div>\n\nTable 2. Release notes, cookie tokens 3.0\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Version</th>\n<th>Feature</th>\n<th>How</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p><span><a><img/></a></span>3.0</p></td>\n<td><p>Safe from expensive typing errors</p></td>\n<td><p>Cookie token addresses.</p></td>\n</tr>\n<tr>\n<td><p>Privacy improvements</p></td>\n<td><p>A PKH instead of a personal name is stored in the spreadsheet.</p></td>\n</tr>\n<tr>\n<td><p>2.0</p></td>\n<td><p>Secure payments</p></td>\n<td><p>Digital signatures solve the problem with imposters.</p></td>\n</tr>\n<tr>\n<td><p>1.0</p></td>\n<td><p>Simple payment system</p></td>\n<td><p>Relies on Lisa being trustworthy and knowing everyone’s face.</p></td>\n</tr>\n<tr>\n<td><p>Finite money supply</p></td>\n<td><p>7,200 new CT are rewarded to Lisa daily; the amount halves every four years.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Exercises</h3>\n<div>\n<h4><a><svg><path></path></svg></a>Warm up</h4>\n<div>\n<ol>\n<li>\n<p>The PKH is shorter than the public key—only 160 bits. We made it\nshorter using RIPEMD160. Why do you want it to be shorter? There are\ntwo good reasons.</p>\n</li>\n<li>\n<p>Base58check encoding is used to create a cookie token (Bitcoin)\naddress from a PKH. Is it possible to reverse this process to create a\nPKH from an address?</p>\n</li>\n<li>\n<p>When is base58check decoding used, and by whom?</p>\n</li>\n<li>\n<p>Base58 encode the two hex bytes <code>0047</code>. Use the following diagram.\nYou may skip this exercise if you didn’t read the section on base58\nencoding.</p>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</li>\n<li>\n<p>What in an address makes it mostly safe from typing errors?</p>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Dig in</h4>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<ol>\n<li>\n<p>Imagine that John wants a cookie from the cafe. He has two\naddresses: @<sub>1</sub> with a balance of 5 CT, and @<sub>2</sub> with 8 CT. His total\nbalance is 13 CT, so he should be able to afford 10 CT for a cookie.\nGive an example of how he could pay 10 CT to the cafe.</p>\n</li>\n<li>\n<p>Is it possible to deduce what cookie token addresses were involved\nin a certain payment by looking at the following spreadsheet?</p>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</li>\n<li>\n<p>Is it possible to deduce what public keys were involved in a certain\npayment by looking at just the spreadsheet?</p>\n</li>\n<li>\n<p>Suppose everybody always used unique addresses for each\npayment. What information from the spreadsheet could Acme use to\nroughly identify the cafe’s addresses?</p>\n</li>\n<li>\n<p>Suppose there was a serious flaw in the public key derivation\nfunction, so anyone could calculate the private key from a public key.\nWhat prevents a bad guy from stealing your money in this scenario?</p>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</li>\n<li>\n<p>Suppose there was a serious flaw in RIPEMD160, so anyone could\neasily figure out a 256-bit pre-image of the PKH. This would mean it\nwasn’t pre-image resistant. What prevents a bad guy from stealing your\nmoney in this scenario?</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Summary</h3>\n<div>\n<ul>\n<li>\n<p>Privacy is important for you, not just for criminals.</p>\n</li>\n<li>\n<p>Using PKHs instead of personal names as recipients for payments is\nimportant for privacy and more secure.</p>\n</li>\n<li>\n<p>Encoding a PKH as a Bitcoin address, or cookie token address,\nreduces the risk of sending money into the void, thanks to the\nchecksum in the address.</p>\n</li>\n<li>\n<p>Only users care about Bitcoin addresses. The Bitcoin network, or\nLisa, deals with plain PKHs.</p>\n</li>\n<li>\n<p>You can have as many Bitcoin addresses as you like. Using multiple\naddresses, preferably one per received payment, improves your privacy.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div></article>', 'body': '\nAddresses\n\n\nThis chapter covers\n\n\n\n\nBasic privacy\n\n\nReplacing names with public key hashes\n\n\nProtecting against expensive typing errors\n\n\n\n\nBy the time you reach the end of this chapter, the cookie token\nspreadsheet will no longer have personal names—you’ll be replacing\nthese names with hashes of public keys. This is useful from a privacy\nperspective. No one can easily see who’s paying whom, making it harder\nfor others to extract information from the spreadsheet and see how\nmany cookies any of your coworkers eat. Lisa also finds this useful\nbecause she doesn’t have to maintain a table of names and public keys.\n\n\nWhen switching to public key hashes in the spreadsheet, coworkers will\nno longer use names in their emails to Lisa. They will instead use\nstrings of hex code representing public key hashes. This means it will\nbe easy to make typing errors. If you make a typing error, your money\nmay end up digitally burned!\n\n\nSome coworkers invent cookie token addresses (Bitcoin addresses) that\nprotect them from losing money due to typing errors\n(Cookie token addresses are exactly the same as Bitcoin addresses. They’re used mainly by wallet software.). Cookie token addresses are used between users to pay\neach other, pretty much like an email address, but they aren’t used in\nthe spreadsheet.\n\n\n\n\n\nFigure 1. Cookie token addresses are exactly the same as Bitcoin addresses. They’re used mainly by wallet software.\n\n\nCookie-eating habits disclosed\n\n\nAcme Insurances\n\nThis highly unethical insurance company will make serious attempts to\nspy on your habits, to “adjust” your premium.\n\n\n\n\nYou and many of your coworkers have health insurance with Acme\nInsurances. Acme has persuaded John to give it a copy of the\nspreadsheet. Acme figures it can adjust premiums or hold workers’\ncookie-eating habits (Acme Insurances keeps an eye on Chloe’s cookie-eating habits.) against them in an eventual\ninsurance dispute.\n\n\n\n\n\nFigure 2. Acme Insurances keeps an eye on Chloe’s cookie-eating habits.\n\n\nAnother disturbing fact about the spreadsheet is that every coworker\ncan easily look up other coworkers’ balances, as well as their\ncookie-eating habits.\n\n\nThe coworkers have asked Lisa to come up with a solution to these\nproblems. Otherwise, they’ll stop using the spreadsheet.\n\n\n\nReplacing names with public keys\n\n\n\n\n\n\n\n\nLisa has kept the table of names and public keys updated at all times\nsince the coworkers started using digital signatures. She’s sick of\ndoing this, so she comes up with an idea that will benefit both her and\nher coworkers: Lisa will replace all names in the spreadsheet with their\nrespective public keys (Replacing names with public keys. The spreadsheet is now more unreadable, which is good from a privacy perspective.).\n\n\n\n\n\nFigure 3. Replacing names with public keys. The spreadsheet is now more unreadable, which is good from a privacy perspective.\n\n\nIt’s now hard to see how many cookies Chloe has eaten without knowing\nher public key. If Acme Insurances receives this new spreadsheet, it\nwon’t be able to see who the senders and recipients\nare. It will see only the sender and recipient public keys of each\npayment.\n\n\nLisa can now delete her cumbersome table of names and public keys. But\nwhen she does this, users should no longer use names when making\npayments. They must instead use the sender’s public key and the\nrecipient’s public key (New-style payment using public keys instead of names).\n\n\n\nOld style\n\n\n\n\n\n\n\n\n\n\n\nFigure 4. New-style payment using public keys instead of names\n\n\nThe email to Lisa contains a few vital parts:\n\n\n\n\nA message containing the\n\n\n\nAmount\n\n\nSender public key\n\n\nRecipient public key\n\n\n\n\n\nA signature made with the sender’s private key\n\n\n\n\nThe essential difference is that the payment is now pseudonymous:\nnames are replaced with the corresponding public keys. Otherwise, the\npayment looks the same as before.\n\n\nNew payment process\n\nSuppose a new coworker just started at the company. Her name is Faiza.\nThe company wants to send her 100 CT as a welcome gift. How can the\ncompany send 100 CT to Faiza?\n\n\nFirst, the company needs the recipient’s—Faiza’s—public key. Faiza\nhasn’t used cookie tokens yet, so she needs to create a key pair and\ngive the public key to the sender—the company—as Faiza creates her public key and gives it to the company. The company creates a payment with Faiza’s public key as the recipient. shows.\n\n\n\n\n\nFigure 5. Faiza creates her public key and gives it to the company. The company creates a payment with Faiza’s public key as the recipient.\n\n\nFaiza creates a private and a public key, following the same process\ndescribed in [improving-cookie-token-security], but she doesn’t give\nher public key to Lisa. Now that Lisa doesn’t have the table of names\nand public keys, there’s no longer any point in giving her the\npublic key. She doesn’t need it. Instead, Faiza gives the public key\nto the entity that wants to pay her cookie tokens—the company.\n\n\nThe company creates a message asking Lisa to move 100 CT from\n037e944a…36de9496 to 029a726c…ad8f436d. It then digitally signs\nthe message and sends it to Lisa. Lisa uses\n\n\n\n\nThe message\n\n\nThe sender’s public key\n\n\nThe signature\n\n\n\n\n\nLisa In Bitcoin\n\nLisa is performing the same duties with cookie token payments that a\nBitcoin miner would do with Bitcoin payments.\n\n\n\n\nto verify that the message is signed with the private key belonging to\nthe sender’s public key. She also verifies that the sender’s public key\nhas enough funds in the spreadsheet. She does this the same way she did\nwhen the spreadsheet contained names—she searches for the sender’s\npublic key and calculates the balance.\n\n\nLisa has never seen the recipient’s public key before, but she doesn’t\ncare. She cares only that the sender has the money to spend and that the\nmessage is correctly signed. She’ll write into the spreadsheet’s\nrecipient column whatever the message asks her to write.\n\n\n\n\n\n\n\n\n\n\n\nFaiza sees the new row with her public key in the To column. It gives\nher a warm, fuzzy feeling. She can now spend her cookie tokens as she\npleases. Faiza didn’t have to bother Lisa with her public key, saving\nLisa a lot of work.\n\n\nLet’s summarize what’s happened so far:\n\n\n\n\nNames have been replaced with public keys in the spreadsheet.\n\n\nLisa has thrown away the table of names and public keys.\n\n\nPayments are made using public keys instead of names to denote sender\nand recipient.\n\n\n\n\nThese changes have improved privacy and simplified Lisa’s work. At the\nend of this chapter, we’ll discuss more about how to further improve\nprivacy.\n\n\nThe email to Lisa in this example probably reveals, to Lisa, who the\nsender is (the company, in this case) because of the From field of the\nemail. For now, we can assume Lisa doesn’t reveal or use this personal\ninformation in any way. We use email in this example in place of\nBitcoin’s peer-to-peer network. The Bitcoin network, discussed in detail\nin [ch08], doesn’t use any personal information.\n\n\nPlease take a moment to think about what Acme Insurances can now figure\nout from the spreadsheet. What information can it get if it figures out\nthe name of the sender or recipient of one payment? It will be able to\nidentify all payments that person has made.\n\n\n\n\nShortening the public key\n\nUsing public keys in the spreadsheet improved privacy, but such keys\ntake up a lot of space compared to names. The name “John” takes 4 bytes\nin the spreadsheet, whereas a public key takes 33 bytes. Keeping the\nspreadsheet as small as possible is important because a smaller\nspreadsheet means faster downloading for coworkers wanting to check\ntheir balance; it also takes less space on Lisa’s hard drive.\n\n\nHashing the public key to 20 bytes\n\n\n\n\n\n\n\n\n\n\nAmong the coworkers, some developers think they can replace 33-byte\npublic keys with something shorter while still preserving enough\nsecurity. They suggest replacing each public key in the cookie token\nspreadsheet with a cryptographic hash of the public key. This shortens\nsenders and recipients in the spreadsheet but also protects users’\nmoney in the event of a flaw in the public key derivation function, as\nwe’ll see later. The hashing isn’t made with a single cryptographic\nhash function but with two different cryptographic hash functions, as\nReplacing the public keys with the RIPEMD160 hash of the SHA256 hash of the public key illustrates. We’ll discuss the reason for using two hash\nfunctions in the next section.\n\n\n\n\n\nFigure 6. Replacing the public keys with the RIPEMD160 hash of the SHA256 hash of the public key\n\n\nThe public key is first hashed with SHA256, which you should be\nfamiliar with from the previous chapter. The output of this\ncryptographic hash function is then hashed with RIPEMD160, a\ncryptographic hash function that outputs a 160-bit (20-byte)\nnumber. We call this final hash the public key hash (PKH). All\npublic keys in the spreadsheet are replaced with their respective\nPKHs.\n\n\n\nOld style payment\n\n\n\n\n\n\n\n\nThe payment process now differs from when Faiza received her 100 CT from\nthe company. Suppose John wants to buy a cookie (John buys a cookie. The sender is still a public key, but the recipient is a PKH instead of public key. Lisa needs to create the PKH from the sender’s public key to verify the balance and execute the payment.).\n\n\n\n\n\nFigure 7. John buys a cookie. The sender is still a public key, but the recipient is a PKH instead of public key. Lisa needs to create the PKH from the sender’s public key to verify the balance and execute the payment.\n\n\n\np2pkh\n\nMost payments in Bitcoin are made with a PKH as the recipient. This\ntype is often called pay-to-public-key-hash (p2pkh), but other\npayment types exist as well.\n\n\n\n\nFirst, the message to Lisa is changed a bit. John must use the cafe’s\nPKH—which was previously a public key—as the recipient. The sender is\nstill a public key in the message because that public key is needed to\nverify the signature. Lisa doesn’t keep people’s public keys around\nanymore.\n\n\nSecond, because the spreadsheet now contains PKHs, Lisa must calculate\nthe PKH from the sender’s public key to check the sender’s balance and\nbe able to enter the payment into the spreadsheet.\n\n\n\nWhy SHA256 and RIPEMD160?\n\nUsing RIPEMD160 as the last cryptographic hash function is a deliberate\nchoice to make the PKHs shorter. Compare the output from SHA256 with the\noutput from RIPEMD160:\n\n\n\nSHA256:\n85ae273f0aa730eddf2285d3f3ab071eb29caba1e428db90e6dfbd71b8e1e918\nRIPEMD160:\n5f2613791b36f667fdb8e95608b55e3df4c5f9eb\n\n\n\nIt’s a well-balanced trade-off between security and size.\n\n\nBut why have two different cryptographic hash functions? We don’t\nreally know why this scheme was chosen for Bitcoin because its\ninventor, Satoshi Nakamoto, has stopped corresponding with the Bitcoin\ncommunity.  We can only speculate. Instead, let’s discuss some of the\nscheme’s properties.\n\n\nIf either hash function isn’t pre-image-resistant, the other still is.\nThis means if you can calculate an input to RIPEMD160 that gives a\ncertain PKH output, you still need to pre-image attack SHA256 (with\nabout 2255 guesses) to find the public key. Likewise, if you can\ncalculate an input to SHA256 that gives a certain output, you first\nneed to pre-image attack RIPEMD160 before you can use that pre-image\nto calculate the public key.\n\n\n\n\n\n\n\n\n\n\n\nOn the other hand, if it turns out that the output set of either\ncryptographic hash function is smaller than anticipated, then the\nsecurity of the combined hash-function chain suffers. To make this\nclearer, pretend SHA256 has only 100 possible output values. You can\nsteal money from anyone by trying different random private keys and\ncalculating the corresponding PKHs. If a PKH matches your target,\nyou’ve found a private key you can steal the money with. On average,\nyou’d only have to test 50 different private keys to steal from\none PKH. This property gives the worst of both worlds: if either of\nthe two functions is weak, then the whole chain is weak. The\nprobability that any function has this flaw is small. If any such flaw\nexists, the reduction in the output set likely isn’t significant\nenough to endanger security in practice. Remember, we’ve yet to find\none single collision in any of these cryptographic hash functions.\n\n\nAnother thing to note is that different organizations developed the\ntwo cryptographic hash functions. RIPEMD160 was developed at a\nEuropean university in open collaboration with a broad community of\ncryptographers. SHA256 was developed by the US National Security\nAgency (NSA). Both are considered secure, and both have been subject\nto scrutiny from a large number of people.\n\n\n\nHas privacy improved?\n\nNo.\n\n\n\n\nNow that we’ve strengthened the security of the cookie token\nspreadsheet, let’s think about privacy again. Has this improved privacy?\nIs it harder for Acme Insurances to figure out information about who’s\npaying whom now compared to when we used public keys in the spreadsheet?\n\n\nThe answer is no. There is practically a one-to-one correspondence\nbetween the public keys and the PKHs. Using PKHs doesn’t hide personal\ninformation any more than using plain public keys.\n\n\n\n\nAvoiding expensive typing errors\n\nWhen Lisa verifies a payment before executing it, she doesn’t care who\nthe recipient is or if it’s even an existing recipient. She’ll put into\nthe recipient column of the spreadsheet whatever the payer asks her to.\nShe can’t even know if a recipient is valid or not, because she no\nlonger knows everyone’s public keys.\n\n\nThis is convenient for Lisa, but it can cause people to lose money if\nthey aren’t careful. Imagine once again that John wants to buy a cookie.\nThis time, he’s not careful enough when writing the message, as John makes a typo in the recipient in the email to Lisa. What now? shows.\n\n\n\n\n\nFigure 8. John makes a typo in the recipient in the email to Lisa. What now?\n\n\nHe makes a typing error in the recipient PKH. The last character is d\nwhen it should have been c. What happens now?\n\n\n\nAny recipient goes\n\nThere is no “wrong” recipient PKH. Lisa adds any recipient as long as\nthe signature is valid.\n\n\n\n\nJohn doesn’t notice the error and happily signs the message and sends\nthe email to Lisa. Lisa verifies the signature, which verifies fine,\nand calculates the sender’s PKH. She doesn’t care about the\nrecipient. She inserts a new row in the spreadsheet paying from\n5f261379…f4c5f9eb to 87e3d169…8393b1cd.\n\n\nThen she considers herself done, moving on to other interesting tasks.\nThe cafe owner, who is searching for his PKH in the spreadsheet,\ndoesn’t see an incoming payment. John stands at the counter in the\ncafe yelling at the cafe owner that he did send money, so “Give me\nthe freakin’ cookie!” The cafe owner refuses. John takes a close look\nat the spreadsheet and searches for his PKH. He finds the one he just\nmade and realizes his spelling mistake.\n\n\n\n\n\n\n\n\n\nJohn has sent money to a “public key hash” for which there is no known\nprivate key. No one will ever be able to spend those 10 CT—not the\ncafe, not John, nobody. John has just digitally burned 10 CT.\n\n\nUnfortunately, this will probably happen again and again in the future\nif nothing is done to prevent it. The problem can happen at any point\nfrom when the cafe owner reads his own PKH to give to John to when\nJohn writes his message before signing it. You could argue that Lisa\ncould also make this mistake when she updates the spreadsheet, but\nshe’s so thorough that this would never happen. She’s just too good\nat what she’s doing. Lisa will never cause someone else’s funds to be\nburned.\n\n\nWhere were we?\n\nThis chapter deals with Bitcoin addresses. To remind you where this\nall fits into Bitcoin, remember the diagram from [ch01], shown again\nin Bitcoin addresses.\n\n\n\n\n\nFigure 9. Bitcoin addresses\n\n\nToward the end of this chapter, we’ll end up with Bitcoin (cookie\ntoken) addresses. We’ve just replaced the names in the spreadsheet\nwith PKHs.  We’ll now get to Bitcoin addresses. A Bitcoin address\nis a converted PKH—that is, it’s a PKH written in a way more\nsuitable for human users and safe against spelling errors. The PKH is\nsent to Lisa (or Bitcoin nodes), but the address is what users see and\ngive to each other.\n\n\n\nBase58check\n\nAmong the coworkers, the security-oriented people discuss the problem\nwith typos and come up with the idea of cookie token addresses. A\ncookie token address is a PKH encoded to detect typing errors. The\nPKH can be converted back and forth between this encoding and plain\nbyte format.\n\n\n\nBitcoin addresses\n\nCookie token addresses are exactly the same as the most common version\nof Bitcoin addresses. Other types of Bitcoin addresses are available,\nhowever.\n\n\n\n\nSuppose Faiza feels sorry for John and wants to give him 20 CT from\nher 100 CT to ease his pain. She doesn’t want to make the same mistake\nJohn did, so she asks him for his cookie token address. John creates\nthis by encoding his PKH with a function called base58check\n(Overview of base58check encoding, which transforms a PKH into a cookie token address).\n\n\n\n\n\nFigure 10. Overview of base58check encoding, which transforms a PKH into a cookie token address\n\n\n\nWho uses cookie token addresses?\n\nCookie token addresses are employed only between users to safely\ntransmit a PKH. Lisa never sees them.\n\n\n\n\nThe result is John’s cookie token address: 19g6oo8f…gCenRBPD. John\nhands this address to Faiza, who then makes a payment following the\nprocess in Faiza makes a payment to John’s cookie token address. She decodes the address into a PKH, verifying that the address isn’t misspelled..\n\n\nThe payment process changes for the payer, but nothing changes for Lisa.\nFaiza will base58check decode John’s address into a PKH. This decoding\nensures that no typing errors were made in the address.\n\n\n\n\n\nFigure 11. Faiza makes a payment to John’s cookie token address. She decodes the address into a PKH, verifying that the address isn’t misspelled.\n\n\nAs mentioned previously, a PKH can be converted to an address and back\nto a PKH. It is not a one-way function. It’s just different ways to\nrepresent the PKH, either as a series of bytes or as an address\n(The PKH can be encoded into an address and decoded back into the PKH.).\n\n\n\n\n\nFigure 12. The PKH can be encoded into an address and decoded back into the PKH.\n\n\nThe email to Lisa is exactly the same as before. Only users employ the\ncookie token address. It isn’t part of Lisa’s validation process or\nthe spreadsheet in any way.\n\n\nBase58check encoding\n\nLet’s see how this mysterious base58check encoding works\n(Base58check encoding John’s PKH. A version is added to the hash, and then a checksum is created and appended to the versioned hash. Finally, the checksummed, versioned hash is base58 encoded.).  First, a version is added before the PKH. The people\nwho came up with the idea of cookie token addresses wanted to make\nfuture upgrades to the address format easy. Right now, only one\nversion of cookie token addresses is available. This version is a\nsingle 0 byte.\n\n\n\n\n\nFigure 13. Base58check encoding John’s PKH. A version is added to the hash, and then a checksum is created and appended to the versioned hash. Finally, the checksummed, versioned hash is base58 encoded.\n\n\n\n\n\n\n\n\n\n\n\nTo detect typing errors, a checksum is added. This checksum is\ncalculated from the versioned PKH. To create a checksum, base58check\nhashes the versioned PKH with double SHA256. This means it’s first\nhashed with SHA256, and the resulting hash is hashed again with\nSHA256.  Take the first 4 bytes of the second hash, and let those 4\nbytes be the checksum. This checksum is then appended to the\nversioned PKH. You’ll soon see how this checksum protects users from\ntyping errors. Be patient!\n\n\nYou started with a PKH of 20 bytes (40 hex characters). But now that\nyou’ve added a version and a checksum, you have 25 bytes (50 hex\ncharacters). To make up for this increase, you’ll encode the 25 bytes\nin a more compact way than hexadecimal encoding.\n\n\n\nUsing a more compact encoding\n\nHex encoding is an inefficient way to represent data bytes. It\nrequires 2 characters for each byte. We use only 16 characters, where\neach character represent 4 bits, 0000 to 1111.\n\n\nMany encoding schemes exist that use more characters to represent data.\nThe most widely known is base64, in which each character represents 6\nbits of data; to do this, the scheme needs more characters than just\nletters and digits. Base64 uses the following alphabet:\n\n\n\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\n\n\n\nThe character A represents the bits 000000, B represents\n000001, and the character / represents 111111. This is a nice,\neasy, compact way to represent data with human-readable\ncharacters. I’ve already used base64-encoded data several times in\nthis book to represent signatures.\n\n\n\n\n\n\n\n\n\n\n\nBut base64 doesn’t quite fit the bill for cookie token addresses. We\nneed an encoding that doesn’t just detect typing errors when they happen\nbut minimizes the risk of making them. Notice how some characters look\nsimilar in some fonts, like lI (lowercase L, capital I) and 0O (zero\nand capital O). We also need a format that users can easily copy and\npaste, meaning special characters such as + and / shouldn’t be\nallowed—they’ll prevent us from marking the whole address by\ndouble-clicking it. Removing those six characters reduces the\npossibility of typing errors. But now we have only 58 characters left,\nso we need another type of encoding.\n\n\nThis new way to encode data is called base58 because the alphabet is\nthe following 58 characters:\n\n\n\n123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\n\n\n\n\n\n\nWarning\n\n\nIf you feel put off by this low-level base58 mumbo jumbo, you can skip\nto Base58check decoding and just accept that base58 is a way to encode\nand decode data. For the rest of you, please continue. It’s fun.\n\n\n\n\n\nIn base64, each character represents exactly 6 bits, which makes it\nstraightforward to encode and decode data. But with base58, each\ncharacter represents slightly less than 6 bits but more than 5\nbits. We need to encode data differently.\n\n\nLet’s get back to the example in which John creates his address. He’s\njust added a version and a checksum. Now it’s time to encode the 25\nbytes into the final result: the address (Encoding John’s versioned and checksummed PKH with base58. The essential part is where you divide the number by 58 and keep the remainders, which are then mapped one by one in the lookup table.).\n\n\n\n\n\nFigure 14. Encoding John’s versioned and checksummed PKH with base58. The essential part is where you divide the number by 58 and keep the remainders, which are then mapped one by one in the lookup table.\n\n\nThe overall strategy of base58 is to treat the data as a huge number\nthat you divide by 58 over and over until the quotient is 0; you keep\nthe remainders of every division. You look up each remainder in the\nlookup table and append a 1 last for each leading 0 byte in the\ninput.  The string is finally reversed, and the result is John’s\ncookie token address. Note that all cookie token addresses, not just\nJohn’s, will start with a 1. This is because the version byte is 0,\nwhich is encoded by the character 1.\n\n\nYou can decode base58-encoded data such as John’s address back to the\noriginal input of the base58 encoding. I’ll leave this as an exercise\nfor the interested reader.\n\n\nNote that base58 encoding is nothing new. It’s a generic way to\nconvert a decimal number to any other base. You can use the same\nalgorithm to convert to base3, instead—divide by 3 instead\nof 58. Maybe you’d also like to change the lookup table to map 0 to 0,\n1 to 1, and 2 to 2 to get the characters you’re used to. For example,\nwrite 17 in base 3:\n\n\n\n\\$17=5*3+2 \\\\$\n\\$5=1*3+2 \\\\$\n\\$1=0*3+1\\$\n\n\n\nThen, look up the remainders in the lookup table (same digits as the\nones you convert), and you’ll get 2 2 1. Reverse that to get the final\nresult: 1 2 2. Verify that it’s correct as follows:\n\n\n\n\\$1*3^2+2*3^1+2*3^0=9+6+2=17\\$\n\n\n\n\nBase58check decoding\n\n\n\n\n\n\n\n\n\n\nJohn has just created his cookie token address by base58check encoding\nhis PKH. He’s given the address to Faiza so she can send him 20 CT. Now,\nFaiza needs to write a message to Lisa. To do this, she needs John’s\nPKH. The great thing about base58check encoding is that the process can\nbe reversed so you can get the PKH from the address while simultaneously\nchecking for typing errors (Base58check decoding is basically done by reversing the base58check encoding. Typing errors are detected when the checksums don’t match.).\n\n\n\n\n\nFigure 15. Base58check decoding is basically done by reversing the base58check encoding. Typing errors are detected when the checksums don’t match.\n\n\nFaiza takes John’s cookie token address and base58 decodes it. Then,\nshe removes the checksum and uses the remaining part, the versioned\nPKH, to calculate the checksum again. The newly calculated checksum\nand the just-removed checksum must match. Otherwise, a typing error\nhas occurred, in which case Faiza won’t create the message. She’ll\nknow the address was corrupted somewhere along the way and refrain\nfrom sending an email to Lisa. She’ll verify that she entered the\naddress correctly and that John gave her the correct address to learn\nwhere it went wrong.\n\n\nHow safe is the checksum? Suppose a typing error occurred in an\naddress.  What’s the probability that the checksum won’t detect the\nerror? The checksum is 4 bytes, which corresponds to 232 ≈ 4.3\nbillion values.  The chance is about 1 in 4.3 billion that base58check\nfails to detect the typing error. It’s pretty safe.\n\n\n\n\n\nBack to privacy\n\nAlthough privacy improved when we replaced names with PKHs, the\nspreadsheet still reveals some information that Acme Insurances finds\nuseful.\n\n\n\nForensics\n\nThis technique is often used in Bitcoin—for example, during crime\ninvestigations.\n\n\n\n\nFor example, Acme can probably figure out the cafe has the PKH\n87e3d169…8393b1cc because a lot of 10 CT payments have been made\nto this PKH. From this, Acme will be able to see which PKHs are making\nthe most 10 CT payments to that PKH. Let’s say Acme talks to Faiza and\nasks her for information about her recent payments. She’s made only one\npayment so far, the one to John. Faiza, unaware of why Acme is asking\nthese questions, discloses that the transaction is for John.\n\n\n\nDear John,\n\nIt has come to our attention that you live an unhealthy life. We have\ntherefore promoted you to a higher risk category. Congratulations.\n\n\nSincerely,\nAcme Insurances\n\n\n\n\nA week later, John receives a letter from Acme politely informing him\nthat he’s been promoted to a higher risk category, and his insurance\npremium has been adjusted accordingly.\n\n\nSome privacy issues obviously remain. Luckily, users can create as\nmany addresses they like. For example, the cafe could create a unique\naddress for every incoming payment. And John could create a brand-new\ncookie token address the next time he accepts cookie tokens from\nFaiza.\n\n\nUsing unique addresses for each payment will make it harder for Acme\nto extract information from the cookie token spreadsheet, because they\nwon’t be able to tell which payments belong to the same person.\n\n\n\nRecap\n\nThis chapter started with replacing the names in the spreadsheet with\nusers’ respective PKHs.\n\n\n\n\n\n\n\nThen, we used base58check to create an address from a PKH. Let’s put the\npieces together and look at the whole cookie token address-creation\nprocess from random number generator to the address.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFaiza makes sure no typing errors happen by base58check decoding the\naddress before signing the message.\n\n\n\n\n\n\n\nSystem changes\n\nThe concept table (Nothing new in the concept table) isn’t updated in this chapter. Cookie\ntoken addresses are exactly what Bitcoin uses, so we haven’t\nintroduced any concepts that differ from Bitcoin.\n\n\nTable 1. Nothing new in the concept table\n\n\n\n\n\n\n\nCookie Tokens\nBitcoin\nCovered in\n\n\n\n\n1 cookie token\n1 bitcoin\n[ch02]\n\n\nThe spreadsheet\nThe blockchain\n[ch06]\n\n\nEmail to Lisa\nA transaction\n[ch05]\n\n\nA row in the spreadsheet\nA transaction\n[ch05]\n\n\nLisa\nA miner\n[ch07]\n\n\n\n\n\n\n\n\n\n\n\n\n\nThanks to PKH and cookie token addresses, Lisa can ditch her table of\npublic keys. You can add PKH and addresses to your toolbox for later\nuse, and we release version 3.0 of the cookie token system\n(Release notes, cookie tokens 3.0).\n\n\nTable 2. Release notes, cookie tokens 3.0\n\n\n\n\n\n\n\nVersion\nFeature\nHow\n\n\n\n\n3.0\nSafe from expensive typing errors\nCookie token addresses.\n\n\nPrivacy improvements\nA PKH instead of a personal name is stored in the spreadsheet.\n\n\n2.0\nSecure payments\nDigital signatures solve the problem with imposters.\n\n\n1.0\nSimple payment system\nRelies on Lisa being trustworthy and knowing everyone’s face.\n\n\nFinite money supply\n7,200 new CT are rewarded to Lisa daily; the amount halves every four years.\n\n\n\n\n\n\nExercises\n\nWarm up\n\n\n\nThe PKH is shorter than the public key—only 160 bits. We made it\nshorter using RIPEMD160. Why do you want it to be shorter? There are\ntwo good reasons.\n\n\nBase58check encoding is used to create a cookie token (Bitcoin)\naddress from a PKH. Is it possible to reverse this process to create a\nPKH from an address?\n\n\nWhen is base58check decoding used, and by whom?\n\n\nBase58 encode the two hex bytes 0047. Use the following diagram.\nYou may skip this exercise if you didn’t read the section on base58\nencoding.\n\n\n\n\n\n\n\nWhat in an address makes it mostly safe from typing errors?\n\n\n\n\n\nDig in\n\n\n\n\n\n\n\n\n\n\n\n\nImagine that John wants a cookie from the cafe. He has two\naddresses: @1 with a balance of 5 CT, and @2 with 8 CT. His total\nbalance is 13 CT, so he should be able to afford 10 CT for a cookie.\nGive an example of how he could pay 10 CT to the cafe.\n\n\nIs it possible to deduce what cookie token addresses were involved\nin a certain payment by looking at the following spreadsheet?\n\n\n\n\n\n\n\nIs it possible to deduce what public keys were involved in a certain\npayment by looking at just the spreadsheet?\n\n\nSuppose everybody always used unique addresses for each\npayment. What information from the spreadsheet could Acme use to\nroughly identify the cafe’s addresses?\n\n\nSuppose there was a serious flaw in the public key derivation\nfunction, so anyone could calculate the private key from a public key.\nWhat prevents a bad guy from stealing your money in this scenario?\n\n\n\n\n\n\n\nSuppose there was a serious flaw in RIPEMD160, so anyone could\neasily figure out a 256-bit pre-image of the PKH. This would mean it\nwasn’t pre-image resistant. What prevents a bad guy from stealing your\nmoney in this scenario?\n\n\n\n\n\n\nSummary\n\n\n\nPrivacy is important for you, not just for criminals.\n\n\nUsing PKHs instead of personal names as recipients for payments is\nimportant for privacy and more secure.\n\n\nEncoding a PKH as a Bitcoin address, or cookie token address,\nreduces the risk of sending money into the void, thanks to the\nchecksum in the address.\n\n\nOnly users care about Bitcoin addresses. The Bitcoin network, or\nLisa, deals with plain PKHs.\n\n\nYou can have as many Bitcoin addresses as you like. Using multiple\naddresses, preferably one per received payment, improves your privacy.\n\n\n\n\n\n', 'body_type': 'html', 'authors': ['Kalle Rosenbaum'], 'domain': 'https://github.com', 'url': 'https://github.com/kallerosenbaum/grokkingbitcoin/blob/master/ch03-addresses.adoc', 'created_at': '2023-06-29T13:58:29.401058'}}, {'_index': 'bitcoin-search-scrapy-23', '_id': 'mDfTBokBCZBMBhppANVJ', '_score': 1.0, '_ignored': ['body.keyword', 'body_formatted.keyword'], '_source': {'id': 'grokkingbtc-f1def04c-d479-4b7f-8653-40e920c6231b', 'title': '[Grokking Bitcoin] Introduction to Bitcoin', 'body_formatted': '<article><div>\n<h2><a><svg><path></path></svg></a>Introduction to Bitcoin</h2>\n<div>\n<div>\n<ul>\n<li>\n<p>Getting to know Bitcoin</p>\n</li>\n<li>\n<p>Following a Bitcoin payment</p>\n</li>\n<li>\n<p>Problems solved by Bitcoin</p>\n</li>\n</ul>\n</div>\n<div>\n<p>The goal of this book is to teach you enough about Bitcoin to make\ninformed decisions about how you can use it to improve your private life\nor business. My hope is that you’ll learn enough to make up your own\nmind whether you trust Bitcoin or not (with any luck, the former). To\nget you off the ground, I’m going to assume you know roughly what the\nfollowing terms mean:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Computer program</p>\n</li>\n<li>\n<p>Database</p>\n</li>\n<li>\n<p>Computer network</p>\n</li>\n<li>\n<p>Web server</p>\n</li>\n</ul>\n</div>\n<div>\n<p>If you’re unsure of any of these terms, don’t worry. Either look them up\nor go ahead anyway—I think you’ll manage.</p>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>What is Bitcoin?</h3>\n<div>\n<div>\n<div>Bitcoin or bitcoin?</div>\n<div>\n<p>The system is named <em>Bitcoin</em> with a capital B. The currency unit is\ncalled a <em>bitcoin</em> with a lowercase b. Commonly used symbols for\nbitcoins are {btc}, BTC, and XBT. We’ll mostly use BTC in this book.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Bitcoin is a digital cash system. It allows for people to move bitcoins,\nthe currency unit of Bitcoin, between each other without using a bank or\nany other trusted third party. It resembles traditional bank notes and\ncoins, but it’s purely digital and used over the internet. The Bitcoin\ncurrency isn’t tied to any specific <em>fiat currency</em> like the US dollar\nor the Chinese renminbi; it has free-floating exchange rates against\nmost fiat currencies. You can buy and sell bitcoins for fiat currencies\nonline using one of several exchanges, such as kraken.com, bitstamp.net,\nor localbitcoins.com.</p>\n</div>\n<div>\n<p>No government or company controls Bitcoin. Instead, thousands of\ncomputers around the globe—the <em>Bitcoin network</em>, shown in\n<a>The Bitcoin network and its ecosystem.</a>—collectively keep the system working 24/7. You don’t need\nto register or sign up anywhere to use Bitcoin, you just need internet\naccess and a computer program, like a mobile app, to use it.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 1. The Bitcoin network and its ecosystem.</div>\n</div>\n<div>\n<p>Anyone can use or participate in the Bitcoin network without special\npermission from a bank or similar institution. Thanks to Bitcoin’s\n<em>permissionless</em> nature, a lot of Bitcoin-related technology has emerged\nover the years. We can roughly categorize participants in this Bitcoin\necosystem into several groups:</p>\n</div>\n<div>\n<div>\n<div>Bitcoin doesn’t care</div>\n<div>\n<p>The Bitcoin network doesn’t distinguish between users. No user is more\nimportant than any other user. It doesn’t matter who they are or what\nthey do; everyone participates on the same terms.</p>\n</div>\n</div>\n</div>\n<div>\n<dl>\n<dt>End users</dt>\n<dd>\n<p>People using Bitcoin for their day-to-day needs, such as\nsavings, shopping, speculation, or salaries</p>\n</dd>\n<dt>Corporate users</dt>\n<dd>\n<p>Companies using Bitcoin to solve their business\nneeds, such as paying wages internationally, or use cases similar to\nthose of end users</p>\n</dd>\n<dt>Merchants</dt>\n<dd>\n<p>For example, a restaurant or a bookstore accepting Bitcoin\npayments</p>\n</dd>\n<dt>Bitcoin services</dt>\n<dd>\n<p>Companies providing Bitcoin-related services to\ncustomers, such as topping up mobile phones, anonymization services,\nremittance services, or tipping services</p>\n</dd>\n<dt>Exchanges</dt>\n<dd>\n<p>Commercial services people can use to exchange their local\ncurrency to and from bitcoins</p>\n</dd>\n<dt>Protocols on top</dt>\n<dd>\n<p>Systems that operate “on top” of Bitcoin to perform\ncertain tasks, such as payment network protocols, specialized tokens,\nand decentralized exchanges</p>\n</dd>\n<dt>Bitcoin developers</dt>\n<dd>\n<p>People working, often for free, with the open\nsource computer programs that participants of the Bitcoin network use</p>\n</dd>\n</dl>\n</div>\n<div>\n<p>The Bitcoin network’s job is to process Bitcoin payments, secure the\nledger of who owns what from unauthorized modifications, and get new\nbitcoins into circulation at the predetermined rate. The network\nconsists of thousands of computers around the world. We call these\ncomputers <em>Bitcoin nodes</em>, or just <em>nodes</em>. Any of the actors\nmentioned previously can also participate actively in the Bitcoin\nnetwork by running their own Bitcoin node. You must run your own node if\nyou don’t want to trust others to provide you with correct financial\ninformation.</p>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>The big picture</h3>\n<div>\n<p>The Bitcoin network is a network of computers running Bitcoin\nsoftware.  This network verifies and confirms payments between Bitcoin\nusers.</p>\n</div>\n<div>\n<p>Suppose Alice wants to make a payment of 1 BTC to Bob. The payment\nstarts with Alice creating a transaction and sending it to the Bitcoin\nnetwork, as shown in <a>A Bitcoin payment. The payment is processed in four steps.</a>. I outline the process’s\nfour steps here and explain each step further in the following\nsubsections. <a>A Bitcoin payment. The payment is processed in four steps.</a> will appear in the introduction of\nchapters 2 through 8, where I’ll point out which part of the figure\nwe’ll cover in the chapter.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 2. A Bitcoin payment. The payment is processed in four steps.</div>\n</div>\n<div>\n<div>\n<div>I thought Bitcoin was anonymous!</div>\n<div>\n<p>Bitcoin doesn’t use names or any other personal information, but I use\nnames in this first example for simplicity.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Now, let’s follow Alice’s payment from Alice to Bob:</p>\n</div>\n<div>\n<ol>\n<li>\n<p>Alice creates and signs a transaction that moves 1 bitcoin from her to\nBob. She then sends the transaction to the Bitcoin network.</p>\n</li>\n<li>\n<p>The computers in the network—the Bitcoin nodes—check that Alice actually\nhas the money to spend and that the transaction is authentic. They then\npass the transaction to their neighbors, called <em>peers</em>.</p>\n</li>\n<li>\n<p>Each computer updates its own copy of the <em>Bitcoin blockchain</em>, or the\n<em>ledger</em>, with the new payment information.</p>\n</li>\n<li>\n<p>The network notifies Bob that he has received 1 bitcoin.</p>\n</li>\n</ol>\n</div>\n<div>\n<p>Note how Alice does not really <em>send</em> 1 bitcoin to Bob, but asks the\nBitcoin network to move 1 bitcoin from Alice to Bob in the Bitcoin\nblockchain.</p>\n</div>\n<div>\n<p>The Bitcoin blockchain is a database that each computer in the Bitcoin\nnetwork has a copy of. Think of the blockchain as a ledger of all\ntransactions ever made.</p>\n</div>\n<div>\n<p>We’ll go through these steps in more detail in the next four sections,\none step per section.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Step 1: Transactions</h4>\n<div>\n<div>\n<div>Transaction</div>\n<div>\n<p>A <em>transaction</em> is a <em>payment</em>. The terms are interchangeable. We\ncover transactions in <a>[ch05]</a> and <a>[ch09]</a>.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Step 1 of the process (<a>Alice creates a transaction, signs it, and sends it to one or more Bitcoin nodes in the Bitcoin network.</a>) is when Alice asks the\nnetwork to move 1 bitcoin to Bob. She does this by sending a Bitcoin\ntransaction to the Bitcoin network. This transaction contains\ninstructions on how to move the money and a digital signature that\nproves it’s really Alice requesting that the money be moved.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 3. Alice creates a transaction, signs it, and sends it to one or more Bitcoin nodes in the Bitcoin network.</div>\n</div>\n<div>\n<p>The Bitcoin <em>transaction</em> is a piece of data specifying</p>\n</div>\n<div>\n<ul>\n<li>\n<p>The amount to move (1 bitcoin)</p>\n</li>\n<li>\n<p>The Bitcoin address to move the money to (Bob’s Bitcoin address,\n<code>15vwoaN74MBeF5nr2BH4DKqndEFjHA6MzT</code>)</p>\n</li>\n<li>\n<p>A <em>digital signature</em> (made with Alice’s private key)</p>\n</li>\n</ul>\n</div>\n<div>\n<div>\n<div>Digital signatures</div>\n<div>\n<p>We’ll discuss digital signatures in depth in <a>[ch02]</a>.</p>\n</div>\n</div>\n</div>\n<div>\n<p>The digital signature is created from the transaction and a huge\nsecret number, called a <em>private key</em>, that only Alice has\naccess to. The result is a digital signature that only the private\nkey’s owner could have created.</p>\n</div>\n<div>\n<p>Alice’s mobile wallet app is connected to one or more nodes in the\nBitcoin network and sends the transaction to those nodes.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Step 2: The Bitcoin network</h4>\n<div>\n<p>Alice has sent a transaction to one or more Bitcoin nodes. In step 2\nof the process (<a>Alice has sent her transaction to a node in the network. The node verifies the transaction and forwards it to other nodes. Eventually, the transaction will reach all nodes in the network.</a>), each such node checks\nthat the transaction is valid and passes it on to its peers. It does\nthis by consulting its local copy of the blockchain and verifying that</p>\n</div>\n<div>\n<ul>\n<li>\n<p>The bitcoin that Alice spends exists.</p>\n</li>\n<li>\n<p>Alice’s digital signature is valid.</p>\n</li>\n</ul>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 4. Alice has sent her transaction to a node in the network. The node verifies the transaction and forwards it to other nodes. Eventually, the transaction will reach all nodes in the network.</div>\n</div>\n<div>\n<div>\n<div>Invalid transactions</div>\n<div>\n<p>Invalid transactions are dropped. They won’t reach further than the first node.</p>\n</div>\n</div>\n</div>\n<div>\n<p>If all checks pass, a node forwards the transaction to its peers in\nthe Bitcoin network. This is known as <em>relaying</em>. Alice’s\ntransaction will shortly have traveled the entire network while each\nnode verifies it along the way. The blockchain hasn’t been updated\nyet; that’s the next step.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Step 3: The blockchain</h4>\n<div>\n<div>\n<div>The blockchain</div>\n<div>\n<p>The name <em>blockchain</em> comes from how the ledger is structured. It uses\nblocks that are chained together in such a way that modifications to the\nblockchain can be detected. I’ll have more on that in <a>[ch06]</a>.</p>\n</div>\n</div>\n</div>\n<div>\n<p>In step 3, nodes update their local copies of the Bitcoin blockchain\nwith Alice’s transaction. The blockchain contains historic information\nabout all previous transactions; new transactions, such as Alice’s, are\nappended to it every now and then.</p>\n</div>\n<div>\n<p>Updating the blockchain with Alice’s transaction isn’t as\nstraightforward as it might seem. Alice’s transaction isn’t the only\none going on in the Bitcoin network. Potentially thousands of\ntransactions can be in flight at the same time. If all nodes updated\ntheir copy of the blockchain as they received transactions, the copies\nwouldn’t remain copies for long because transactions can come in\ndifferent orders on different nodes, as <a>Transactions arrive in different orders at different nodes. If all nodes wrote their transactions to the blockchain in order of arrival, the different nodes’ blockchains would differ.</a> shows.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 5. Transactions arrive in different orders at different nodes. If all nodes wrote their transactions to the blockchain in order of arrival, the different nodes’ blockchains would differ.</div>\n</div>\n<div>\n<p>To coordinate the ordering of transactions, one node takes the lead,\nsaying “I want to add these two transactions to the blockchain in the\norder Y, X!” This message, known as a <em>block</em>, is sent out on the\nnetwork by that leader (<a>One node takes the lead and tells the others in what order to add transactions. The other nodes verify the block and update their blockchain copies accordingly.</a>), in the same way that Alice sent the\ntransaction.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 6. One node takes the lead and tells the others in what order to add transactions. The other nodes verify the block and update their blockchain copies accordingly.</div>\n</div>\n<div>\n<div>\n<div>The blockchain is append-only</div>\n<div>\n<p>New transactions are added to the end of the blockchain only—it grows\nonly from the end.</p>\n</div>\n</div>\n</div>\n<div>\n<p>As nodes see this block, they update their copy of the blockchain\naccording to the message and pass the block on to their peers. Alice’s\ntransaction was one of the transactions in the block and is now part of\nthe blockchain.</p>\n</div>\n<div>\n<p>Why would a node want to take the lead? The node that takes the lead is\nrewarded with newly minted bitcoins and transaction fees paid by the\ntransactions it includes in the block.</p>\n</div>\n<div>\n<p>But wouldn’t every node constantly take the lead to collect the\nrewards? No, because to take the lead, a node must solve a hard problem.\nThis requires the node to consume considerable time and electricity,\nwhich ensures that leaders don’t pop up often. The problem is so hard\nthat most nodes in the network don’t even try. Nodes that do try are\ncalled <em>miners</em> because they mine new coins, similar to a gold miner\ndigging for gold. We’ll discuss this process further in <a>[ch07]</a>.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Step 4: Wallets</h4>\n<div>\n<p>Bob and Alice are Bitcoin network users, and they both need a computer\nprogram to interact with the network. Such a program is called a\n<em>Bitcoin wallet</em>. Several types of Bitcoin wallets are available for\ndifferent devices, such as mobile phones and desktop computers, and\nthere are even specialized hardware wallet devices.</p>\n</div>\n<div>\n<p>Before step 4 of the payment process, the nodes in the network update\ntheir local copy of the blockchain. Now, the network needs to notify\nAlice and Bob that the transaction went through, as\n<a>Bob’s wallet has asked a node to notify the wallet upon activity at Bob’s Bitcoin address. Alice pays to Bob’s address, and the node has just written the transaction to the blockchain, so it notifies Bob’s wallet.</a> shows.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 7. Bob’s wallet has asked a node to notify the wallet upon activity at Bob’s Bitcoin address. Alice pays to Bob’s address, and the node has just written the transaction to the blockchain, so it notifies Bob’s wallet.</div>\n</div>\n<div>\n<div>\n<div>Wallet duties</div>\n<div>\n<p>A typical Bitcoin wallet will</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Manage keys</p>\n</li>\n<li>\n<p>Watch incoming/outgoing bitcoins</p>\n</li>\n<li>\n<p>Send bitcoins</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div>\n<p>Bob’s wallet is connected to some of the nodes in the Bitcoin network.\nWhen a transaction concerning Bob is added to the blockchain, the\nnodes that Bob’s wallet is connected to will notify Bob’s wallet. The\nwallet will then display a message to Bob that he received 1\nbitcoin. Alice also uses a wallet. Her wallet will be notified of her\nown transaction.</p>\n</div>\n<div>\n<p>Besides sending and receiving transactions, Bob’s and Alice’s wallets\nalso manage their private keys for them. As described earlier, a\nprivate key is used to create digital signatures, as well as to\ngenerate a Bitcoin address. Alice created her digital signature with\none of her private keys. When Bob later wants to spend the money he\nreceived at his Bitcoin address, which he generated from his private\nkey, he needs to create a transaction and digitally sign it with that\nprivate key.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Problems with money today</h3>\n<div>\n<p>Bitcoin wouldn’t be this widespread if it didn’t solve real problems\nfor real people. Bitcoin solves several problems inherent to the\ntraditional financial system. Let’s look at some commonly discussed\nproblem areas.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Segregation</h4>\n<div>\n<p>People with bank accounts and access to banking services such as\nonline payments or loans are privileged. According to the World Bank,\nabout 38% of the world’s population doesn’t have a bank account (see\n<a>[web-financial-inclusion]</a>). The numbers are slowly improving, but\nmany people are still stuck in a cash-only environment.</p>\n</div>\n<div>\n<p>Without a bank account and basic banking services, such as online\npayments, people can’t expand their businesses outside their local\ncommunities. A merchant won’t be able to offer goods or services on\nthe internet to increase its customer base. A person living in a rural\narea might have to travel half a day to pay a utility bill or top up\ntheir prepaid mobile phone.</p>\n</div>\n<div>\n<div>\n<div>Problems</div>\n<div>\n<ul>\n<li>\n<p>❏ <strong>Segregation</strong></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div>\n<p>This segregation between banked people and unbanked people is driven\nby several factors:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Banking services are too expensive for some people.</p>\n</li>\n<li>\n<p>To use banking services, you need documentation, such as an ID card,\nthat many people don’t have.</p>\n</li>\n<li>\n<p>Banking services can be denied to people with certain political\nviews or those conducting certain businesses. People might also be\ndenied service due to their ethnicity, nationality, sexual\npreferences, or skin color.</p>\n</li>\n</ul>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Privacy issues</h4>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>When it comes to electronic payments such as credit cards or bank\ntransfers, traditional money poses several privacy problems. States can\neasily</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Trace payments</p>\n</li>\n<li>\n<p>Censor payments</p>\n</li>\n<li>\n<p>Freeze funds</p>\n</li>\n<li>\n<p>Seize funds</p>\n</li>\n</ul>\n</div>\n<div>\n<p>You might say, “I have nothing to hide, and the government needs these\ntools to fight crime.” The problem is, you don’t know what your\ngovernment will look like in five years and how that government defines\ncrime. New laws are just an election away. After the next election, your\ngovernment could pass a law that allows it to freeze the funds of people\nwith your political view. In some parts of the world, this is already\nhappening.</p>\n</div>\n<div>\n<div>\n<div>Problems</div>\n<div>\n<ul>\n<li>\n<p>❏ Segregation</p>\n</li>\n<li>\n<p>❏ <strong>Privacy issues</strong></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div>\n<p>We’ve seen lots of examples in which these powers are abused to\ndisable someone’s ability to transact. For example, the nonprofit\norganization WikiLeaks was put under a blockade in 2010 in which all\ndonations through traditional channels were blocked after pressure\nfrom the US government on the major payment networks, such as Visa and\nMastercard (see <a>[web-wikileaks-blockade]</a>). We’ve also seen how\nCyprus seized 47.5% of all bank deposits exceeding 100,000 € as part\nof a financial rescue program in 2013 (<a>[web-cyprus-seizure]</a>).</p>\n</div>\n<div>\n<p>Note that bank notes and coins usually aren’t affected. As long as\nthere is cash, people can trade freely and privately. In some parts of\nthe world—for example, Sweden—cash is being phased out, which means\nsoon you won’t be able to buy chewing gum without someone recording\nyour transaction.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Inflation</h4>\n<div>\n<p><em>Inflation</em> means the purchasing power of a currency decreases\n(<a>Inflation</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 8. Inflation</div>\n</div>\n<div>\n<div>\n<div>Problems</div>\n<div>\n<ul>\n<li>\n<p>❏ Segregation</p>\n</li>\n<li>\n<p>❏ Privacy issues</p>\n</li>\n<li>\n<p>❏ <strong>Inflation</strong></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div>\n<p>Most currencies are subject to inflation, some more than others. For\nexample, the Zimbabwean dollar inflated nearly 10<sup>23</sup>% from 2007–2008,\npeaking at 80 billion percent per month during a few months in 2008.\nThat’s an average daily inflation rate of nearly 100%. Prices roughly\ndoubled every day.</p>\n</div>\n<div>\n<p>Extreme cases of inflation like this are called <em>hyperinflation</em>,\nand are usually driven by a rapid increase in the money\nsupply. Governments sometimes increase the money supply as a tool to\nextract value from the population and pay for expenses such as the\nnational debt, warfare, or welfare. If this tool is overused, the risk\nof hyperinflation is apparent.</p>\n</div>\n<div>\n<p>A rapid increase in the money supply will most likely lead to a\ndepreciation of a country’s currency. This, in turn, pushes people to\nexchange their local currency for goods or alternative currencies that\nbetter hold value, which further drives down the value of the local\ncurrency. This can spiral to extremes, as in Zimbabwe. The result is\ndevastating for people as they see their life savings diminish to\nvirtually nothing. <a>Some hyperinflations in modern time. Source: Wikipedia</a> shows examples of recent\nhyperinflations.</p>\n</div>\n\nTable 1. Some hyperinflations in modern time. Source: Wikipedia\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Country</th>\n<th>Year</th>\n<th>Worst monthly inflation (%)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>Zimbabwe</p></td>\n<td><p>2007-2008</p></td>\n<td><p>4.19*10<sup>16</sup></p></td>\n</tr>\n<tr>\n<td><p>Yugoslavia</p></td>\n<td><p>1992-1994</p></td>\n<td><p>313*10<sup>6</sup></p></td>\n</tr>\n<tr>\n<td><p>Peru</p></td>\n<td><p>1990</p></td>\n<td><p>397</p></td>\n</tr>\n<tr>\n<td><p>Ukraine</p></td>\n<td><p>1992-1994</p></td>\n<td><p>285</p></td>\n</tr>\n<tr>\n<td><p>Venezuela</p></td>\n<td><p>2012-</p></td>\n<td><p>120</p></td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>Zimbabwe is one of the most extreme cases of inflation throughout\nhistory, but even today, some countries suffer from very high inflation.\nOne is Venezuela, where its currency, the bolívar, experienced an 254%\ninflation rate during 2016 and suffered from about a 1,088% inflation\nrate in 2017. A staggering 1,370,000% inflation rate is forecast for\n2018.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Borders</h4>\n<div>\n<p>Moving value across national borders using national, or <em>fiat</em>,\ncurrency is hard, expensive, and sometimes even forbidden. If you want\nto send 1,000 Swedish crowns (SEK) from Sweden to a person in the\nPhilippines, you can use a service like Western Union for the transfer.\nAt the time I investigated this, 1,000 SEK was worth 5,374 Philippine\npesos (PHP) or 109 US dollars. See <a>Cost of sending 5,374 PHP from Sweden to the Philippines</a>.</p>\n</div>\n\nTable 2. Cost of sending 5,374 PHP from Sweden to the Philippines\n\n\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Send from</th>\n<th>Receive to</th>\n<th>Received by recipient</th>\n<th>Fees</th>\n<th>Fees %</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>Bank</p></td>\n<td><p>Bank</p></td>\n<td><p>5,109 PHP</p></td>\n<td><p>265 PHP</p></td>\n<td><p>4.9%</p></td>\n</tr>\n<tr>\n<td><p>Bank</p></td>\n<td><p>Cash</p></td>\n<td><p>4,810 PHP</p></td>\n<td><p>564 PHP</p></td>\n<td><p>10.5%</p></td>\n</tr>\n<tr>\n<td><p>Credit card</p></td>\n<td><p>Cash</p></td>\n<td><p>4,498 PHP</p></td>\n<td><p>876 PHP</p></td>\n<td><p>16.3%</p></td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>If the recipient has a bank account that can receive an international\nmoney transfer, you can get away with a 4.9% fee. But a typical\nremittance recipient will be able to receive only cash, which doubles\nor triples the cost to 10.5% or 16.3%, depending on how quickly or\nconveniently they want it.</p>\n</div>\n<div>\n<div>\n<div>Problems</div>\n<div>\n<ul>\n<li>\n<p>❏ Segregation</p>\n</li>\n<li>\n<p>❏ Privacy issues</p>\n</li>\n<li>\n<p>❏ Inflation</p>\n</li>\n<li>\n<p>❏ <strong>Borders</strong></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div>\n<p>In contrast with international transfers, moving fiat currency within\na nation state’s borders is usually convenient. For example, you can\nhand over cash directly to the recipient or transfer money using some\nmobile app made specifically for the currency. As long as you stay\nwithin one country and one currency, fiat currencies usually do a\ngood job.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>The Bitcoin approach</h3>\n<div>\n<p>Bitcoin offers a fundamentally different model than traditional\nfinancial institutions. Let’s explore the major differences one\nby one.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Decentralized</h4>\n<div>\n<p>Instead of a central organization such as the US Federal Reserve\ncontrolling the currency, control of Bitcoin is distributed among\nthousands of computers, or nodes. No single node or group of nodes has\nmore privileges or obligations than any other. This equality between\nnodes makes Bitcoin <em>decentralized</em>, as opposed to <em>centralized</em>\nsystems, such as banks or the Google search engine\n(<a>Centralized and decentralized services</a>).</p>\n</div>\n<div>\n<p>In a centralized system, the service is controlled by a single entity,\nsuch as a bank. This single entity can decide who gets to use the\nservice and what the user is allowed to do. For example, an online video\nservice can choose to provide a video only to people in a certain\ngeographical location.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 9. Centralized and decentralized services</div>\n</div>\n<div>\n<div>\n<div>Problems fixed</div>\n<div>\n<ul>\n<li>\n<p>✓ <strong>Segregation</strong></p>\n</li>\n<li>\n<p>✓ <strong>Privacy issues</strong></p>\n</li>\n<li>\n<p>❏ Inflation</p>\n</li>\n<li>\n<p>❏ Borders</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div>\n<p>With a decentralized system such as Bitcoin, which has several\nthousands of nodes spread around the globe, it’s extremely hard to\ncontrol who uses the system and how. No matter where or who they are, or\nto whom they’re sending money, the Bitcoin system will treat all users\nequally. The Bitcoin system has no central point that can be exploited\nto censor payments, deny users service, or seize funds.</p>\n</div>\n<div>\n<p>As mentioned, Bitcoin is permissionless, which means you don’t need to\nask anyone for permission to participate. Anyone with a computer and an\ninternet connection can set up a Bitcoin node and take an active role in\nthe Bitcoin network—no questions asked, no registration required.</p>\n</div>\n<div>\n<p>Changing the rules of Bitcoin is nearly impossible without broad\nconsensus. If a node doesn’t obey the rules, the rest of the nodes will\nignore it. For example, one rule is that Bitcoin’s money supply is\nlimited to 21 million bitcoins. This limit is nearly impossible to\nchange because of decentralization; there’s no one you can threaten or\nbribe to change these rules.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Limited supply</h4>\n<div>\n<div>\n<div>Problems fixed</div>\n<div>\n<ul>\n<li>\n<p>✓ Segregation</p>\n</li>\n<li>\n<p>✓ Privacy issues</p>\n</li>\n<li>\n<p>✓ <strong>Inflation</strong></p>\n</li>\n<li>\n<p>❏ Borders</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div>\n<p>Because Bitcoin’s money supply won’t exceed 21 million bitcoins, people\ncan be sure that if they own 1 bitcoin, they will <em>always</em> own at\nleast one 21-millionth of the total supply of bitcoins. This feature\nisn’t found in any fiat currency, where decisions on supply are made\nevery so often by a company or state. Bitcoin is resistant to high\ninflation because you can’t increase the money supply at will.</p>\n</div>\n<div>\n<p>Bitcoin’s money supply isn’t fixed today. It’s increasing, at a\ndiminishing rate, according to a <em>predetermined</em> schedule and will\neventually stop increasing around the year 2140. See <a>The supply of bitcoins approaches 21 million over time. The increase is barely visible during the last 100 years before 2140.</a>.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 10. The supply of bitcoins approaches 21 million over time. The increase is barely visible during the last 100 years before 2140.</div>\n</div>\n<div>\n<p>As of this writing, the money supply is about 17 million bitcoins, and\nthe current yearly increase is at roughly 4%. This increase is halved\nevery four years.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Borderless</h4>\n<div>\n<div>\n<div>Problems fixed</div>\n<div>\n<ul>\n<li>\n<p>✓ Segregation</p>\n</li>\n<li>\n<p>✓ Privacy issues</p>\n</li>\n<li>\n<p>✓ Inflation</p>\n</li>\n<li>\n<p>✓ <strong>Borders</strong></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div>\n<p>Because Bitcoin is a system run by ordinary computers connected to the\ninternet, it’s as global as the internet. This means anyone with an\ninternet connection can send money to other people across the world,\nas <a>Borderless</a> illustrates.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 11. Bitcoin is borderless</div>\n</div>\n<div>\n<p>There is no difference between sending a bitcoin to someone in the\nsame room or sending it to someone on another continent. The\nexperience is the same: money is sent directly to the recipient, who\nsees the payment nearly instantaneously. Within about 60 minutes, this\nrecipient can be <em>sure</em> the money is theirs. Once settled, the\ntransfer can’t be reversed without the recipient’s consent.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>How is Bitcoin used?</h3>\n<div>\n<p>So far, we’ve touched on a few common use cases for Bitcoin. This\nsection will dig deeper into those use cases and a few others. It’s\nhard to predict what use cases we’ll see in the future, so let’s stick\nto what we know now.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Savings</h4>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>One interesting Bitcoin feature is that you keep your money safe by\nstoring a set of private keys: the secret pieces of information you’ll\nneed when you want to spend your money. You choose how those private\nkeys are stored. You can write them on paper, or you can store them\nelectronically with a mobile app to have easy access to them. You can\nalso memorize your private keys. These keys are all anyone needs to\nspend your money. Keep them safe.</p>\n</div>\n<div>\n<p>Savings is an attractive use case for Bitcoin. A simple way to save is\nto create a private key and write it down on a piece of paper that you\nstore in a safe. This piece of paper is now your savings account, your\nsavings wallet. You can then send bitcoins to your wallet. As long as\nyour private key is kept safe, your money is safe. You can choose from\na lot of different saving schemes to find the right balance between\nsecurity and convenience. For example, you can keep your keys\nunencrypted in your mobile phone for easy access or store them\nencrypted on paper in a vault with armed guards.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Cross-border payments</h4>\n<div>\n<p>As noted, moving money from one country to another is expensive (say,\n15%), especially if you move money to a poor country, and the\nrecipient doesn’t have a bank account. It’s becoming increasingly\npopular to use Bitcoin to circumvent this expensive and slow legacy\nsystem. It’s usually cheaper to exchange Swedish crowns for bitcoins\nin Sweden and transfer the bitcoins to your friend in the\nPhilippines. Your friend will then exchange the bitcoins locally for\nPhilippine pesos.</p>\n</div>\n<div>\n<p>Some companies offer services so that you pay Swedish crowns to the\ncompany and the company pays out Philippine pesos to your friend\n(<a>A remittance company uses Bitcoin to transfer money from Sweden to the Philippines.</a>). You won’t even know that Bitcoin is used\nunder the hood. Such companies typically charge a few percent for the\nservice, but it will still be cheaper than traditional remittance\nservices.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 12. A remittance company uses Bitcoin to transfer money from Sweden to the Philippines.</div>\n</div>\n<div>\n<p>Of course, if recipients can make good use of Bitcoin where they live,\nthere’s no need for a middleman that takes a cut of the money. You can\nsend bitcoins directly to your friend. This is what Bitcoin is all\nabout. Exchanges and other such service companies are just bridges\nbetween the old legacy world and the new Bitcoin world.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Shopping</h4>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>The most obvious use case for Bitcoin is shopping. Bitcoin’s\nborderlessness and security make it ideal for online payments for\ngoods and services.</p>\n</div>\n<div>\n<p>In traditional online payments, you send your debit card details to\nthe merchant and <em>hope</em> the merchant will withdraw as much as you\nagreed on.  You also <em>hope</em> the merchant handles your debit card\ndetails with great care. They probably store the details in a\ndatabase. Think about that: for every debit card purchase you make,\nyour card details will be stored in that merchant’s database. It’s\nlikely that <em>one</em> of the databases will be hacked and your card\ndetails stolen. The more merchants store your details, the higher the\nrisk.</p>\n</div>\n<div>\n<p>With Bitcoin, you don’t have that problem because you don’t send any\nsensitive information to the merchant, or anyone else. You transfer\nthe amount of money you agreed on and nothing more.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Speculation</h4>\n<div>\n<p>The world is full of people wanting to get rich quick. Bitcoin can be\nalluring to them because of its price <em>volatility</em>, or tendency to\nchange. Looking at the history of bitcoin’s price, as shown in\n<a>Price in USD since the beginning of Bitcoin</a>, it’s tempting to try to buy when it’s low and sell when\nit’s high.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 13. Price in USD since the beginning of Bitcoin</div>\n</div>\n<div>\n<p>In November 2013, the price climbed from about $100 USD to more than\n$1100 in a few weeks. This was clearly a so-called <em>bubble</em>, in which\npeople were afraid of missing out on a great rise, so they bought in,\ndriving the price further up, until it eventually started dropping\nagain. The drop to 50% of its peak value was just as quick as its rise.\nThe same pattern repeated in late 2017 but at a greater magnitude. This\nhas happened many times already. Fluctuations like this are rarely\ndriven by any specific news or technological advancement, but usually\narise from speculation. Speculation can be fun, if you can afford to\nlose, but it’s more like a lottery than something to make a living from.</p>\n</div>\n<div>\n<p>Sometimes a government or big corporation makes a negative statement\nabout Bitcoin that creates fear in the market, but those events tend to\nhave a limited effect on bitcoin’s value.</p>\n</div>\n<div>\n<p>Bitcoin’s price volatility seems contradictory to the claims of it\nhaving a non-inflationary property; a 50% drop in market value appears\npretty inflationary. Bitcoin is still relatively new, and lots of\nshort-term speculation causes this volatility. But as Bitcoin grows and\nmore people and institutions start using it to store their wealth, it\nwill probably stabilize in the long run, and its deflationary property\nwill emerge over time.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Noncurrency uses</h4>\n<div>\n<p>Bitcoin is digital cash, but this form of cash can be used for things\nbeyond money. This section covers two common uses, but there are\nothers, including those not yet invented.</p>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Ownership</h5>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Bitcoin lets you embed small pieces of data with payments. This data\ncan be, for example, a chassis number of a car. When the car leaves\nthe factory, the manufacturer can make a small Bitcoin payment to the\nnew car owner, containing the chassis number. This payment will then\nrepresent the transfer of ownership for that car.</p>\n</div>\n<div>\n<p>Bitcoin payments are public records, but they aren’t tied to people in\nany way. They’re tied to long strings of numbers called <em>public\nkeys</em>, explained in detail in <a>[ch02]</a>. The car manufacturer has made\nits public key available on its website, in newspapers, and in\nadvertisements to tie the key to the manufacturer’s identity. Anyone\ncan then verify that the manufacturer has transferred ownership of the\ncar to the new owner. The new owner can show that she owns the car by\nproving that she owns the private key belonging to the public key to\nwhich the manufacturer has transferred ownership.</p>\n</div>\n<div>\n<p>The new owner can sell the car to someone else and transfer ownership\nby sending the same bitcoins she got from the manufacturer to the new\nowner’s public key. The general public can follow the car’s ownership\nfrom the manufacturer through every owner’s public key up to the\ncurrent owner.</p>\n</div>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Proof of existence</h5>\n<div>\n<p>Using the same technique to store data in a Bitcoin payment to transfer\nownership of a car, you can prove that a document existed prior to a\ncertain point in time.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>A digital document has a <em>fingerprint</em>: a cryptographic hash that\nanyone can calculate from that document. Creating a different document\nwith the same fingerprint is practically impossible. This fingerprint\ncan be attached to a Bitcoin payment. Where the money goes is\nirrelevant; the important thing is that the fingerprint is recorded in\nthe Bitcoin blockchain. You “anchor” the document in the blockchain.</p>\n</div>\n<div>\n<p>Bitcoin payments are public records, so anyone can verify that the\ndocument existed before the time of the payment by taking the\ndocument’s fingerprint and comparing it to the fingerprint stored in\nthe blockchain.</p>\n</div>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>How is Bitcoin valued?</h4>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>As you read in the <a>Speculation</a>, a bitcoin’s price can\nfluctuate dramatically. But where does this price come from? Several\nBitcoin exchanges exist, most of them internet-based. They resemble\nstock markets, where users wanting to sell bitcoins are matched with\nusers wanting to buy bitcoins.</p>\n</div>\n<div>\n<p>Different markets can have different market prices depending on the\nsupply and demand in that market. For example, in countries such as\nVenezuela, where the government tries to hinder the Bitcoin market, the\nsupply is low. But the demand is high because people want to escape\ntheir hyperinflating currency. These factors drive the Bitcoin price up\nin that market compared to, for example, the US and European markets,\nwhere people can trade more freely.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>When not to use Bitcoin</h4>\n<div>\n<p>Bitcoin is nice and all, but it’s not suitable for all financial\nactivity. At least, not yet.</p>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Tiny payments</h5>\n<div>\n<p>A Bitcoin transaction should usually include a processing fee. This fee\nisn’t related to the amount sent but to how big the transaction is in\nbytes. This is because the Bitcoin network’s cost for processing a\ntransaction depends mostly on how big (in bytes) the transaction is.\nHigh-value transactions aren’t bigger (in bytes) than low-value\ntransactions, so the fee is about the same for both kinds of\ntransactions. The fee required for a transaction also depends on supply\nand demand for available space in the blockchain. The blockchain can’t\nhandle more than roughly 12 MB of transactions per hour, which means\nminers sometimes have to prioritize transactions. Paying a higher fee\nwill probably give your transaction a higher priority.</p>\n</div>\n<div>\n<p>If the fee is a significant share of the actual payment you want to\nmake, it isn’t economically viable to pay with ordinary Bitcoin\ntransactions (see <a>Feasibility of different fee levels</a>).</p>\n</div>\n\nTable 3. Feasibility of different fee levels\n\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Amount to transfer</th>\n<th>Fee</th>\n<th>Fee %</th>\n<th>Feasible</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>2 BTC</p></td>\n<td><p>0.003 BTC</p></td>\n<td><p>0.15%</p></td>\n<td><p>Yes</p></td>\n</tr>\n<tr>\n<td><p>0.002 BTC</p></td>\n<td><p>0.001 BTC</p></td>\n<td><p>50%</p></td>\n<td><p>Probably not</p></td>\n</tr>\n<tr>\n<td><p>0.001 BTC</p></td>\n<td><p>0.005 BTC</p></td>\n<td><p>500%</p></td>\n<td><p>No</p></td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>But promising emerging technologies are being built on top of Bitcoin.\nOne example is the Lightning Network, which allows for cheap,\ninstantaneous micropayments of tiny fractions of a bitcoin. Using the\nLightning Network, you could potentially pay just 100 satoshis (where\n1 satoshi = 0.00000001 BTC) at a fee of as little as 1 satoshi.</p>\n</div>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Instant payments</h5>\n<div>\n<p>Bitcoin payments take time to confirm. The recipient sees the payment\nimmediately but shouldn’t trust the payment until the Bitcoin network\nconfirms it, which typically happens within 20 minutes. Trusting an\nunconfirmed transaction can be risky; the sender can <em>double spend</em> the\nbitcoins by sending the same bitcoins in another transaction to another\nBitcoin address—for example, the sender’s.</p>\n</div>\n<div>\n<p>The confirmation time can add friction in brick-and-mortar shops because\ncustomers don’t want to wait 20 minutes before getting their coffee.\nThis might not be a big issue in some online shops, where the shop can\nwait 20 minutes before sending the goods to the customer; but some\nonline services, such as pay-per-view, could find the confirmation time\nproblematic.</p>\n</div>\n<div>\n<p>This limitation can also be fixed by systems built on top of Bitcoin—for\nexample, the Lightning Network—especially when the payment amount is\nsmall.</p>\n</div>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Savings you can’t afford to lose</h5>\n<div>\n<p>Bitcoin is probably the most secure money there is, but it’s still in\nits infancy. Things <em>could</em> go bad with Bitcoin, as in the following\nscenarios:</p>\n</div>\n<div>\n<div>\n<div>Bitcoin security</div>\n<div>\n<p>You are in charge of the security of your bitcoins. Only you. Be careful!</p>\n</div>\n</div>\n</div>\n<div>\n<ul>\n<li>\n<p>You lose your private keys: the secrets you must have to spend your\nmoney.</p>\n</li>\n<li>\n<p>Your private keys are stolen by some bad guy.</p>\n</li>\n<li>\n<p>The government in your location tries to crack down on Bitcoin users\nby imprisonment or other means of force.</p>\n</li>\n<li>\n<p>The price of Bitcoin swings down dramatically due to rumors or\nspeculation.</p>\n</li>\n<li>\n<p>Software bugs make Bitcoin insecure.</p>\n</li>\n<li>\n<p>Weaknesses arise in the cryptography Bitcoin uses.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>Although all these risks are <em>possible</em>, most of them are unlikely.\nThis list is somewhat ordered with the most likely at the top. Always\nweigh the risks before putting money on the line, and select your\nsecurity measures accordingly. This book will help you understand the\nrisks and how to secure your money.</p>\n</div>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Other cryptocurrencies</h3>\n<div>\n<p>This book will cover Bitcoin, but several other so-called\n<em>crypto\xadcurrencies</em> exist, and new ones pop up all the time.\nCryptocurrencies other than Bitcoin are often referred to as\n<em>alt-coins</em>, meaning <em>alternative coins</em>. I’ll list a few alt-coins\nalong with their purpose and market capitalization, or <em>market cap</em>\n(<a>Market capitalization of a few cryptocurrencies as of 11 November 2018</a>). The market cap is the product of the money supply (number\nof coins) and the current market price per coin. Note that the market\ncap will most likely have changed a lot by the time you read this. I\ninclude this information only to give you a glimpse of Bitcoin’s\nposition relative to other cryptocurrencies.</p>\n</div>\n\nTable 4. Market capitalization of a few cryptocurrencies as of 11 November 2018\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Currency</th>\n<th>Purpose</th>\n<th>Market cap (billions of dollars)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p><span><a><img/></a></span></p></td>\n<td><p>Global money; included for reference</p></td>\n<td><p>111</p></td>\n</tr>\n<tr>\n<td><p><span><a><img/></a></span></p></td>\n<td><p>Running software on a decentralized abstract computer</p></td>\n<td><p>22.4</p></td>\n</tr>\n<tr>\n<td><p><span><a><img/></a></span></p></td>\n<td><p>Privacy</p></td>\n<td><p>1.7</p></td>\n</tr>\n<tr>\n<td><p><span><a><img/></a></span></p></td>\n<td><p>Privacy</p></td>\n<td><p>0.8</p></td>\n</tr>\n<tr>\n<td><p><span><a><img/></a></span></p></td>\n<td><p>Naming system; complements the domain name system (DNS)</p></td>\n<td><p>0.008</p></td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>I encourage you to look up these cryptocurrencies, because they all\nprovide interesting new features beyond Bitcoin. Hundreds of other\nalt-coins exist. Some, such as those in the table, provide unique\nfeatures that aren’t available in Bitcoin, and others provide little to\nnothing innovative. Some alt-coins may even be outright scams. Stay\nvigilant.</p>\n</div>\n<div>\n<p>Anyone can create an alt-coin by taking existing cryptocurrency software\nand modifying it to their needs.</p>\n</div>\n<div>\n<p>Let’s say Sheila wants to start an alt-coin, Wowcoin. She takes the\nBitcoin software and changes the maximum money supply to 11,000,000,\ninstead of Bitcoin’s 21,000,000 coins. When she starts Wowcoin, Sheila\nwill be lonely because no one else is using her alt-coin. If she wants\nWowcoin to have some real value, she must convince other people to begin\nusing it. If she’s not providing anything innovative, she’s going to\nhave a hard time getting other people on board, because they’re pretty\nhappy with what Bitcoin already provides. Everybody else is using\nBitcoin, so why would you use Wowcoin? Think of it as starting a new\ninternet that you call Wownet. People on Wownet won’t be able to use\nservices on the internet. Conversely, people on the internet won’t be\nable to use your service if you’re on Wownet. So why would anyone use\nWownet? We call this the <em>network effect</em> (see <a>Network effect</a>)—people tend\nto go where other people are.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 14. Network effect</div>\n</div>\n<div>\n<p>Although some interesting alt-coins are out there, it’s hard to tell\nwhich of these will survive long-term. Also, picking one or a few\nalt-coins to cover in this book would be an arbitrary choice.\nConsequently, I focus solely on Bitcoin.</p>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Summary</h3>\n<div>\n<ul>\n<li>\n<p>Bitcoin is global, borderless money that anyone with an internet\nconnection can use.</p>\n</li>\n<li>\n<p>Many different actors use Bitcoin, including savers, merchants, and\ntraders for various purposes, such as payments, remittances, and\nsavings.</p>\n</li>\n<li>\n<p>A network of computers, the Bitcoin network, verifies and keeps records\nof all payments.</p>\n</li>\n<li>\n<p>A transaction goes through the following steps: send transaction, verify\ntransaction, add transaction to the blockchain, and notify the recipient\nand sender wallets.</p>\n</li>\n<li>\n<p>Bitcoin solves problems with inflation, borders, segregation, and\nprivacy by providing limited supply, decentralization, and\nborderlessness.</p>\n</li>\n<li>\n<p>Several alternative cryptocurrencies exist apart from Bitcoin, such as\nEthereum, Zcash, and Namecoin.</p>\n</li>\n<li>\n<p>A (crypto)currency becomes more useful as more users use it. This is\ncalled the network effect.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div></article>', 'body': '\nIntroduction to Bitcoin\n\n\n\n\nGetting to know Bitcoin\n\n\nFollowing a Bitcoin payment\n\n\nProblems solved by Bitcoin\n\n\n\n\nThe goal of this book is to teach you enough about Bitcoin to make\ninformed decisions about how you can use it to improve your private life\nor business. My hope is that you’ll learn enough to make up your own\nmind whether you trust Bitcoin or not (with any luck, the former). To\nget you off the ground, I’m going to assume you know roughly what the\nfollowing terms mean:\n\n\n\n\nComputer program\n\n\nDatabase\n\n\nComputer network\n\n\nWeb server\n\n\n\n\nIf you’re unsure of any of these terms, don’t worry. Either look them up\nor go ahead anyway—I think you’ll manage.\n\n\nWhat is Bitcoin?\n\n\nBitcoin or bitcoin?\n\nThe system is named Bitcoin with a capital B. The currency unit is\ncalled a bitcoin with a lowercase b. Commonly used symbols for\nbitcoins are {btc}, BTC, and XBT. We’ll mostly use BTC in this book.\n\n\n\n\nBitcoin is a digital cash system. It allows for people to move bitcoins,\nthe currency unit of Bitcoin, between each other without using a bank or\nany other trusted third party. It resembles traditional bank notes and\ncoins, but it’s purely digital and used over the internet. The Bitcoin\ncurrency isn’t tied to any specific fiat currency like the US dollar\nor the Chinese renminbi; it has free-floating exchange rates against\nmost fiat currencies. You can buy and sell bitcoins for fiat currencies\nonline using one of several exchanges, such as kraken.com, bitstamp.net,\nor localbitcoins.com.\n\n\nNo government or company controls Bitcoin. Instead, thousands of\ncomputers around the globe—the Bitcoin network, shown in\nThe Bitcoin network and its ecosystem.—collectively keep the system working 24/7. You don’t need\nto register or sign up anywhere to use Bitcoin, you just need internet\naccess and a computer program, like a mobile app, to use it.\n\n\n\n\n\nFigure 1. The Bitcoin network and its ecosystem.\n\n\nAnyone can use or participate in the Bitcoin network without special\npermission from a bank or similar institution. Thanks to Bitcoin’s\npermissionless nature, a lot of Bitcoin-related technology has emerged\nover the years. We can roughly categorize participants in this Bitcoin\necosystem into several groups:\n\n\n\nBitcoin doesn’t care\n\nThe Bitcoin network doesn’t distinguish between users. No user is more\nimportant than any other user. It doesn’t matter who they are or what\nthey do; everyone participates on the same terms.\n\n\n\n\n\nEnd users\n\nPeople using Bitcoin for their day-to-day needs, such as\nsavings, shopping, speculation, or salaries\n\nCorporate users\n\nCompanies using Bitcoin to solve their business\nneeds, such as paying wages internationally, or use cases similar to\nthose of end users\n\nMerchants\n\nFor example, a restaurant or a bookstore accepting Bitcoin\npayments\n\nBitcoin services\n\nCompanies providing Bitcoin-related services to\ncustomers, such as topping up mobile phones, anonymization services,\nremittance services, or tipping services\n\nExchanges\n\nCommercial services people can use to exchange their local\ncurrency to and from bitcoins\n\nProtocols on top\n\nSystems that operate “on top” of Bitcoin to perform\ncertain tasks, such as payment network protocols, specialized tokens,\nand decentralized exchanges\n\nBitcoin developers\n\nPeople working, often for free, with the open\nsource computer programs that participants of the Bitcoin network use\n\n\n\n\nThe Bitcoin network’s job is to process Bitcoin payments, secure the\nledger of who owns what from unauthorized modifications, and get new\nbitcoins into circulation at the predetermined rate. The network\nconsists of thousands of computers around the world. We call these\ncomputers Bitcoin nodes, or just nodes. Any of the actors\nmentioned previously can also participate actively in the Bitcoin\nnetwork by running their own Bitcoin node. You must run your own node if\nyou don’t want to trust others to provide you with correct financial\ninformation.\n\n\n\nThe big picture\n\nThe Bitcoin network is a network of computers running Bitcoin\nsoftware.  This network verifies and confirms payments between Bitcoin\nusers.\n\n\nSuppose Alice wants to make a payment of 1 BTC to Bob. The payment\nstarts with Alice creating a transaction and sending it to the Bitcoin\nnetwork, as shown in A Bitcoin payment. The payment is processed in four steps.. I outline the process’s\nfour steps here and explain each step further in the following\nsubsections. A Bitcoin payment. The payment is processed in four steps. will appear in the introduction of\nchapters 2 through 8, where I’ll point out which part of the figure\nwe’ll cover in the chapter.\n\n\n\n\n\nFigure 2. A Bitcoin payment. The payment is processed in four steps.\n\n\n\nI thought Bitcoin was anonymous!\n\nBitcoin doesn’t use names or any other personal information, but I use\nnames in this first example for simplicity.\n\n\n\n\nNow, let’s follow Alice’s payment from Alice to Bob:\n\n\n\n\nAlice creates and signs a transaction that moves 1 bitcoin from her to\nBob. She then sends the transaction to the Bitcoin network.\n\n\nThe computers in the network—the Bitcoin nodes—check that Alice actually\nhas the money to spend and that the transaction is authentic. They then\npass the transaction to their neighbors, called peers.\n\n\nEach computer updates its own copy of the Bitcoin blockchain, or the\nledger, with the new payment information.\n\n\nThe network notifies Bob that he has received 1 bitcoin.\n\n\n\n\nNote how Alice does not really send 1 bitcoin to Bob, but asks the\nBitcoin network to move 1 bitcoin from Alice to Bob in the Bitcoin\nblockchain.\n\n\nThe Bitcoin blockchain is a database that each computer in the Bitcoin\nnetwork has a copy of. Think of the blockchain as a ledger of all\ntransactions ever made.\n\n\nWe’ll go through these steps in more detail in the next four sections,\none step per section.\n\n\nStep 1: Transactions\n\n\nTransaction\n\nA transaction is a payment. The terms are interchangeable. We\ncover transactions in [ch05] and [ch09].\n\n\n\n\nStep 1 of the process (Alice creates a transaction, signs it, and sends it to one or more Bitcoin nodes in the Bitcoin network.) is when Alice asks the\nnetwork to move 1 bitcoin to Bob. She does this by sending a Bitcoin\ntransaction to the Bitcoin network. This transaction contains\ninstructions on how to move the money and a digital signature that\nproves it’s really Alice requesting that the money be moved.\n\n\n\n\n\nFigure 3. Alice creates a transaction, signs it, and sends it to one or more Bitcoin nodes in the Bitcoin network.\n\n\nThe Bitcoin transaction is a piece of data specifying\n\n\n\n\nThe amount to move (1 bitcoin)\n\n\nThe Bitcoin address to move the money to (Bob’s Bitcoin address,\n15vwoaN74MBeF5nr2BH4DKqndEFjHA6MzT)\n\n\nA digital signature (made with Alice’s private key)\n\n\n\n\n\nDigital signatures\n\nWe’ll discuss digital signatures in depth in [ch02].\n\n\n\n\nThe digital signature is created from the transaction and a huge\nsecret number, called a private key, that only Alice has\naccess to. The result is a digital signature that only the private\nkey’s owner could have created.\n\n\nAlice’s mobile wallet app is connected to one or more nodes in the\nBitcoin network and sends the transaction to those nodes.\n\n\n\nStep 2: The Bitcoin network\n\nAlice has sent a transaction to one or more Bitcoin nodes. In step 2\nof the process (Alice has sent her transaction to a node in the network. The node verifies the transaction and forwards it to other nodes. Eventually, the transaction will reach all nodes in the network.), each such node checks\nthat the transaction is valid and passes it on to its peers. It does\nthis by consulting its local copy of the blockchain and verifying that\n\n\n\n\nThe bitcoin that Alice spends exists.\n\n\nAlice’s digital signature is valid.\n\n\n\n\n\n\n\nFigure 4. Alice has sent her transaction to a node in the network. The node verifies the transaction and forwards it to other nodes. Eventually, the transaction will reach all nodes in the network.\n\n\n\nInvalid transactions\n\nInvalid transactions are dropped. They won’t reach further than the first node.\n\n\n\n\nIf all checks pass, a node forwards the transaction to its peers in\nthe Bitcoin network. This is known as relaying. Alice’s\ntransaction will shortly have traveled the entire network while each\nnode verifies it along the way. The blockchain hasn’t been updated\nyet; that’s the next step.\n\n\n\nStep 3: The blockchain\n\n\nThe blockchain\n\nThe name blockchain comes from how the ledger is structured. It uses\nblocks that are chained together in such a way that modifications to the\nblockchain can be detected. I’ll have more on that in [ch06].\n\n\n\n\nIn step 3, nodes update their local copies of the Bitcoin blockchain\nwith Alice’s transaction. The blockchain contains historic information\nabout all previous transactions; new transactions, such as Alice’s, are\nappended to it every now and then.\n\n\nUpdating the blockchain with Alice’s transaction isn’t as\nstraightforward as it might seem. Alice’s transaction isn’t the only\none going on in the Bitcoin network. Potentially thousands of\ntransactions can be in flight at the same time. If all nodes updated\ntheir copy of the blockchain as they received transactions, the copies\nwouldn’t remain copies for long because transactions can come in\ndifferent orders on different nodes, as Transactions arrive in different orders at different nodes. If all nodes wrote their transactions to the blockchain in order of arrival, the different nodes’ blockchains would differ. shows.\n\n\n\n\n\nFigure 5. Transactions arrive in different orders at different nodes. If all nodes wrote their transactions to the blockchain in order of arrival, the different nodes’ blockchains would differ.\n\n\nTo coordinate the ordering of transactions, one node takes the lead,\nsaying “I want to add these two transactions to the blockchain in the\norder Y, X!” This message, known as a block, is sent out on the\nnetwork by that leader (One node takes the lead and tells the others in what order to add transactions. The other nodes verify the block and update their blockchain copies accordingly.), in the same way that Alice sent the\ntransaction.\n\n\n\n\n\nFigure 6. One node takes the lead and tells the others in what order to add transactions. The other nodes verify the block and update their blockchain copies accordingly.\n\n\n\nThe blockchain is append-only\n\nNew transactions are added to the end of the blockchain only—it grows\nonly from the end.\n\n\n\n\nAs nodes see this block, they update their copy of the blockchain\naccording to the message and pass the block on to their peers. Alice’s\ntransaction was one of the transactions in the block and is now part of\nthe blockchain.\n\n\nWhy would a node want to take the lead? The node that takes the lead is\nrewarded with newly minted bitcoins and transaction fees paid by the\ntransactions it includes in the block.\n\n\nBut wouldn’t every node constantly take the lead to collect the\nrewards? No, because to take the lead, a node must solve a hard problem.\nThis requires the node to consume considerable time and electricity,\nwhich ensures that leaders don’t pop up often. The problem is so hard\nthat most nodes in the network don’t even try. Nodes that do try are\ncalled miners because they mine new coins, similar to a gold miner\ndigging for gold. We’ll discuss this process further in [ch07].\n\n\n\nStep 4: Wallets\n\nBob and Alice are Bitcoin network users, and they both need a computer\nprogram to interact with the network. Such a program is called a\nBitcoin wallet. Several types of Bitcoin wallets are available for\ndifferent devices, such as mobile phones and desktop computers, and\nthere are even specialized hardware wallet devices.\n\n\nBefore step 4 of the payment process, the nodes in the network update\ntheir local copy of the blockchain. Now, the network needs to notify\nAlice and Bob that the transaction went through, as\nBob’s wallet has asked a node to notify the wallet upon activity at Bob’s Bitcoin address. Alice pays to Bob’s address, and the node has just written the transaction to the blockchain, so it notifies Bob’s wallet. shows.\n\n\n\n\n\nFigure 7. Bob’s wallet has asked a node to notify the wallet upon activity at Bob’s Bitcoin address. Alice pays to Bob’s address, and the node has just written the transaction to the blockchain, so it notifies Bob’s wallet.\n\n\n\nWallet duties\n\nA typical Bitcoin wallet will\n\n\n\n\nManage keys\n\n\nWatch incoming/outgoing bitcoins\n\n\nSend bitcoins\n\n\n\n\n\n\nBob’s wallet is connected to some of the nodes in the Bitcoin network.\nWhen a transaction concerning Bob is added to the blockchain, the\nnodes that Bob’s wallet is connected to will notify Bob’s wallet. The\nwallet will then display a message to Bob that he received 1\nbitcoin. Alice also uses a wallet. Her wallet will be notified of her\nown transaction.\n\n\nBesides sending and receiving transactions, Bob’s and Alice’s wallets\nalso manage their private keys for them. As described earlier, a\nprivate key is used to create digital signatures, as well as to\ngenerate a Bitcoin address. Alice created her digital signature with\none of her private keys. When Bob later wants to spend the money he\nreceived at his Bitcoin address, which he generated from his private\nkey, he needs to create a transaction and digitally sign it with that\nprivate key.\n\n\n\n\nProblems with money today\n\nBitcoin wouldn’t be this widespread if it didn’t solve real problems\nfor real people. Bitcoin solves several problems inherent to the\ntraditional financial system. Let’s look at some commonly discussed\nproblem areas.\n\n\nSegregation\n\nPeople with bank accounts and access to banking services such as\nonline payments or loans are privileged. According to the World Bank,\nabout 38% of the world’s population doesn’t have a bank account (see\n[web-financial-inclusion]). The numbers are slowly improving, but\nmany people are still stuck in a cash-only environment.\n\n\nWithout a bank account and basic banking services, such as online\npayments, people can’t expand their businesses outside their local\ncommunities. A merchant won’t be able to offer goods or services on\nthe internet to increase its customer base. A person living in a rural\narea might have to travel half a day to pay a utility bill or top up\ntheir prepaid mobile phone.\n\n\n\nProblems\n\n\n\n❏ Segregation\n\n\n\n\n\n\nThis segregation between banked people and unbanked people is driven\nby several factors:\n\n\n\n\nBanking services are too expensive for some people.\n\n\nTo use banking services, you need documentation, such as an ID card,\nthat many people don’t have.\n\n\nBanking services can be denied to people with certain political\nviews or those conducting certain businesses. People might also be\ndenied service due to their ethnicity, nationality, sexual\npreferences, or skin color.\n\n\n\n\n\nPrivacy issues\n\n\n\n\n\n\n\n\n\n\nWhen it comes to electronic payments such as credit cards or bank\ntransfers, traditional money poses several privacy problems. States can\neasily\n\n\n\n\nTrace payments\n\n\nCensor payments\n\n\nFreeze funds\n\n\nSeize funds\n\n\n\n\nYou might say, “I have nothing to hide, and the government needs these\ntools to fight crime.” The problem is, you don’t know what your\ngovernment will look like in five years and how that government defines\ncrime. New laws are just an election away. After the next election, your\ngovernment could pass a law that allows it to freeze the funds of people\nwith your political view. In some parts of the world, this is already\nhappening.\n\n\n\nProblems\n\n\n\n❏ Segregation\n\n\n❏ Privacy issues\n\n\n\n\n\n\nWe’ve seen lots of examples in which these powers are abused to\ndisable someone’s ability to transact. For example, the nonprofit\norganization WikiLeaks was put under a blockade in 2010 in which all\ndonations through traditional channels were blocked after pressure\nfrom the US government on the major payment networks, such as Visa and\nMastercard (see [web-wikileaks-blockade]). We’ve also seen how\nCyprus seized 47.5% of all bank deposits exceeding 100,000 € as part\nof a financial rescue program in 2013 ([web-cyprus-seizure]).\n\n\nNote that bank notes and coins usually aren’t affected. As long as\nthere is cash, people can trade freely and privately. In some parts of\nthe world—for example, Sweden—cash is being phased out, which means\nsoon you won’t be able to buy chewing gum without someone recording\nyour transaction.\n\n\n\nInflation\n\nInflation means the purchasing power of a currency decreases\n(Inflation).\n\n\n\n\n\nFigure 8. Inflation\n\n\n\nProblems\n\n\n\n❏ Segregation\n\n\n❏ Privacy issues\n\n\n❏ Inflation\n\n\n\n\n\n\nMost currencies are subject to inflation, some more than others. For\nexample, the Zimbabwean dollar inflated nearly 1023% from 2007–2008,\npeaking at 80 billion percent per month during a few months in 2008.\nThat’s an average daily inflation rate of nearly 100%. Prices roughly\ndoubled every day.\n\n\nExtreme cases of inflation like this are called hyperinflation,\nand are usually driven by a rapid increase in the money\nsupply. Governments sometimes increase the money supply as a tool to\nextract value from the population and pay for expenses such as the\nnational debt, warfare, or welfare. If this tool is overused, the risk\nof hyperinflation is apparent.\n\n\nA rapid increase in the money supply will most likely lead to a\ndepreciation of a country’s currency. This, in turn, pushes people to\nexchange their local currency for goods or alternative currencies that\nbetter hold value, which further drives down the value of the local\ncurrency. This can spiral to extremes, as in Zimbabwe. The result is\ndevastating for people as they see their life savings diminish to\nvirtually nothing. Some hyperinflations in modern time. Source: Wikipedia shows examples of recent\nhyperinflations.\n\n\nTable 1. Some hyperinflations in modern time. Source: Wikipedia\n\n\n\n\n\n\n\nCountry\nYear\nWorst monthly inflation (%)\n\n\n\n\nZimbabwe\n2007-2008\n4.19*1016\n\n\nYugoslavia\n1992-1994\n313*106\n\n\nPeru\n1990\n397\n\n\nUkraine\n1992-1994\n285\n\n\nVenezuela\n2012-\n120\n\n\n\n\nZimbabwe is one of the most extreme cases of inflation throughout\nhistory, but even today, some countries suffer from very high inflation.\nOne is Venezuela, where its currency, the bolívar, experienced an 254%\ninflation rate during 2016 and suffered from about a 1,088% inflation\nrate in 2017. A staggering 1,370,000% inflation rate is forecast for\n2018.\n\n\n\nBorders\n\nMoving value across national borders using national, or fiat,\ncurrency is hard, expensive, and sometimes even forbidden. If you want\nto send 1,000 Swedish crowns (SEK) from Sweden to a person in the\nPhilippines, you can use a service like Western Union for the transfer.\nAt the time I investigated this, 1,000 SEK was worth 5,374 Philippine\npesos (PHP) or 109 US dollars. See Cost of sending 5,374 PHP from Sweden to the Philippines.\n\n\nTable 2. Cost of sending 5,374 PHP from Sweden to the Philippines\n\n\n\n\n\n\n\n\n\nSend from\nReceive to\nReceived by recipient\nFees\nFees %\n\n\n\n\nBank\nBank\n5,109 PHP\n265 PHP\n4.9%\n\n\nBank\nCash\n4,810 PHP\n564 PHP\n10.5%\n\n\nCredit card\nCash\n4,498 PHP\n876 PHP\n16.3%\n\n\n\n\nIf the recipient has a bank account that can receive an international\nmoney transfer, you can get away with a 4.9% fee. But a typical\nremittance recipient will be able to receive only cash, which doubles\nor triples the cost to 10.5% or 16.3%, depending on how quickly or\nconveniently they want it.\n\n\n\nProblems\n\n\n\n❏ Segregation\n\n\n❏ Privacy issues\n\n\n❏ Inflation\n\n\n❏ Borders\n\n\n\n\n\n\nIn contrast with international transfers, moving fiat currency within\na nation state’s borders is usually convenient. For example, you can\nhand over cash directly to the recipient or transfer money using some\nmobile app made specifically for the currency. As long as you stay\nwithin one country and one currency, fiat currencies usually do a\ngood job.\n\n\n\n\nThe Bitcoin approach\n\nBitcoin offers a fundamentally different model than traditional\nfinancial institutions. Let’s explore the major differences one\nby one.\n\n\nDecentralized\n\nInstead of a central organization such as the US Federal Reserve\ncontrolling the currency, control of Bitcoin is distributed among\nthousands of computers, or nodes. No single node or group of nodes has\nmore privileges or obligations than any other. This equality between\nnodes makes Bitcoin decentralized, as opposed to centralized\nsystems, such as banks or the Google search engine\n(Centralized and decentralized services).\n\n\nIn a centralized system, the service is controlled by a single entity,\nsuch as a bank. This single entity can decide who gets to use the\nservice and what the user is allowed to do. For example, an online video\nservice can choose to provide a video only to people in a certain\ngeographical location.\n\n\n\n\n\nFigure 9. Centralized and decentralized services\n\n\n\nProblems fixed\n\n\n\n✓ Segregation\n\n\n✓ Privacy issues\n\n\n❏ Inflation\n\n\n❏ Borders\n\n\n\n\n\n\nWith a decentralized system such as Bitcoin, which has several\nthousands of nodes spread around the globe, it’s extremely hard to\ncontrol who uses the system and how. No matter where or who they are, or\nto whom they’re sending money, the Bitcoin system will treat all users\nequally. The Bitcoin system has no central point that can be exploited\nto censor payments, deny users service, or seize funds.\n\n\nAs mentioned, Bitcoin is permissionless, which means you don’t need to\nask anyone for permission to participate. Anyone with a computer and an\ninternet connection can set up a Bitcoin node and take an active role in\nthe Bitcoin network—no questions asked, no registration required.\n\n\nChanging the rules of Bitcoin is nearly impossible without broad\nconsensus. If a node doesn’t obey the rules, the rest of the nodes will\nignore it. For example, one rule is that Bitcoin’s money supply is\nlimited to 21 million bitcoins. This limit is nearly impossible to\nchange because of decentralization; there’s no one you can threaten or\nbribe to change these rules.\n\n\n\nLimited supply\n\n\nProblems fixed\n\n\n\n✓ Segregation\n\n\n✓ Privacy issues\n\n\n✓ Inflation\n\n\n❏ Borders\n\n\n\n\n\n\nBecause Bitcoin’s money supply won’t exceed 21 million bitcoins, people\ncan be sure that if they own 1 bitcoin, they will always own at\nleast one 21-millionth of the total supply of bitcoins. This feature\nisn’t found in any fiat currency, where decisions on supply are made\nevery so often by a company or state. Bitcoin is resistant to high\ninflation because you can’t increase the money supply at will.\n\n\nBitcoin’s money supply isn’t fixed today. It’s increasing, at a\ndiminishing rate, according to a predetermined schedule and will\neventually stop increasing around the year 2140. See The supply of bitcoins approaches 21 million over time. The increase is barely visible during the last 100 years before 2140..\n\n\n\n\n\nFigure 10. The supply of bitcoins approaches 21 million over time. The increase is barely visible during the last 100 years before 2140.\n\n\nAs of this writing, the money supply is about 17 million bitcoins, and\nthe current yearly increase is at roughly 4%. This increase is halved\nevery four years.\n\n\n\nBorderless\n\n\nProblems fixed\n\n\n\n✓ Segregation\n\n\n✓ Privacy issues\n\n\n✓ Inflation\n\n\n✓ Borders\n\n\n\n\n\n\nBecause Bitcoin is a system run by ordinary computers connected to the\ninternet, it’s as global as the internet. This means anyone with an\ninternet connection can send money to other people across the world,\nas Borderless illustrates.\n\n\n\n\n\nFigure 11. Bitcoin is borderless\n\n\nThere is no difference between sending a bitcoin to someone in the\nsame room or sending it to someone on another continent. The\nexperience is the same: money is sent directly to the recipient, who\nsees the payment nearly instantaneously. Within about 60 minutes, this\nrecipient can be sure the money is theirs. Once settled, the\ntransfer can’t be reversed without the recipient’s consent.\n\n\n\n\nHow is Bitcoin used?\n\nSo far, we’ve touched on a few common use cases for Bitcoin. This\nsection will dig deeper into those use cases and a few others. It’s\nhard to predict what use cases we’ll see in the future, so let’s stick\nto what we know now.\n\n\nSavings\n\n\n\n\n\n\n\n\n\n\nOne interesting Bitcoin feature is that you keep your money safe by\nstoring a set of private keys: the secret pieces of information you’ll\nneed when you want to spend your money. You choose how those private\nkeys are stored. You can write them on paper, or you can store them\nelectronically with a mobile app to have easy access to them. You can\nalso memorize your private keys. These keys are all anyone needs to\nspend your money. Keep them safe.\n\n\nSavings is an attractive use case for Bitcoin. A simple way to save is\nto create a private key and write it down on a piece of paper that you\nstore in a safe. This piece of paper is now your savings account, your\nsavings wallet. You can then send bitcoins to your wallet. As long as\nyour private key is kept safe, your money is safe. You can choose from\na lot of different saving schemes to find the right balance between\nsecurity and convenience. For example, you can keep your keys\nunencrypted in your mobile phone for easy access or store them\nencrypted on paper in a vault with armed guards.\n\n\n\nCross-border payments\n\nAs noted, moving money from one country to another is expensive (say,\n15%), especially if you move money to a poor country, and the\nrecipient doesn’t have a bank account. It’s becoming increasingly\npopular to use Bitcoin to circumvent this expensive and slow legacy\nsystem. It’s usually cheaper to exchange Swedish crowns for bitcoins\nin Sweden and transfer the bitcoins to your friend in the\nPhilippines. Your friend will then exchange the bitcoins locally for\nPhilippine pesos.\n\n\nSome companies offer services so that you pay Swedish crowns to the\ncompany and the company pays out Philippine pesos to your friend\n(A remittance company uses Bitcoin to transfer money from Sweden to the Philippines.). You won’t even know that Bitcoin is used\nunder the hood. Such companies typically charge a few percent for the\nservice, but it will still be cheaper than traditional remittance\nservices.\n\n\n\n\n\nFigure 12. A remittance company uses Bitcoin to transfer money from Sweden to the Philippines.\n\n\nOf course, if recipients can make good use of Bitcoin where they live,\nthere’s no need for a middleman that takes a cut of the money. You can\nsend bitcoins directly to your friend. This is what Bitcoin is all\nabout. Exchanges and other such service companies are just bridges\nbetween the old legacy world and the new Bitcoin world.\n\n\n\nShopping\n\n\n\n\n\n\n\n\n\n\nThe most obvious use case for Bitcoin is shopping. Bitcoin’s\nborderlessness and security make it ideal for online payments for\ngoods and services.\n\n\nIn traditional online payments, you send your debit card details to\nthe merchant and hope the merchant will withdraw as much as you\nagreed on.  You also hope the merchant handles your debit card\ndetails with great care. They probably store the details in a\ndatabase. Think about that: for every debit card purchase you make,\nyour card details will be stored in that merchant’s database. It’s\nlikely that one of the databases will be hacked and your card\ndetails stolen. The more merchants store your details, the higher the\nrisk.\n\n\nWith Bitcoin, you don’t have that problem because you don’t send any\nsensitive information to the merchant, or anyone else. You transfer\nthe amount of money you agreed on and nothing more.\n\n\n\nSpeculation\n\nThe world is full of people wanting to get rich quick. Bitcoin can be\nalluring to them because of its price volatility, or tendency to\nchange. Looking at the history of bitcoin’s price, as shown in\nPrice in USD since the beginning of Bitcoin, it’s tempting to try to buy when it’s low and sell when\nit’s high.\n\n\n\n\n\nFigure 13. Price in USD since the beginning of Bitcoin\n\n\nIn November 2013, the price climbed from about $100 USD to more than\n$1100 in a few weeks. This was clearly a so-called bubble, in which\npeople were afraid of missing out on a great rise, so they bought in,\ndriving the price further up, until it eventually started dropping\nagain. The drop to 50% of its peak value was just as quick as its rise.\nThe same pattern repeated in late 2017 but at a greater magnitude. This\nhas happened many times already. Fluctuations like this are rarely\ndriven by any specific news or technological advancement, but usually\narise from speculation. Speculation can be fun, if you can afford to\nlose, but it’s more like a lottery than something to make a living from.\n\n\nSometimes a government or big corporation makes a negative statement\nabout Bitcoin that creates fear in the market, but those events tend to\nhave a limited effect on bitcoin’s value.\n\n\nBitcoin’s price volatility seems contradictory to the claims of it\nhaving a non-inflationary property; a 50% drop in market value appears\npretty inflationary. Bitcoin is still relatively new, and lots of\nshort-term speculation causes this volatility. But as Bitcoin grows and\nmore people and institutions start using it to store their wealth, it\nwill probably stabilize in the long run, and its deflationary property\nwill emerge over time.\n\n\n\nNoncurrency uses\n\nBitcoin is digital cash, but this form of cash can be used for things\nbeyond money. This section covers two common uses, but there are\nothers, including those not yet invented.\n\n\nOwnership\n\n\n\n\n\n\n\n\n\n\nBitcoin lets you embed small pieces of data with payments. This data\ncan be, for example, a chassis number of a car. When the car leaves\nthe factory, the manufacturer can make a small Bitcoin payment to the\nnew car owner, containing the chassis number. This payment will then\nrepresent the transfer of ownership for that car.\n\n\nBitcoin payments are public records, but they aren’t tied to people in\nany way. They’re tied to long strings of numbers called public\nkeys, explained in detail in [ch02]. The car manufacturer has made\nits public key available on its website, in newspapers, and in\nadvertisements to tie the key to the manufacturer’s identity. Anyone\ncan then verify that the manufacturer has transferred ownership of the\ncar to the new owner. The new owner can show that she owns the car by\nproving that she owns the private key belonging to the public key to\nwhich the manufacturer has transferred ownership.\n\n\nThe new owner can sell the car to someone else and transfer ownership\nby sending the same bitcoins she got from the manufacturer to the new\nowner’s public key. The general public can follow the car’s ownership\nfrom the manufacturer through every owner’s public key up to the\ncurrent owner.\n\n\n\nProof of existence\n\nUsing the same technique to store data in a Bitcoin payment to transfer\nownership of a car, you can prove that a document existed prior to a\ncertain point in time.\n\n\n\n\n\n\n\n\n\n\n\nA digital document has a fingerprint: a cryptographic hash that\nanyone can calculate from that document. Creating a different document\nwith the same fingerprint is practically impossible. This fingerprint\ncan be attached to a Bitcoin payment. Where the money goes is\nirrelevant; the important thing is that the fingerprint is recorded in\nthe Bitcoin blockchain. You “anchor” the document in the blockchain.\n\n\nBitcoin payments are public records, so anyone can verify that the\ndocument existed before the time of the payment by taking the\ndocument’s fingerprint and comparing it to the fingerprint stored in\nthe blockchain.\n\n\n\n\nHow is Bitcoin valued?\n\n\n\n\n\n\n\n\n\n\nAs you read in the Speculation, a bitcoin’s price can\nfluctuate dramatically. But where does this price come from? Several\nBitcoin exchanges exist, most of them internet-based. They resemble\nstock markets, where users wanting to sell bitcoins are matched with\nusers wanting to buy bitcoins.\n\n\nDifferent markets can have different market prices depending on the\nsupply and demand in that market. For example, in countries such as\nVenezuela, where the government tries to hinder the Bitcoin market, the\nsupply is low. But the demand is high because people want to escape\ntheir hyperinflating currency. These factors drive the Bitcoin price up\nin that market compared to, for example, the US and European markets,\nwhere people can trade more freely.\n\n\n\nWhen not to use Bitcoin\n\nBitcoin is nice and all, but it’s not suitable for all financial\nactivity. At least, not yet.\n\n\nTiny payments\n\nA Bitcoin transaction should usually include a processing fee. This fee\nisn’t related to the amount sent but to how big the transaction is in\nbytes. This is because the Bitcoin network’s cost for processing a\ntransaction depends mostly on how big (in bytes) the transaction is.\nHigh-value transactions aren’t bigger (in bytes) than low-value\ntransactions, so the fee is about the same for both kinds of\ntransactions. The fee required for a transaction also depends on supply\nand demand for available space in the blockchain. The blockchain can’t\nhandle more than roughly 12 MB of transactions per hour, which means\nminers sometimes have to prioritize transactions. Paying a higher fee\nwill probably give your transaction a higher priority.\n\n\nIf the fee is a significant share of the actual payment you want to\nmake, it isn’t economically viable to pay with ordinary Bitcoin\ntransactions (see Feasibility of different fee levels).\n\n\nTable 3. Feasibility of different fee levels\n\n\n\n\n\n\n\n\nAmount to transfer\nFee\nFee %\nFeasible\n\n\n\n\n2 BTC\n0.003 BTC\n0.15%\nYes\n\n\n0.002 BTC\n0.001 BTC\n50%\nProbably not\n\n\n0.001 BTC\n0.005 BTC\n500%\nNo\n\n\n\n\nBut promising emerging technologies are being built on top of Bitcoin.\nOne example is the Lightning Network, which allows for cheap,\ninstantaneous micropayments of tiny fractions of a bitcoin. Using the\nLightning Network, you could potentially pay just 100 satoshis (where\n1 satoshi = 0.00000001 BTC) at a fee of as little as 1 satoshi.\n\n\n\nInstant payments\n\nBitcoin payments take time to confirm. The recipient sees the payment\nimmediately but shouldn’t trust the payment until the Bitcoin network\nconfirms it, which typically happens within 20 minutes. Trusting an\nunconfirmed transaction can be risky; the sender can double spend the\nbitcoins by sending the same bitcoins in another transaction to another\nBitcoin address—for example, the sender’s.\n\n\nThe confirmation time can add friction in brick-and-mortar shops because\ncustomers don’t want to wait 20 minutes before getting their coffee.\nThis might not be a big issue in some online shops, where the shop can\nwait 20 minutes before sending the goods to the customer; but some\nonline services, such as pay-per-view, could find the confirmation time\nproblematic.\n\n\nThis limitation can also be fixed by systems built on top of Bitcoin—for\nexample, the Lightning Network—especially when the payment amount is\nsmall.\n\n\n\nSavings you can’t afford to lose\n\nBitcoin is probably the most secure money there is, but it’s still in\nits infancy. Things could go bad with Bitcoin, as in the following\nscenarios:\n\n\n\nBitcoin security\n\nYou are in charge of the security of your bitcoins. Only you. Be careful!\n\n\n\n\n\n\nYou lose your private keys: the secrets you must have to spend your\nmoney.\n\n\nYour private keys are stolen by some bad guy.\n\n\nThe government in your location tries to crack down on Bitcoin users\nby imprisonment or other means of force.\n\n\nThe price of Bitcoin swings down dramatically due to rumors or\nspeculation.\n\n\nSoftware bugs make Bitcoin insecure.\n\n\nWeaknesses arise in the cryptography Bitcoin uses.\n\n\n\n\nAlthough all these risks are possible, most of them are unlikely.\nThis list is somewhat ordered with the most likely at the top. Always\nweigh the risks before putting money on the line, and select your\nsecurity measures accordingly. This book will help you understand the\nrisks and how to secure your money.\n\n\n\n\n\nOther cryptocurrencies\n\nThis book will cover Bitcoin, but several other so-called\ncrypto\xadcurrencies exist, and new ones pop up all the time.\nCryptocurrencies other than Bitcoin are often referred to as\nalt-coins, meaning alternative coins. I’ll list a few alt-coins\nalong with their purpose and market capitalization, or market cap\n(Market capitalization of a few cryptocurrencies as of 11 November 2018). The market cap is the product of the money supply (number\nof coins) and the current market price per coin. Note that the market\ncap will most likely have changed a lot by the time you read this. I\ninclude this information only to give you a glimpse of Bitcoin’s\nposition relative to other cryptocurrencies.\n\n\nTable 4. Market capitalization of a few cryptocurrencies as of 11 November 2018\n\n\n\n\n\n\n\nCurrency\nPurpose\nMarket cap (billions of dollars)\n\n\n\n\n\nGlobal money; included for reference\n111\n\n\n\nRunning software on a decentralized abstract computer\n22.4\n\n\n\nPrivacy\n1.7\n\n\n\nPrivacy\n0.8\n\n\n\nNaming system; complements the domain name system (DNS)\n0.008\n\n\n\n\nI encourage you to look up these cryptocurrencies, because they all\nprovide interesting new features beyond Bitcoin. Hundreds of other\nalt-coins exist. Some, such as those in the table, provide unique\nfeatures that aren’t available in Bitcoin, and others provide little to\nnothing innovative. Some alt-coins may even be outright scams. Stay\nvigilant.\n\n\nAnyone can create an alt-coin by taking existing cryptocurrency software\nand modifying it to their needs.\n\n\nLet’s say Sheila wants to start an alt-coin, Wowcoin. She takes the\nBitcoin software and changes the maximum money supply to 11,000,000,\ninstead of Bitcoin’s 21,000,000 coins. When she starts Wowcoin, Sheila\nwill be lonely because no one else is using her alt-coin. If she wants\nWowcoin to have some real value, she must convince other people to begin\nusing it. If she’s not providing anything innovative, she’s going to\nhave a hard time getting other people on board, because they’re pretty\nhappy with what Bitcoin already provides. Everybody else is using\nBitcoin, so why would you use Wowcoin? Think of it as starting a new\ninternet that you call Wownet. People on Wownet won’t be able to use\nservices on the internet. Conversely, people on the internet won’t be\nable to use your service if you’re on Wownet. So why would anyone use\nWownet? We call this the network effect (see Network effect)—people tend\nto go where other people are.\n\n\n\n\n\nFigure 14. Network effect\n\n\nAlthough some interesting alt-coins are out there, it’s hard to tell\nwhich of these will survive long-term. Also, picking one or a few\nalt-coins to cover in this book would be an arbitrary choice.\nConsequently, I focus solely on Bitcoin.\n\n\n\nSummary\n\n\n\nBitcoin is global, borderless money that anyone with an internet\nconnection can use.\n\n\nMany different actors use Bitcoin, including savers, merchants, and\ntraders for various purposes, such as payments, remittances, and\nsavings.\n\n\nA network of computers, the Bitcoin network, verifies and keeps records\nof all payments.\n\n\nA transaction goes through the following steps: send transaction, verify\ntransaction, add transaction to the blockchain, and notify the recipient\nand sender wallets.\n\n\nBitcoin solves problems with inflation, borders, segregation, and\nprivacy by providing limited supply, decentralization, and\nborderlessness.\n\n\nSeveral alternative cryptocurrencies exist apart from Bitcoin, such as\nEthereum, Zcash, and Namecoin.\n\n\nA (crypto)currency becomes more useful as more users use it. This is\ncalled the network effect.\n\n\n\n\n\n', 'body_type': 'html', 'authors': ['Kalle Rosenbaum'], 'domain': 'https://github.com', 'url': 'https://github.com/kallerosenbaum/grokkingbitcoin/blob/master/ch01-introduction-to-bitcoin.adoc', 'created_at': '2023-06-29T13:58:29.801378'}}, {'_index': 'bitcoin-search-scrapy-23', '_id': 'njfTBokBCZBMBhppAdXL', '_score': 1.0, '_ignored': ['body.keyword', 'body_formatted.keyword'], '_source': {'id': 'grokkingbtc-1e944dbf-a25c-4713-897d-65025d3210f3', 'title': '[Grokking Bitcoin] Appendix A: Answers to exercises', 'body_formatted': "<article><div>\n<h2><a><svg><path></path></svg></a>Appendix A: Answers to exercises</h2>\n<div>\n<div>\n<h3><a><svg><path></path></svg></a>Chapter 2</h3>\n<div>\n<ol>\n<li>\n<p>256 bits.</p>\n</li>\n<li>\n<p>32 bytes.</p>\n</li>\n<li>\n<p>A cryptographic hash function.</p>\n</li>\n<li>\n<p><code>061a</code> is <code>6*256 + (16 + 10) = 1,536 + 26 = 1,562</code> in decimal\nform. The binary form of <code>06</code> is <code>0000 0110</code>, and the binary form of\n<code>1a</code> is <code>0001 1010</code>, so the full binary representation is <code>0000 0110\n0001 1010</code>.</p>\n</li>\n<li>\n<p>No. If it was possible, the function wouldn’t be\nsecond-pre-image-resistant.</p>\n</li>\n<li>\n<p>Properties 2 and 4 are lacking.</p>\n</li>\n<li>\n<p>Second-pre-image resistance is stopping the attacker. The attacker\nneeds to find an input that gives the same hash as a certain other\ninput: the cat picture.</p>\n</li>\n<li>\n<p>The money supply increase rate will decrease over time because the\nreward to Lisa halves every 4 years. This means the total amount of CT\nto ever be created will be about 21,000,000.</p>\n</li>\n<li>\n<p>The coworkers have read access to the spreadsheet. They can watch\nthe spreadsheet and verify that Lisa doesn’t reward herself too much or\ntoo often.</p>\n</li>\n<li>\n<p>The private key is created using a random number generator of\nsome sort. A simple one is a coin that you flip 256 times to generate\nyour 256-bit private key. You can also use your operating system’s\nbuilt-in random number generator.</p>\n</li>\n<li>\n<p>The private key.</p>\n</li>\n<li>\n<p>The message is hashed because you want signatures to be small and\nfixed in size. You don’t want the signatures to be big just because the\nsigned message is big.</p>\n</li>\n<li>\n<p>Mallory would need John’s private key to steal cookies from him.\nShe would also need his name, John, to write into the email to Lisa, but\nthat’s easily available in the spreadsheet.</p>\n</li>\n<li>\n<p>Fred can use your public key to encrypt the message and send the\nencrypted message to you. You can then decrypt that message using your\nprivate key.</p>\n</li>\n<li>\n<p>You sign the message using your private key and write the digital\nsignature onto the note in the bottle. Fred can then verify that the\nsignature is in fact made with your private key. He does this by using\nyour public key to decrypt the signature and comparing the decrypted\nhash with the actual hash of the message. If they match, he can be sure\nthe message is from you.</p>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Chapter 3</h3>\n<div>\n<ol>\n<li>\n<p>The PKH is made short because a) it makes the spreadsheet smaller\nin size and b) it makes cookie token addresses (and Bitcoin addresses)\nshorter to write for a user.</p>\n</li>\n<li>\n<p>Yes, you can. There’s a base58check decoding algorithm that does\nthis.</p>\n</li>\n<li>\n<p>It’s used by a payer to translate the recipient’s address into a\nPKH. The payer needs to write the recipient’s PKH in the email to Lisa.</p>\n</li>\n<li>\n<p>Let’s base58-encode 0047 step by step:</p>\n<div>\n<ol>\n<li>\n<p>Remove leading 00 bytes. There is one, which leaves you with 47.</p>\n</li>\n<li>\n<p>Convert to a decimal number: 47 in hex is 4 × 16 + 7 = 71 in decimal.</p>\n</li>\n<li>\n<p>Divide 71 by 58: 71 = 1 × 58 + 13. The quotient is 1, and the remainder\nis 13.</p>\n</li>\n<li>\n<p>Divide the quotient, 1, by 58: 1 = 0 × 58 + 1. The quotient is 0, and\nthe remainder is 1.</p>\n</li>\n<li>\n<p>Look up the remainders 13 and 1. Result: E and 2.</p>\n</li>\n<li>\n<p>Add a 1 for the removed 00 byte in step 1, which results in E21.</p>\n</li>\n<li>\n<p>Reverse it: 12E. Done.</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>The 4-byte checksum.</p>\n</li>\n<li>\n<p>He must make two separate payments. For example: payment 1 pays 2\nCT from @<sub>1</sub> to the cafe, and payment 2 pays 8 CT from @<sub>2</sub> to the cafe.\nAnother way is to first pay 2 CT from @<sub>1</sub> to @<sub>2</sub> and then pay 10 CT\nfrom @<sub>2</sub> to the cafe.</p>\n</li>\n<li>\n<p>Yes it is. Base58check-encode the PKHs to get the addresses.</p>\n</li>\n<li>\n<p>No, because the spreadsheet contains PKHs. Because cryptographic\nhash functions are one-way functions, you can’t go from PKH to public\nkey.</p>\n</li>\n<li>\n<p>They can look at the amounts. Many of the 10 CT payments are\nprobably cookie purchases.</p>\n</li>\n<li>\n<p>The bad guy can’t steal cookie tokens because he needs the public\nkey to exploit the flaw in the public key derivation function. The\nspreadsheet contains PKHs; the bad guy can’t get the public key from it.</p>\n</li>\n<li>\n<p>The bad guy needs the private key to sign fraudulent emails to\nLisa. Even though he can reverse RIPEMD160, he’d still need to pre-image\nattack SHA256 and reverse the public key derivation function to get to a\nworking private key.</p>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Chapter 4</h3>\n<div>\n<ol>\n<li>\n<p><code>bitcoin:155gWNamPrwKwu5D6JZdaLVKvxbpoKsp5S?amount=50</code></p>\n</li>\n<li>\n<p>Each character corresponds to 6 bits of entropy because 2<sup>6</sup> = 64.\nTen such characters make 60 bits of entropy, which corresponds to 60\ncoin flips.</p>\n</li>\n<li>\n<p>The four problems:</p>\n<div>\n<ul>\n<li>\n<p>Passwords are easily forgotten.</p>\n</li>\n<li>\n<p>Randomness is hard.</p>\n</li>\n<li>\n<p>The security of a password decreases as technology improves.</p>\n</li>\n<li>\n<p>You need to keep track of two items: the backup <em>and</em> the\npassword. This increases the risk that the backup is lost.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>The seed is created by first generating a huge random number, then\nthe random number is encoded as a mnemonic sentence, and lastly, the\nmnemonic sentence is used to generate the seed.</p>\n</li>\n<li>\n<p>An xprv consists of a private key and a chain code.</p>\n</li>\n<li>\n<p>An xpub consists of a public key and a chain code.</p>\n</li>\n<li>\n<p>The xprv at path <code>m/2/1</code> and the wanted index <code>7</code>.</p>\n</li>\n<li>\n<p>No, you would need xprv <code>m/2/1</code> to derive xpub <code>M/2/1/7'</code>. You\nfirst derive hardened xprv <code>m/2/1/7'</code> from <code>m/2/1</code> using hardened xprv\nderivation and then calculate the xpub <code>M/2/1/7'</code> from <code>m/2/1/7'</code>.</p>\n</li>\n<li>\n<p>You can use the following procedure to get the master xprv:</p>\n<div>\n<ol>\n<li>\n<p>Use master xpub <code>M</code> to derive xpub <code>M/4</code> and remember the left-half\nhash, L<sub>4</sub>.</p>\n</li>\n<li>\n<p>Use <code>M/4</code> to derive the left-half hash L<sub>41</sub> at index 1.</p>\n</li>\n<li>\n<p>Subtract L<sub>41</sub> from the private key <code>m/4/1</code> to get private key <code>m/4</code>.</p>\n</li>\n<li>\n<p>Subtract L<sub>4</sub> from the private key <code>m/4</code> to get private key <code>m</code>.</p>\n</li>\n<li>\n<p><code>m</code> together with the chain code of xpub <code>M</code> is the master xprv.</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>Yes, you’d be able to steal all funds in any addresses because\nyou can calculate the master xprv.</p>\n</li>\n<li>\n<p>The victim could have used hardening to generate <code>m/4'</code> instead.\nThis way, you wouldn’t be able to get the master xprv. If you stole\n<code>m/4'/1</code> and the master xpub, you would only be able to steal funds on\nthe <code>m/4'/1</code> key. You wouldn’t be able to calculate the <code>M/4'</code> xpub.</p>\n</li>\n<li>\n<p>The employees can import the xpub for the counter sales account.\nThey will then be able to generate any public keys under that account\nand thus generate as many addresses as they need without ever having to\nknow any private keys.</p>\n</li>\n<li>\n<p>Your (and Anita’s) wallet can generate 10 addresses ahead of time\nand monitor the spreadsheet for those addresses. If Anita gets paid to\none of these addresses—probably the first of those 10—then your wallet\nwon’t reuse that address when you request a payment from a customer. You\nwould instead take the next unused address.</p>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Chapter 5</h3>\n<div>\n<ol>\n<li>\n<p>You would spend the 4 CT and the 7 CT outputs. The new outputs\nwould be 10 CT to the cafe and 1 CT in change to an address you control.</p>\n</li>\n<li>\n<p>They’re used in inputs to reference transactions from which to\nspend outputs.</p>\n</li>\n<li>\n<p>Because you can’t spend part of a transaction output. You either\nspend the output or you don’t. If the spent output contains more value\nthan you’re paying, you need to give back change to yourself.</p>\n</li>\n<li>\n<p>In the signature scripts in the inputs.</p>\n</li>\n<li>\n<p>Because the verifiers need to know what public key to verify the\nsignature with. You can’t verify the signature with a PKH, so you need\nto explicitly reveal the public key in the signature script.</p>\n</li>\n<li>\n<p>The signature scripts are cleaned so that verifiers don’t have to\nknow the order in which the inputs are signed.</p>\n</li>\n<li>\n<p>Each output of a transaction contains a pubkey script. It contains\nthe second part of a script program. The first part will be provided\nlater, when the output is spent.</p>\n</li>\n<li>\n<p>The Script program must end with OK on top of the stack.</p>\n</li>\n<li>\n<p>A p2sh address always starts with a <code>3</code>. You can also recognize it\nby base58check-decoding it and looking at the first byte. If that byte\nis 05, it’s a p2sh address.</p>\n</li>\n<li>\n<p>You’ll create a transaction with one input and three outputs:</p>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</li>\n<li>\n<p>10,003 UTXOs. You remove two UTXOs by spending two outputs, and\nyou add five new UTXOs. The net effect on the UTXO set is thus +3 UTXOs.</p>\n</li>\n<li>\n<p>The pubkey script can be, for example, <code>1</code>. The spending input\ncan have an empty signature script. The full Script program just puts a\n<code>1</code> on the stack. A result stack with non-zero on top means OK.</p>\n</li>\n<li>\n<p><code>OP_ADD 10 OP_EQUAL</code>. This will first add the two top items on\nthe stack and put the result back on top. Then, you’ll push the number\n10 to the stack and compare the two top items. If they’re equal, OK will\nbe pushed to the stack.</p>\n</li>\n<li>\n<p>Yes. Your full node verifies everything in the spreadsheet from\nthe very first transaction up to the transaction containing your money\nfrom Faiza. It verifies (among other things) the following:</p>\n<div>\n<ul>\n<li>\n<p>Lisa created the expected number of coinbase transactions with the\ncorrect amounts in them.</p>\n</li>\n<li>\n<p>For each transaction in the spreadsheet, the value sum of outputs\ndoesn’t exceed the value sum of inputs.</p>\n</li>\n<li>\n<p>All signatures from Faiza’s payment back to all coinbase transactions\nare OK.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>If there are several UTXOs to the same PKH, then as soon as one\nof them is spent, the security of the other UTXOs to the same PKH will\nbe degraded. This is because you remove a layer of security, the\ncryptographic hash function. From this point, you rely solely on the\npublic key derivation function to be secure. You can avoid this problem\nby using unique addresses for all your incoming payments. Then, all your\nUTXOs will have different PKHs.</p>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Chapter 6</h3>\n<div>\n<ol>\n<li>\n<p>By the previous block’s block ID, which is the hash of the\nprevious block’s header.</p>\n</li>\n<li>\n<p>The merkle root of a block commits to all transactions in that\nblock.</p>\n</li>\n<li>\n<p>Lisa’s block signature commits to the timestamp, the merkle root\n(and indirectly all transactions in this block), and the previous block\nID (and indirectly the whole blockchain before this block).</p>\n</li>\n<li>\n<p>The first transaction in each block is a coinbase transaction.\nThis coinbase transaction creates 50 new cookie tokens and sends them to\nLisa’s cookie token address.</p>\n</li>\n<li>\n<p>All transactions. The hash functions will all result in an index\ncontaining <code>1</code> because there are no zeroes in the bloom filter. Any item\nin the transaction that you test will be a positive.</p>\n</li>\n<li>\n<p>The following are tested:</p>\n<div>\n<ul>\n<li>\n<p>The txid together with the index that identifies the output to spend</p>\n</li>\n<li>\n<p>All data items in the signature scripts</p>\n</li>\n<li>\n<p>All data items in the pubkey scripts</p>\n</li>\n<li>\n<p>The txid of the transaction</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>They aren’t pre-image resistant, collision resistant, or\nsecond-pre-image resistant. The output space is small—typically just a\nfew hundred to a few thousand numbers. It will take only a fraction of a\nsecond to find a pre-image of, for example, <code>172</code>.</p>\n</li>\n<li>\n<p>The rightmost leaf must be copied to make an even number of\nleaves. The same goes for the next level, where the third hash needs to\nbe copied.</p>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</li>\n<li>\n<p>If Lisa’s private block-signing key is stolen, the thief can\ncreate blocks in Lisa’s name. Also, if a bad guy replaces Lisa’s\nblock-signing public key on one or more sources, such as the bulletin\nboard or the intranet, the bad guy can fool people into accepting blocks\nnot signed by Lisa.</p>\n</li>\n<li>\n<p>Lisa can censor transactions, and the shared folder administrator\ncan censor blocks.</p>\n</li>\n<li>\n<p>a) Yes, a new node that downloads all blocks from the shared\nfolder will notice that there are two versions of the block. b) Yes, an\nold node that has already downloaded the original block will detect that\nthere is an alternate version of the block.</p>\n</li>\n<li>\n<p>The bits at indexes <code>1</code>, <code>5</code>, <code>6</code>, and <code>7</code> are set to 1 and the\nother to 0. The full node would <em>not</em> send this transaction to the\nlightweight wallet. Nothing that’s tested hashes to only indexes where\nthe bits are <code>1</code>. This was something of a trick question, because the\nspent txid and the output index of the spent transaction aren’t tested\nindividually, so 1,6,6 will never be considered by the full node.</p>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</li>\n<li>\n<p>The partial merkle tree is</p>\n<div>\n<div>\n<pre>Number of tx: 3\nFlags: ✔✔✘✔✔✔\nHashes 3 4 6</pre>\n</div>\n</div>\n</li>\n<li>\n<p>The interesting transactions are numbers 7 and 13, or leaf numbers 6\nand 10 from the left. You’ve already seen the solution in\n<a>[bigger-trees]</a>, but I provide it here as well for reference.</p>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</li>\n<li>\n<p>You need to verify the following:</p>\n<div>\n<ul>\n<li>\n<p>The transaction’s txid is in the list of hashes.</p>\n</li>\n<li>\n<p>The root of the partial merkle tree matches the merkle root in the block\nheader.</p>\n</li>\n<li>\n<p>The block header is correctly signed.</p>\n</li>\n</ul>\n</div>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Chapter 7</h3>\n<div>\n<ol>\n<li>\n<p>She single-handedly decides what transactions get confirmed.</p>\n</li>\n<li>\n<p>The probability of censorship will decrease because all miners\nmust cooperatively decide to censor a transaction to succeed. Otherwise,\nyour transactions will eventually be confirmed by some noncolluding\nminer.</p>\n</li>\n<li>\n<p>Miners can cheat with random numbers. You can’t prove whether a\nminer cheated.</p>\n</li>\n<li>\n<p>Verify that the block ID of a block is lower than the target in\nthe block header, and that the target is the agreed-on target.</p>\n</li>\n<li>\n<p>By repeatedly changing the nonce and hashing (double SHA256) the\nblock header until the block ID (the block header hash) is lower than\nthe target.</p>\n</li>\n<li>\n<p>The branch with the most accumulated proof of work. This isn’t\nnecessarily the same as the branch with the most blocks.</p>\n</li>\n<li>\n<p>A miner with a hashrate of 100 Mhash/s can perform 100,000,000\ntries per second to find a valid proof of work.</p>\n</li>\n<li>\n<p>The target will increase. If the 2,016 blocks take 15 days instead\nof the goal of 14 days, then it’s too hard to find blocks, so you need\nto decrease the difficulty, which means increasing the target.</p>\n</li>\n<li>\n<p>50%. But if you plan to give up at some point, your chances will\ndecrease.</p>\n</li>\n<li>\n<p>The small block will reach the other miners more quickly than the\nbig block because a smaller block travels a computer network faster than\na big block. The small block is probably also quicker to verify than the\nbig block. Miners will probably download and verify the small block\nfaster than the big block and continue their mining activity on top of\nthe small block, which gives the small block a higher probability of\nbecoming part of the strongest chain.</p>\n</li>\n<li>\n<p>The target will decrease by a factor of 3/4. The time to produce\n2,016 blocks is 1.5 weeks; the first 1,008 blocks take 1 week, and the\nnext 1,008 blocks take 0.5 weeks. So, the new target becomes</p>\n<div>\n<div>\n\\$N=\nO*\\left\\{\n\\begin{array}{ll}\n\\frac{1}{4} &amp; \\mbox{if } T \\lt 0.5 \\\\$\n\\$\\frac{T}{2} &amp; \\mbox{if } 0.5 \\leq T \\leq 8 \\\\$\n\\$4 &amp; \\mbox{if } 8 \\lt T\n\\end{array}\n=O*\\frac{1.5}{2}=O*\\frac{3}{4}\n\\right.\\$\n</div>\n</div>\n</li>\n<li>\n<p>Selma has the majority of the hashrate. As long as she plays by\nthe same rules as everyone else, she’s going to earn a lot of block\nrewards. When she breaks the rules by changing the target prematurely,\nall full nodes except Selma’s will discard her blocks. Selma will\ncontinue working on her own branch of the blockchain with her new rules,\nwhile all the rest will work on the branch with the old rules. The\nbranches will be mutually incompatible. The hashrate of the old branch\nwill drop to 48%, but the system will tick on, and everyone will\ncontinue their daily lives as normal. Selma, on the other hand, will\nspend a lot of electricity and time on her new branch, and no one will\nbuy her block rewards. The value of her mined coins will probably be\nclose to zero because she’s not following the rules. Selma is a loser.</p>\n</li>\n<li>\n<p>The fee-per-byte metric used by most miners will be very low. For\nevery byte of transaction data the miner puts in its block, it will lose\na little competitiveness because the block will get bigger and thus\nslower to transport over the network and to verify. If the fee per byte\nfor the transaction isn’t high enough to compensate for the lost\ncompetitiveness, the miner probably won’t include it.</p>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Chapter 8</h3>\n<div>\n<ol>\n<li>\n<p>The shared folder is a bad idea because it gives the shared folder\nadministrator absolute power over what blocks to allow. Also, if the\nadministrator decides to start mining, he can shut off all competition\nand have complete power of the system.</p>\n</li>\n<li>\n<p>To relay a block or a transaction means to pass it on to peers.</p>\n</li>\n<li>\n<p>An <code>inv</code> message is used to announce to peers that you have a\ncertain block or transaction; <code>inv</code> stands for inventory.</p>\n</li>\n<li>\n<p>It will run the transaction through the bloom filter it got from\nthe wallet. If any tested item in the transaction matches the filter,\nthe node will send the transaction to the lightweight wallet.</p>\n</li>\n<li>\n<p>The full node sends an <code>inv</code> to the lightweight wallet after\nconsulting the bloom filter. The wallet can then fetch the transaction\nif it doesn’t already have it.</p>\n</li>\n<li>\n<p>The block header.</p>\n</li>\n<li>\n<p>Because the cafe doesn’t have to obfuscate to its trusted node\nwhat addresses belong to the wallet. It sends a very big bloom filter to\nsave data traffic on its mobile phone; a bloom filter that contains\nmostly zeroes will send almost no false positives.</p>\n</li>\n<li>\n<p>She would verify the signature of the program using the public key\nshe knows belongs to the Bitcoin Core development team. She does this to\navoid being tricked into running malicious software.</p>\n</li>\n<li>\n<p>Using a DNS server to get a list of IP addresses for a DNS seed (a\nDNS name) configured in Bitcoin Core, asking trusted friends, and using\nhardcoded addresses shipped with Bitcoin Core.</p>\n</li>\n<li>\n<p>The node’s peers will announce any new blocks by sending\n<code>headers</code> messages to the node, even during its synchronization process.</p>\n</li>\n<li>\n<p>You need to convince the cafe, Qi, and Tom to hide blocks from\nLisa. You can bribe them or threaten them.</p>\n</li>\n<li>\n<p>She sends an <code>inv</code> message to Rashid’s node containing the two\ntransaction IDs.</p>\n</li>\n<li>\n<p>Your node starts the synchronization process, which will look\nlike this:</p>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Chapter 9</h3>\n<div>\n<ol>\n<li>\n<p>At least one of the inputs must have a sequence number strictly\nless than <code>ffffffff</code>.</p>\n</li>\n<li>\n<p>The median of the timestamps of the 11 previous blocks must be\nstrictly later than 2019-12-25 00:00:00.</p>\n</li>\n<li>\n<p>In the rightmost 16 bits of the sequence number.</p>\n</li>\n<li>\n<p>Two transactions on each blockchain: one for the contract\ntransaction and one for the swap transaction.</p>\n</li>\n<li>\n<p>With fake PKHs, the data must be stored forever in the UTXO set\nbecause Bitcoin nodes can’t distinguish between fake PKHs and real ones.\nThe nodes won’t be able to tell if the output is unspendable or not.\nWith an <code>OP_RETURN</code> output, the node knows that the output is\nunspendable and thus doesn’t have to keep it in the UTXO set.</p>\n</li>\n<li>\n<p>Your first transaction paid a too-small fee and got stuck pending.\nYou then want to replace it with a new transaction that pays a higher\nfee.</p>\n</li>\n<li>\n<p>Absolute lock time: a transaction is invalid until a certain block\nheight or time. Relative lock time: an input of a transaction is invalid\nuntil the spent output has been confirmed for a certain number of blocks\nor a certain time period.</p>\n</li>\n<li>\n<p>The redeem script contains two branches of code. The first branch\nwill require that both you and Ruth sign to spend the 2 BTC. This can be\ndone at any time. To spend the 2 BTC using the second branch requires\nthat all of the following conditions are met:</p>\n<div>\n<div>\n<div>\n<ul>\n<li>\n<p>You have waited until New Year’s Eve.</p>\n</li>\n<li>\n<p>Beth has signed the transaction.</p>\n</li>\n<li>\n<p>You or Ruth signs the transaction.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>To be precise, you and Ruth can spend using the first branch with the\nfollowing signature script (excluding the redeem script):</p>\n</div>\n<div>\n<div>\n<pre>0 &lt;your sig&gt; &lt;ruth sig&gt; 1</pre>\n</div>\n</div>\n<div>\n<p>The second branch can be spent at the earliest on New Year’s Eve with</p>\n</div>\n<div>\n<div>\n<pre>0 &lt;your or ruths sig&gt; &lt;beth sig&gt; 0</pre>\n</div>\n</div>\n<div>\n<p>The rightmost digit in both these signature scripts will select what\nbranch to use; the rest fulfill the requirement in the respective\nbranch.</p>\n</div>\n<div>\n<p>The time-locked branch ensures that Beth has no power to collude with\neither you or Ruth before New Year’s Eve.</p>\n</div>\n</div>\n</div>\n</li>\n<li>\n<p>No. The redeem script isn’t known to the nodes until the output is\nspent. And because you can’t spend an <code>OP_RETURN</code> redeem script, nodes\nwill never know about the redeem script. The node will thus never know\nthat this is an unspendable output.</p>\n</li>\n<li>\n<p>A full node that receives a transaction will keep it in memory\nuntil it’s included in a block. If a second, conflicting transaction\narrives, the node will drop that second transaction and not relay it. It\nwill consider the first-seen transaction as the “real” one and the\nsecond transaction as a double-spend attempt. Nodes (including miners)\naren’t required to follow this policy because it’s just a policy.</p>\n</li>\n<li>\n<p>Miners can always select whatever valid transactions they want to\ninclude in their blocks. Thus all transactions are in a way replaceable.\nA miner can offer replacement as a service—that is, upload a\ndouble-spend transaction with a high fee via the miner’s website to have\nit confirmed in the miner’s next winning block.</p>\n<div>\n<p>It is, of course, simpler for normal users to replace a transaction that\nhas opted in to RBF. But using services like the aforementioned one is\nsimple enough for a motivated thief. The difference in security\ntherefore isn’t as big as you might think.</p>\n</div>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Chapter 10</h3>\n<div>\n<ol>\n<li>\n<p>The signature scripts.</p>\n</li>\n<li>\n<p>A transaction, T<sub>2</sub>, that spends an output of an unconfirmed\ntransaction, T<sub>1</sub>, can become invalid if T<sub>1</sub> is changed into T<sub>1M</sub>\nwhile being broadcast, and T<sub>1M</sub> gets confirmed. This causes a lot of\nproblems for contracts.</p>\n</li>\n<li>\n<p>The time to verify a legacy transaction increases four times when\nthe number of inputs doubles. This is because</p>\n<div>\n<ul>\n<li>\n<p>You need to verify twice the number of signatures.</p>\n</li>\n<li>\n<p>Each signature takes double the time to verify because the transaction\nto hash has doubled in size.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>To verify that the transaction is included in a block, the\nlightweight wallet needs to calculate the transaction’s txid. The wallet\nneeds the signatures to calculate the txid because they’re included in\nthe txid.</p>\n</li>\n<li>\n<p>The new behavior of <code>OP_NOP5</code> must, if it succeeds, be exactly\nlike the old behavior of <code>OP_NOP5</code>. This means it should have no effect\non the stack if it succeeds.</p>\n</li>\n<li>\n<p>a (p2wpkh) and c (p2wsh) are segwit addresses. d is a p2sh\naddress, but it might contain a nested p2wpkh or p2wsh payment in the\nredeem script. We can’t say for sure. But the address is a p2sh address,\nnot a segwit address.</p>\n</li>\n<li>\n<p>The witness version is used to make future upgrades easier. The\nrule is that unknown witness versions are accepted. When a new witness\nversion is deployed, old nodes will accept any payment that spends\noutputs with that new witness version. This avoids causing old and new\nnodes to follow different branches of the blockchain.</p>\n</li>\n<li>\n<p>All data items in the signature script are pushed to the stack.\nNo such items exist in the signature script, so there’s nothing to do\nthere. Then, <code>00</code> will be pushed followed by <code>c805…cba8</code>. The Script\nprogram is then finished, and the top item on the stack is checked. It’s\nnot zero, which means the spending is valid.</p>\n</li>\n<li>\n<p>The new node will notice that the output has the segwit pattern.\nIt will also notice that the witness version is <code>00</code> and that the\nwitness program is 20 bytes. That means this is a p2wpkh output. To\nspend such an output, the signature script must be empty, and the\nwitness must contain exactly a signature and the pubkey corresponding to\nthe witness program, <code>PKH<sub>Y</sub></code>. The p2wpkh template is filled in using\nthe signature and public key from the witness field and the PKH from the\npubkey script (the witness program). The filled-in template is then run\nnormally.</p>\n</li>\n<li>\n<p>The fee merkle root can be placed in the right branch under the\nwitness commitment. But you also need to put the fee merkle root in the\nwitness for the coinbase input so that old segwit nodes can verify the\nwitness root hash.</p>\n</li>\n<li>\n<p>An old segwit node will verify the block exactly as before. The\nwitness reserved value will be taken from the witness of the coinbase\ninput. Using the hash from the witness lets the old node build the\nwitness commitment and compare it with the hash in the <code>OP_RETURN</code>\noutput, but it won’t know that the witness reserved value is a fee\nmerkle root. Old nodes thus won’t be able to verify the fee merkle tree.</p>\n<div>\n<p>A new node will do the same verification as an old node, but it will\nalso calculate the fee merkle root and compare it to the hash in the\ncoinbase’s witness.</p>\n</div>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Chapter 11</h3>\n<div>\n<ol>\n<li>\n<p>A soft fork tightens the consensus rules. This means blocks\ncreated by Bitcoin New nodes are guaranteed to be accepted by Bitcoin\nOld nodes.</p>\n</li>\n<li>\n<p>\xa0</p>\n<div>\n<ol>\n<li>\n<p>The New branch will get wiped out by the Old branch.</p>\n</li>\n<li>\n<p>It will <em>eventually</em> get wiped out when the Old branch catches\nup with the New branch and surpasses it. This can take quite a few\nblocks, depending on the initial deficit.</p>\n</li>\n<li>\n<p>Bitcoin New could be equipped with wipeout protection—for\nexample, by requiring that the first block in the split have a certain\nproperty that’s not valid in the Old chain. Bitcoin Cash, for example,\nrequired that the first block be &gt; 1,000,000 bytes.</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>No, it will be outperformed by the New branch, and the Old branch\nwill pretty quickly be wiped out, or reorged.</p>\n</li>\n<li>\n<p>2,016 blocks. The <code>LOCKED_IN</code> state is always one retarget\nperiod.</p>\n</li>\n<li>\n<p>Both. Old nodes can create a block that’s not valid according to\nNew nodes. Conversely, New nodes can create a block that’s not valid\naccording to Old nodes.</p>\n</li>\n<li>\n<p>If the New nodes don’t have a majority of the hashrate, the Old\nnodes can cause a lasting blockchain split. This would effectively\nresult in two cryptocurrencies.</p>\n</li>\n<li>\n<p>Replay protection is desirable because a transaction intended for\none branch of the split shouldn’t risk ending up on the other branch.</p>\n</li>\n<li>\n<p>Yes. Suppose the 11 timestamps before B<sub>1</sub>, sorted by value, are</p>\n<div>\n<div>\n<div>\n<div>\n<pre>a ≤ b ≤ c ≤ d ≤ e ≤ MTP<sub>1</sub> ≤ g ≤ h ≤ i ≤ j ≤ k</pre>\n</div>\n</div>\n<div>\n<p>To calculate MTP<sub>2</sub> of block B<sub>2</sub> following B<sub>1</sub>, add T<sub>1</sub> to this list.\nBecause a timestamp of a block needs to be strictly later than the MTP\nof the block, T<sub>1</sub> must be sorted to the right of MTP<sub>1</sub> in the list.\nFor example:</p>\n</div>\n<div>\n<div>\n<pre>a ≤ b ≤ c ≤ d ≤ e ≤ MTP<sub>1</sub> ≤ g ≤ h ≤ T<sub>1</sub> ≤ i ≤ j ≤ k</pre>\n</div>\n</div>\n<div>\n<p>You must also remove the timestamp of the block with lowest height from\nthe list of timestamps. No matter what timestamp you remove, MTP<sub>2</sub> will\nbe either MTP<sub>1</sub> (if you remove a timestamp to the right of it), or the\ntimestamp immediately to the right of MTP<sub>1</sub> (if you remove a timestamp\nto the left of it) which can be either g or T<sub>1</sub>:</p>\n</div>\n<div>\n<p>If MTP<sub>2</sub> = MTP<sub>1</sub>, then MTP<sub>2</sub> &lt; timeout because MTP<sub>1</sub> &lt; timeout.</p>\n</div>\n<div>\n<p>If MTP<sub>2</sub> = g, then MTP<sub>2</sub> ≤ T<sub>1</sub> &lt; timeout.</p>\n</div>\n<div>\n<p>If MTP<sub>2</sub> = T<sub>1</sub> then MTP<sub>2</sub> &lt; timeout because T<sub>1</sub> &lt; timeout.</p>\n</div>\n<div>\n<p>So, the MTP of B<sub>2</sub> is less than timeout in all cases, and all blocks\n(&gt;95%) of the last 2,016 blocks signal support, which means the\ndeployment will move to <code>LOCKED_IN</code> and—2,016 blocks later—to <code>ACTIVE</code>.</p>\n</div>\n</div>\n</div>\n</li>\n<li>\n<p>A portion (&lt;30%) of the economy starts rejecting blocks that\ndon’t comply with your soft fork. This means you’ll cause a blockchain\nsplit that will remain as long as a majority of miners support the Old\nbranch.</p>\n</li>\n<li>\n<p>When most of the economy starts rejecting Old blocks, miners\nprobably won’t want to mine Old blocks because the block rewards will\nbecome nearly worthless for them. It would be hard for miners to sell\ntheir Old coins on an exchange or pay for electricity with them. If they\nswitch to mine New blocks instead, plenty of options exist for\nexchanging their block rewards for goods, services, or other currencies.</p>\n</li>\n<li>\n<p>The nonmining users using Old software will automatically switch\nto the New branch once that branch is stronger than the Old branch. This\nis because, in a soft fork, the New branch is valid according to the Old\nsoftware.</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div></article>", 'body': "\nAppendix A: Answers to exercises\n\n\nChapter 2\n\n\n\n256 bits.\n\n\n32 bytes.\n\n\nA cryptographic hash function.\n\n\n061a is 6*256 + (16 + 10) = 1,536 + 26 = 1,562 in decimal\nform. The binary form of 06 is 0000 0110, and the binary form of\n1a is 0001 1010, so the full binary representation is 0000 0110\n0001 1010.\n\n\nNo. If it was possible, the function wouldn’t be\nsecond-pre-image-resistant.\n\n\nProperties 2 and 4 are lacking.\n\n\nSecond-pre-image resistance is stopping the attacker. The attacker\nneeds to find an input that gives the same hash as a certain other\ninput: the cat picture.\n\n\nThe money supply increase rate will decrease over time because the\nreward to Lisa halves every 4 years. This means the total amount of CT\nto ever be created will be about 21,000,000.\n\n\nThe coworkers have read access to the spreadsheet. They can watch\nthe spreadsheet and verify that Lisa doesn’t reward herself too much or\ntoo often.\n\n\nThe private key is created using a random number generator of\nsome sort. A simple one is a coin that you flip 256 times to generate\nyour 256-bit private key. You can also use your operating system’s\nbuilt-in random number generator.\n\n\nThe private key.\n\n\nThe message is hashed because you want signatures to be small and\nfixed in size. You don’t want the signatures to be big just because the\nsigned message is big.\n\n\nMallory would need John’s private key to steal cookies from him.\nShe would also need his name, John, to write into the email to Lisa, but\nthat’s easily available in the spreadsheet.\n\n\nFred can use your public key to encrypt the message and send the\nencrypted message to you. You can then decrypt that message using your\nprivate key.\n\n\nYou sign the message using your private key and write the digital\nsignature onto the note in the bottle. Fred can then verify that the\nsignature is in fact made with your private key. He does this by using\nyour public key to decrypt the signature and comparing the decrypted\nhash with the actual hash of the message. If they match, he can be sure\nthe message is from you.\n\n\n\n\n\nChapter 3\n\n\n\nThe PKH is made short because a) it makes the spreadsheet smaller\nin size and b) it makes cookie token addresses (and Bitcoin addresses)\nshorter to write for a user.\n\n\nYes, you can. There’s a base58check decoding algorithm that does\nthis.\n\n\nIt’s used by a payer to translate the recipient’s address into a\nPKH. The payer needs to write the recipient’s PKH in the email to Lisa.\n\n\nLet’s base58-encode 0047 step by step:\n\n\n\nRemove leading 00 bytes. There is one, which leaves you with 47.\n\n\nConvert to a decimal number: 47 in hex is 4 × 16 + 7 = 71 in decimal.\n\n\nDivide 71 by 58: 71 = 1 × 58 + 13. The quotient is 1, and the remainder\nis 13.\n\n\nDivide the quotient, 1, by 58: 1 = 0 × 58 + 1. The quotient is 0, and\nthe remainder is 1.\n\n\nLook up the remainders 13 and 1. Result: E and 2.\n\n\nAdd a 1 for the removed 00 byte in step 1, which results in E21.\n\n\nReverse it: 12E. Done.\n\n\n\n\n\nThe 4-byte checksum.\n\n\nHe must make two separate payments. For example: payment 1 pays 2\nCT from @1 to the cafe, and payment 2 pays 8 CT from @2 to the cafe.\nAnother way is to first pay 2 CT from @1 to @2 and then pay 10 CT\nfrom @2 to the cafe.\n\n\nYes it is. Base58check-encode the PKHs to get the addresses.\n\n\nNo, because the spreadsheet contains PKHs. Because cryptographic\nhash functions are one-way functions, you can’t go from PKH to public\nkey.\n\n\nThey can look at the amounts. Many of the 10 CT payments are\nprobably cookie purchases.\n\n\nThe bad guy can’t steal cookie tokens because he needs the public\nkey to exploit the flaw in the public key derivation function. The\nspreadsheet contains PKHs; the bad guy can’t get the public key from it.\n\n\nThe bad guy needs the private key to sign fraudulent emails to\nLisa. Even though he can reverse RIPEMD160, he’d still need to pre-image\nattack SHA256 and reverse the public key derivation function to get to a\nworking private key.\n\n\n\n\n\nChapter 4\n\n\n\nbitcoin:155gWNamPrwKwu5D6JZdaLVKvxbpoKsp5S?amount=50\n\n\nEach character corresponds to 6 bits of entropy because 26 = 64.\nTen such characters make 60 bits of entropy, which corresponds to 60\ncoin flips.\n\n\nThe four problems:\n\n\n\nPasswords are easily forgotten.\n\n\nRandomness is hard.\n\n\nThe security of a password decreases as technology improves.\n\n\nYou need to keep track of two items: the backup and the\npassword. This increases the risk that the backup is lost.\n\n\n\n\n\nThe seed is created by first generating a huge random number, then\nthe random number is encoded as a mnemonic sentence, and lastly, the\nmnemonic sentence is used to generate the seed.\n\n\nAn xprv consists of a private key and a chain code.\n\n\nAn xpub consists of a public key and a chain code.\n\n\nThe xprv at path m/2/1 and the wanted index 7.\n\n\nNo, you would need xprv m/2/1 to derive xpub M/2/1/7'. You\nfirst derive hardened xprv m/2/1/7' from m/2/1 using hardened xprv\nderivation and then calculate the xpub M/2/1/7' from m/2/1/7'.\n\n\nYou can use the following procedure to get the master xprv:\n\n\n\nUse master xpub M to derive xpub M/4 and remember the left-half\nhash, L4.\n\n\nUse M/4 to derive the left-half hash L41 at index 1.\n\n\nSubtract L41 from the private key m/4/1 to get private key m/4.\n\n\nSubtract L4 from the private key m/4 to get private key m.\n\n\nm together with the chain code of xpub M is the master xprv.\n\n\n\n\n\nYes, you’d be able to steal all funds in any addresses because\nyou can calculate the master xprv.\n\n\nThe victim could have used hardening to generate m/4' instead.\nThis way, you wouldn’t be able to get the master xprv. If you stole\nm/4'/1 and the master xpub, you would only be able to steal funds on\nthe m/4'/1 key. You wouldn’t be able to calculate the M/4' xpub.\n\n\nThe employees can import the xpub for the counter sales account.\nThey will then be able to generate any public keys under that account\nand thus generate as many addresses as they need without ever having to\nknow any private keys.\n\n\nYour (and Anita’s) wallet can generate 10 addresses ahead of time\nand monitor the spreadsheet for those addresses. If Anita gets paid to\none of these addresses—probably the first of those 10—then your wallet\nwon’t reuse that address when you request a payment from a customer. You\nwould instead take the next unused address.\n\n\n\n\n\nChapter 5\n\n\n\nYou would spend the 4 CT and the 7 CT outputs. The new outputs\nwould be 10 CT to the cafe and 1 CT in change to an address you control.\n\n\nThey’re used in inputs to reference transactions from which to\nspend outputs.\n\n\nBecause you can’t spend part of a transaction output. You either\nspend the output or you don’t. If the spent output contains more value\nthan you’re paying, you need to give back change to yourself.\n\n\nIn the signature scripts in the inputs.\n\n\nBecause the verifiers need to know what public key to verify the\nsignature with. You can’t verify the signature with a PKH, so you need\nto explicitly reveal the public key in the signature script.\n\n\nThe signature scripts are cleaned so that verifiers don’t have to\nknow the order in which the inputs are signed.\n\n\nEach output of a transaction contains a pubkey script. It contains\nthe second part of a script program. The first part will be provided\nlater, when the output is spent.\n\n\nThe Script program must end with OK on top of the stack.\n\n\nA p2sh address always starts with a 3. You can also recognize it\nby base58check-decoding it and looking at the first byte. If that byte\nis 05, it’s a p2sh address.\n\n\nYou’ll create a transaction with one input and three outputs:\n\n\n\n\n\n\n\n10,003 UTXOs. You remove two UTXOs by spending two outputs, and\nyou add five new UTXOs. The net effect on the UTXO set is thus +3 UTXOs.\n\n\nThe pubkey script can be, for example, 1. The spending input\ncan have an empty signature script. The full Script program just puts a\n1 on the stack. A result stack with non-zero on top means OK.\n\n\nOP_ADD 10 OP_EQUAL. This will first add the two top items on\nthe stack and put the result back on top. Then, you’ll push the number\n10 to the stack and compare the two top items. If they’re equal, OK will\nbe pushed to the stack.\n\n\nYes. Your full node verifies everything in the spreadsheet from\nthe very first transaction up to the transaction containing your money\nfrom Faiza. It verifies (among other things) the following:\n\n\n\nLisa created the expected number of coinbase transactions with the\ncorrect amounts in them.\n\n\nFor each transaction in the spreadsheet, the value sum of outputs\ndoesn’t exceed the value sum of inputs.\n\n\nAll signatures from Faiza’s payment back to all coinbase transactions\nare OK.\n\n\n\n\n\nIf there are several UTXOs to the same PKH, then as soon as one\nof them is spent, the security of the other UTXOs to the same PKH will\nbe degraded. This is because you remove a layer of security, the\ncryptographic hash function. From this point, you rely solely on the\npublic key derivation function to be secure. You can avoid this problem\nby using unique addresses for all your incoming payments. Then, all your\nUTXOs will have different PKHs.\n\n\n\n\n\nChapter 6\n\n\n\nBy the previous block’s block ID, which is the hash of the\nprevious block’s header.\n\n\nThe merkle root of a block commits to all transactions in that\nblock.\n\n\nLisa’s block signature commits to the timestamp, the merkle root\n(and indirectly all transactions in this block), and the previous block\nID (and indirectly the whole blockchain before this block).\n\n\nThe first transaction in each block is a coinbase transaction.\nThis coinbase transaction creates 50 new cookie tokens and sends them to\nLisa’s cookie token address.\n\n\nAll transactions. The hash functions will all result in an index\ncontaining 1 because there are no zeroes in the bloom filter. Any item\nin the transaction that you test will be a positive.\n\n\nThe following are tested:\n\n\n\nThe txid together with the index that identifies the output to spend\n\n\nAll data items in the signature scripts\n\n\nAll data items in the pubkey scripts\n\n\nThe txid of the transaction\n\n\n\n\n\nThey aren’t pre-image resistant, collision resistant, or\nsecond-pre-image resistant. The output space is small—typically just a\nfew hundred to a few thousand numbers. It will take only a fraction of a\nsecond to find a pre-image of, for example, 172.\n\n\nThe rightmost leaf must be copied to make an even number of\nleaves. The same goes for the next level, where the third hash needs to\nbe copied.\n\n\n\n\n\n\n\nIf Lisa’s private block-signing key is stolen, the thief can\ncreate blocks in Lisa’s name. Also, if a bad guy replaces Lisa’s\nblock-signing public key on one or more sources, such as the bulletin\nboard or the intranet, the bad guy can fool people into accepting blocks\nnot signed by Lisa.\n\n\nLisa can censor transactions, and the shared folder administrator\ncan censor blocks.\n\n\na) Yes, a new node that downloads all blocks from the shared\nfolder will notice that there are two versions of the block. b) Yes, an\nold node that has already downloaded the original block will detect that\nthere is an alternate version of the block.\n\n\nThe bits at indexes 1, 5, 6, and 7 are set to 1 and the\nother to 0. The full node would not send this transaction to the\nlightweight wallet. Nothing that’s tested hashes to only indexes where\nthe bits are 1. This was something of a trick question, because the\nspent txid and the output index of the spent transaction aren’t tested\nindividually, so 1,6,6 will never be considered by the full node.\n\n\n\n\n\n\n\nThe partial merkle tree is\n\n\nNumber of tx: 3\nFlags: ✔✔✘✔✔✔\nHashes 3 4 6\n\n\n\n\nThe interesting transactions are numbers 7 and 13, or leaf numbers 6\nand 10 from the left. You’ve already seen the solution in\n[bigger-trees], but I provide it here as well for reference.\n\n\n\n\n\n\n\nYou need to verify the following:\n\n\n\nThe transaction’s txid is in the list of hashes.\n\n\nThe root of the partial merkle tree matches the merkle root in the block\nheader.\n\n\nThe block header is correctly signed.\n\n\n\n\n\n\n\n\nChapter 7\n\n\n\nShe single-handedly decides what transactions get confirmed.\n\n\nThe probability of censorship will decrease because all miners\nmust cooperatively decide to censor a transaction to succeed. Otherwise,\nyour transactions will eventually be confirmed by some noncolluding\nminer.\n\n\nMiners can cheat with random numbers. You can’t prove whether a\nminer cheated.\n\n\nVerify that the block ID of a block is lower than the target in\nthe block header, and that the target is the agreed-on target.\n\n\nBy repeatedly changing the nonce and hashing (double SHA256) the\nblock header until the block ID (the block header hash) is lower than\nthe target.\n\n\nThe branch with the most accumulated proof of work. This isn’t\nnecessarily the same as the branch with the most blocks.\n\n\nA miner with a hashrate of 100 Mhash/s can perform 100,000,000\ntries per second to find a valid proof of work.\n\n\nThe target will increase. If the 2,016 blocks take 15 days instead\nof the goal of 14 days, then it’s too hard to find blocks, so you need\nto decrease the difficulty, which means increasing the target.\n\n\n50%. But if you plan to give up at some point, your chances will\ndecrease.\n\n\nThe small block will reach the other miners more quickly than the\nbig block because a smaller block travels a computer network faster than\na big block. The small block is probably also quicker to verify than the\nbig block. Miners will probably download and verify the small block\nfaster than the big block and continue their mining activity on top of\nthe small block, which gives the small block a higher probability of\nbecoming part of the strongest chain.\n\n\nThe target will decrease by a factor of 3/4. The time to produce\n2,016 blocks is 1.5 weeks; the first 1,008 blocks take 1 week, and the\nnext 1,008 blocks take 0.5 weeks. So, the new target becomes\n\n\n\\$N=\nO*\\left\\{\n\\begin{array}{ll}\n\\frac{1}{4} & \\mbox{if } T \\lt 0.5 \\\\$\n\\$\\frac{T}{2} & \\mbox{if } 0.5 \\leq T \\leq 8 \\\\$\n\\$4 & \\mbox{if } 8 \\lt T\n\\end{array}\n=O*\\frac{1.5}{2}=O*\\frac{3}{4}\n\\right.\\$\n\n\n\n\nSelma has the majority of the hashrate. As long as she plays by\nthe same rules as everyone else, she’s going to earn a lot of block\nrewards. When she breaks the rules by changing the target prematurely,\nall full nodes except Selma’s will discard her blocks. Selma will\ncontinue working on her own branch of the blockchain with her new rules,\nwhile all the rest will work on the branch with the old rules. The\nbranches will be mutually incompatible. The hashrate of the old branch\nwill drop to 48%, but the system will tick on, and everyone will\ncontinue their daily lives as normal. Selma, on the other hand, will\nspend a lot of electricity and time on her new branch, and no one will\nbuy her block rewards. The value of her mined coins will probably be\nclose to zero because she’s not following the rules. Selma is a loser.\n\n\nThe fee-per-byte metric used by most miners will be very low. For\nevery byte of transaction data the miner puts in its block, it will lose\na little competitiveness because the block will get bigger and thus\nslower to transport over the network and to verify. If the fee per byte\nfor the transaction isn’t high enough to compensate for the lost\ncompetitiveness, the miner probably won’t include it.\n\n\n\n\n\nChapter 8\n\n\n\nThe shared folder is a bad idea because it gives the shared folder\nadministrator absolute power over what blocks to allow. Also, if the\nadministrator decides to start mining, he can shut off all competition\nand have complete power of the system.\n\n\nTo relay a block or a transaction means to pass it on to peers.\n\n\nAn inv message is used to announce to peers that you have a\ncertain block or transaction; inv stands for inventory.\n\n\nIt will run the transaction through the bloom filter it got from\nthe wallet. If any tested item in the transaction matches the filter,\nthe node will send the transaction to the lightweight wallet.\n\n\nThe full node sends an inv to the lightweight wallet after\nconsulting the bloom filter. The wallet can then fetch the transaction\nif it doesn’t already have it.\n\n\nThe block header.\n\n\nBecause the cafe doesn’t have to obfuscate to its trusted node\nwhat addresses belong to the wallet. It sends a very big bloom filter to\nsave data traffic on its mobile phone; a bloom filter that contains\nmostly zeroes will send almost no false positives.\n\n\nShe would verify the signature of the program using the public key\nshe knows belongs to the Bitcoin Core development team. She does this to\navoid being tricked into running malicious software.\n\n\nUsing a DNS server to get a list of IP addresses for a DNS seed (a\nDNS name) configured in Bitcoin Core, asking trusted friends, and using\nhardcoded addresses shipped with Bitcoin Core.\n\n\nThe node’s peers will announce any new blocks by sending\nheaders messages to the node, even during its synchronization process.\n\n\nYou need to convince the cafe, Qi, and Tom to hide blocks from\nLisa. You can bribe them or threaten them.\n\n\nShe sends an inv message to Rashid’s node containing the two\ntransaction IDs.\n\n\nYour node starts the synchronization process, which will look\nlike this:\n\n\n\n\n\n\n\n\n\n\nChapter 9\n\n\n\nAt least one of the inputs must have a sequence number strictly\nless than ffffffff.\n\n\nThe median of the timestamps of the 11 previous blocks must be\nstrictly later than 2019-12-25 00:00:00.\n\n\nIn the rightmost 16 bits of the sequence number.\n\n\nTwo transactions on each blockchain: one for the contract\ntransaction and one for the swap transaction.\n\n\nWith fake PKHs, the data must be stored forever in the UTXO set\nbecause Bitcoin nodes can’t distinguish between fake PKHs and real ones.\nThe nodes won’t be able to tell if the output is unspendable or not.\nWith an OP_RETURN output, the node knows that the output is\nunspendable and thus doesn’t have to keep it in the UTXO set.\n\n\nYour first transaction paid a too-small fee and got stuck pending.\nYou then want to replace it with a new transaction that pays a higher\nfee.\n\n\nAbsolute lock time: a transaction is invalid until a certain block\nheight or time. Relative lock time: an input of a transaction is invalid\nuntil the spent output has been confirmed for a certain number of blocks\nor a certain time period.\n\n\nThe redeem script contains two branches of code. The first branch\nwill require that both you and Ruth sign to spend the 2 BTC. This can be\ndone at any time. To spend the 2 BTC using the second branch requires\nthat all of the following conditions are met:\n\n\n\n\n\nYou have waited until New Year’s Eve.\n\n\nBeth has signed the transaction.\n\n\nYou or Ruth signs the transaction.\n\n\n\n\nTo be precise, you and Ruth can spend using the first branch with the\nfollowing signature script (excluding the redeem script):\n\n\n\n0 <your sig> <ruth sig> 1\n\n\n\nThe second branch can be spent at the earliest on New Year’s Eve with\n\n\n\n0 <your or ruths sig> <beth sig> 0\n\n\n\nThe rightmost digit in both these signature scripts will select what\nbranch to use; the rest fulfill the requirement in the respective\nbranch.\n\n\nThe time-locked branch ensures that Beth has no power to collude with\neither you or Ruth before New Year’s Eve.\n\n\n\n\n\nNo. The redeem script isn’t known to the nodes until the output is\nspent. And because you can’t spend an OP_RETURN redeem script, nodes\nwill never know about the redeem script. The node will thus never know\nthat this is an unspendable output.\n\n\nA full node that receives a transaction will keep it in memory\nuntil it’s included in a block. If a second, conflicting transaction\narrives, the node will drop that second transaction and not relay it. It\nwill consider the first-seen transaction as the “real” one and the\nsecond transaction as a double-spend attempt. Nodes (including miners)\naren’t required to follow this policy because it’s just a policy.\n\n\nMiners can always select whatever valid transactions they want to\ninclude in their blocks. Thus all transactions are in a way replaceable.\nA miner can offer replacement as a service—that is, upload a\ndouble-spend transaction with a high fee via the miner’s website to have\nit confirmed in the miner’s next winning block.\n\nIt is, of course, simpler for normal users to replace a transaction that\nhas opted in to RBF. But using services like the aforementioned one is\nsimple enough for a motivated thief. The difference in security\ntherefore isn’t as big as you might think.\n\n\n\n\n\n\nChapter 10\n\n\n\nThe signature scripts.\n\n\nA transaction, T2, that spends an output of an unconfirmed\ntransaction, T1, can become invalid if T1 is changed into T1M\nwhile being broadcast, and T1M gets confirmed. This causes a lot of\nproblems for contracts.\n\n\nThe time to verify a legacy transaction increases four times when\nthe number of inputs doubles. This is because\n\n\n\nYou need to verify twice the number of signatures.\n\n\nEach signature takes double the time to verify because the transaction\nto hash has doubled in size.\n\n\n\n\n\nTo verify that the transaction is included in a block, the\nlightweight wallet needs to calculate the transaction’s txid. The wallet\nneeds the signatures to calculate the txid because they’re included in\nthe txid.\n\n\nThe new behavior of OP_NOP5 must, if it succeeds, be exactly\nlike the old behavior of OP_NOP5. This means it should have no effect\non the stack if it succeeds.\n\n\na (p2wpkh) and c (p2wsh) are segwit addresses. d is a p2sh\naddress, but it might contain a nested p2wpkh or p2wsh payment in the\nredeem script. We can’t say for sure. But the address is a p2sh address,\nnot a segwit address.\n\n\nThe witness version is used to make future upgrades easier. The\nrule is that unknown witness versions are accepted. When a new witness\nversion is deployed, old nodes will accept any payment that spends\noutputs with that new witness version. This avoids causing old and new\nnodes to follow different branches of the blockchain.\n\n\nAll data items in the signature script are pushed to the stack.\nNo such items exist in the signature script, so there’s nothing to do\nthere. Then, 00 will be pushed followed by c805…cba8. The Script\nprogram is then finished, and the top item on the stack is checked. It’s\nnot zero, which means the spending is valid.\n\n\nThe new node will notice that the output has the segwit pattern.\nIt will also notice that the witness version is 00 and that the\nwitness program is 20 bytes. That means this is a p2wpkh output. To\nspend such an output, the signature script must be empty, and the\nwitness must contain exactly a signature and the pubkey corresponding to\nthe witness program, PKHY. The p2wpkh template is filled in using\nthe signature and public key from the witness field and the PKH from the\npubkey script (the witness program). The filled-in template is then run\nnormally.\n\n\nThe fee merkle root can be placed in the right branch under the\nwitness commitment. But you also need to put the fee merkle root in the\nwitness for the coinbase input so that old segwit nodes can verify the\nwitness root hash.\n\n\nAn old segwit node will verify the block exactly as before. The\nwitness reserved value will be taken from the witness of the coinbase\ninput. Using the hash from the witness lets the old node build the\nwitness commitment and compare it with the hash in the OP_RETURN\noutput, but it won’t know that the witness reserved value is a fee\nmerkle root. Old nodes thus won’t be able to verify the fee merkle tree.\n\nA new node will do the same verification as an old node, but it will\nalso calculate the fee merkle root and compare it to the hash in the\ncoinbase’s witness.\n\n\n\n\n\n\nChapter 11\n\n\n\nA soft fork tightens the consensus rules. This means blocks\ncreated by Bitcoin New nodes are guaranteed to be accepted by Bitcoin\nOld nodes.\n\n\n\xa0\n\n\n\nThe New branch will get wiped out by the Old branch.\n\n\nIt will eventually get wiped out when the Old branch catches\nup with the New branch and surpasses it. This can take quite a few\nblocks, depending on the initial deficit.\n\n\nBitcoin New could be equipped with wipeout protection—for\nexample, by requiring that the first block in the split have a certain\nproperty that’s not valid in the Old chain. Bitcoin Cash, for example,\nrequired that the first block be > 1,000,000 bytes.\n\n\n\n\n\nNo, it will be outperformed by the New branch, and the Old branch\nwill pretty quickly be wiped out, or reorged.\n\n\n2,016 blocks. The LOCKED_IN state is always one retarget\nperiod.\n\n\nBoth. Old nodes can create a block that’s not valid according to\nNew nodes. Conversely, New nodes can create a block that’s not valid\naccording to Old nodes.\n\n\nIf the New nodes don’t have a majority of the hashrate, the Old\nnodes can cause a lasting blockchain split. This would effectively\nresult in two cryptocurrencies.\n\n\nReplay protection is desirable because a transaction intended for\none branch of the split shouldn’t risk ending up on the other branch.\n\n\nYes. Suppose the 11 timestamps before B1, sorted by value, are\n\n\n\n\na ≤ b ≤ c ≤ d ≤ e ≤ MTP1 ≤ g ≤ h ≤ i ≤ j ≤ k\n\n\n\nTo calculate MTP2 of block B2 following B1, add T1 to this list.\nBecause a timestamp of a block needs to be strictly later than the MTP\nof the block, T1 must be sorted to the right of MTP1 in the list.\nFor example:\n\n\n\na ≤ b ≤ c ≤ d ≤ e ≤ MTP1 ≤ g ≤ h ≤ T1 ≤ i ≤ j ≤ k\n\n\n\nYou must also remove the timestamp of the block with lowest height from\nthe list of timestamps. No matter what timestamp you remove, MTP2 will\nbe either MTP1 (if you remove a timestamp to the right of it), or the\ntimestamp immediately to the right of MTP1 (if you remove a timestamp\nto the left of it) which can be either g or T1:\n\n\nIf MTP2 = MTP1, then MTP2 < timeout because MTP1 < timeout.\n\n\nIf MTP2 = g, then MTP2 ≤ T1 < timeout.\n\n\nIf MTP2 = T1 then MTP2 < timeout because T1 < timeout.\n\n\nSo, the MTP of B2 is less than timeout in all cases, and all blocks\n(>95%) of the last 2,016 blocks signal support, which means the\ndeployment will move to LOCKED_IN and—2,016 blocks later—to ACTIVE.\n\n\n\n\n\nA portion (<30%) of the economy starts rejecting blocks that\ndon’t comply with your soft fork. This means you’ll cause a blockchain\nsplit that will remain as long as a majority of miners support the Old\nbranch.\n\n\nWhen most of the economy starts rejecting Old blocks, miners\nprobably won’t want to mine Old blocks because the block rewards will\nbecome nearly worthless for them. It would be hard for miners to sell\ntheir Old coins on an exchange or pay for electricity with them. If they\nswitch to mine New blocks instead, plenty of options exist for\nexchanging their block rewards for goods, services, or other currencies.\n\n\nThe nonmining users using Old software will automatically switch\nto the New branch once that branch is stronger than the Old branch. This\nis because, in a soft fork, the New branch is valid according to the Old\nsoftware.\n\n\n\n\n\n", 'body_type': 'html', 'authors': ['Kalle Rosenbaum'], 'domain': 'https://github.com', 'url': 'https://github.com/kallerosenbaum/grokkingbitcoin/blob/master/app2-answers.adoc', 'created_at': '2023-06-29T13:58:29.898097'}}, {'_index': 'bitcoin-search-scrapy-23', '_id': 'nzfTBokBCZBMBhppA9U8', '_score': 1.0, '_ignored': ['body.keyword', 'body_formatted.keyword'], '_source': {'id': 'grokkingbtc-1c37a47e-d95f-4d68-a6e0-54ab0737309f', 'title': '[Grokking Bitcoin] Appendix A: Web resources', 'body_formatted': '<article><div>\n<h2><a><svg><path></path></svg></a>Appendix A: Web resources</h2>\n<div>\n<div>\n<dl>\n<dt>Web resource 1</dt>\n<dd>\n<p>Satoshi Nakamoto, “Bitcoin: A\nPeer-to-Peer Electronic Cash System,” 2008, <a>http://mng.bz/lppR</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 2</dt>\n<dd>\n<p>Bitcoin Stack Exchange,\n<a>http://mng.bz/BDDl</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 3</dt>\n<dd>\n<p>Bitcoin Developer Reference,\n<a>http://mng.bz/dPP1</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 4</dt>\n<dd>\n<p>Bitcoin source code repository,\n<a>http://mng.bz/rBBj</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 5</dt>\n<dd>\n<p>Kalle Rosenbaum, source code\nfor <em>Grokking Bitcoin</em>, <a>http://mng.bz/qBO2</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 6</dt>\n<dd>\n<p>“Financial Inclusion Data /\nGlobal Findex,” The World Bank, 2014, <a>http://mng.bz/Vqqx</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 7</dt>\n<dd>\n<p>“Reception of WikiLeaks:\nResponse from the financial industry,” Wikipedia, <a>http://mng.bz/gYnV</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 8</dt>\n<dd>\n<p>Menelaos Hadjicostis, “Bank of\nCyprus Depositors Lose 47.5% of Savings,” USA Today, July 29, 2013,\n<a>http://mng.bz/pEez</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 9</dt>\n<dd>\n<p>Bitcoin improvement proposals\n(BIPs), GitHub, <a>http://mng.bz/OA0E</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 10</dt>\n<dd>\n<p>Choose Your Bitcoin Wallet,\n<a>http://mng.bz/xJJ6</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 11</dt>\n<dd>\n<p>Andrea Corbellini, “Elliptic\nCurve Point Addition,” <a>http://mng.bz/YOBA</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 12</dt>\n<dd>\n<p>Discussion of why double SHA256\nis used in Bitcoin, Stack Exchange Cryptography, <a>http://mng.bz/G2aO</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 13</dt>\n<dd>\n<p>Complete list of Script\noperators in Bitcoin, Bitcoin Wiki, <a>http://mng.bz/A22Q</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 14</dt>\n<dd>\n<p>Arthur Gervais,\nGhassan O. Karame, Damian Gruber, and Srdjan Capkun, “On the Privacy\nProvisions of Bloom Filters in Lightweight Bitcoin Clients,”\nCryptology ePrint Archive, <a>http://mng.bz/ZZZ9</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 15</dt>\n<dd>\n<p>Peter Todd, “What Attack Does\nthe Difficulty Drop Rate Limiter Prevent?”, <a>http://mng.bz/zgWQ</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 16</dt>\n<dd>\n<p>Lightning Labs, Lightning\nResources, <a>http://mng.bz/RGGa</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 17</dt>\n<dd>\n<p>A blockchain explorer showing\nthe ascii-art transaction discussed in <a>[ch09]</a>, <a>http://mng.bz/J88Q</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 18</dt>\n<dd>\n<p>Running a Full Node,\n<a>http://mng.bz/2AAw</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 19</dt>\n<dd>\n<p>Bitcoin Core download page,\n<a>http://mng.bz/177R</a>.</p>\n</dd>\n</dl>\n</div>\n<div>\n<dl>\n<dt>Web resource 20</dt>\n<dd>\n<p>Getting Started with Bitcoin,\n<a>http://mng.bz/P885</a>.</p>\n</dd>\n</dl>\n</div>\n</div>\n</div></article>', 'body': '\nAppendix A: Web resources\n\n\n\nWeb resource 1\n\nSatoshi Nakamoto, “Bitcoin: A\nPeer-to-Peer Electronic Cash System,” 2008, http://mng.bz/lppR.\n\n\n\n\n\nWeb resource 2\n\nBitcoin Stack Exchange,\nhttp://mng.bz/BDDl.\n\n\n\n\n\nWeb resource 3\n\nBitcoin Developer Reference,\nhttp://mng.bz/dPP1.\n\n\n\n\n\nWeb resource 4\n\nBitcoin source code repository,\nhttp://mng.bz/rBBj.\n\n\n\n\n\nWeb resource 5\n\nKalle Rosenbaum, source code\nfor Grokking Bitcoin, http://mng.bz/qBO2.\n\n\n\n\n\nWeb resource 6\n\n“Financial Inclusion Data /\nGlobal Findex,” The World Bank, 2014, http://mng.bz/Vqqx.\n\n\n\n\n\nWeb resource 7\n\n“Reception of WikiLeaks:\nResponse from the financial industry,” Wikipedia, http://mng.bz/gYnV.\n\n\n\n\n\nWeb resource 8\n\nMenelaos Hadjicostis, “Bank of\nCyprus Depositors Lose 47.5% of Savings,” USA Today, July 29, 2013,\nhttp://mng.bz/pEez.\n\n\n\n\n\nWeb resource 9\n\nBitcoin improvement proposals\n(BIPs), GitHub, http://mng.bz/OA0E.\n\n\n\n\n\nWeb resource 10\n\nChoose Your Bitcoin Wallet,\nhttp://mng.bz/xJJ6.\n\n\n\n\n\nWeb resource 11\n\nAndrea Corbellini, “Elliptic\nCurve Point Addition,” http://mng.bz/YOBA.\n\n\n\n\n\nWeb resource 12\n\nDiscussion of why double SHA256\nis used in Bitcoin, Stack Exchange Cryptography, http://mng.bz/G2aO.\n\n\n\n\n\nWeb resource 13\n\nComplete list of Script\noperators in Bitcoin, Bitcoin Wiki, http://mng.bz/A22Q.\n\n\n\n\n\nWeb resource 14\n\nArthur Gervais,\nGhassan O. Karame, Damian Gruber, and Srdjan Capkun, “On the Privacy\nProvisions of Bloom Filters in Lightweight Bitcoin Clients,”\nCryptology ePrint Archive, http://mng.bz/ZZZ9.\n\n\n\n\n\nWeb resource 15\n\nPeter Todd, “What Attack Does\nthe Difficulty Drop Rate Limiter Prevent?”, http://mng.bz/zgWQ.\n\n\n\n\n\nWeb resource 16\n\nLightning Labs, Lightning\nResources, http://mng.bz/RGGa.\n\n\n\n\n\nWeb resource 17\n\nA blockchain explorer showing\nthe ascii-art transaction discussed in [ch09], http://mng.bz/J88Q.\n\n\n\n\n\nWeb resource 18\n\nRunning a Full Node,\nhttp://mng.bz/2AAw.\n\n\n\n\n\nWeb resource 19\n\nBitcoin Core download page,\nhttp://mng.bz/177R.\n\n\n\n\n\nWeb resource 20\n\nGetting Started with Bitcoin,\nhttp://mng.bz/P885.\n\n\n\n\n', 'body_type': 'html', 'authors': ['Kalle Rosenbaum'], 'domain': 'https://github.com', 'url': 'https://github.com/kallerosenbaum/grokkingbitcoin/blob/master/app3-web-resources.adoc', 'created_at': '2023-06-29T13:58:29.920375'}}, {'_index': 'bitcoin-search-scrapy-23', '_id': 'lDfTBokBCZBMBhppEddR', '_score': 1.0, '_ignored': ['body.keyword', 'body_formatted.keyword'], '_source': {'id': 'grokkingbtc-3b85c342-8d77-4bac-a067-21634198e0d0', 'title': '[Grokking Bitcoin] Transactions revisited', 'body_formatted': '<article><div>\n<h2><a><svg><path></path></svg></a>Transactions revisited</h2>\n<div>\n<div>\n<p>This chapter covers</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Time-locking bitcoins</p>\n</li>\n<li>\n<p>Swapping coins between blockchains</p>\n</li>\n<li>\n<p>Attaching arbitrary data to transactions</p>\n</li>\n<li>\n<p>Bumping the fee of a pending transaction</p>\n</li>\n</ul>\n</div>\n<div>\n<p>We’re now past the core chapters of the book, in which you learned the\nBitcoin basics. In this chapter, we’ll dig deeper into the\nfunctionality transactions can offer.</p>\n</div>\n<div>\n<p>We’ll start by exploring time locks. A <em>time lock</em> is a way to make a\ntransaction invalid until some point in time. This means the\ntransaction can’t be confirmed before that time constraint\nis met. Also, an output of a transaction can be programmed to prevent\nit from being spent until a time constraint is fulfilled. This is\nuseful for digital contracts, such as atomic swaps, covered later in\nthis chapter.</p>\n</div>\n<div>\n<p>It’s sometimes useful to store a small amount of data in a transaction\nin the blockchain. For example, a car manufacturer might want to track\nownership of a car by putting its chassis number into a Bitcoin\ntransaction, effectively creating a token on the Bitcoin\nblockchain. The current owner can then transfer ownership of the car\nby sending that token to the new owner.</p>\n</div>\n<div>\n<p>As mentioned in <a>[altcoins]</a>, several alternative cryptocurrencies are\navailable. Sometimes, you might want to trade, for example, namecoins\nfor bitcoins. The most obvious way to do this is to use an exchange to\nsell bitcoins and buy namecoins. But there are other, more\ndecentralized ways to do it. <em>Atomic swaps</em> let you swap bitcoins\ndirectly with someone holding namecoins without a trusted third party,\nlike an exchange.</p>\n</div>\n<div>\n<p>If you pay a too-small transaction fee, miners might refuse to confirm\nthe transaction within a reasonable time. In this situation, it can be\nhelpful to replace the transaction with another one that pays a little\nmore in fees. This is known as <em>fee-bumping</em>.</p>\n</div>\n<div>\n<p>Finally, we’ll explore some intricate details of signatures. You can\ncreate signatures in different ways depending on your use case. You\ncan tune what the signature should commit to: in other words, change\nhow the signing algorithm hashes the transaction.</p>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Time-locked transactions</h3>\n<div>\n<p>When you create and sign a transaction, it’s valid and ready for\ninclusion in any future block. You can broadcast it immediately and have\nit mined. This is the normal case.</p>\n</div>\n<div>\n<p>But in some cases, you may want to sign a transaction with a guarantee\nthat it won’t be mined until after at least, say, one year has passed.</p>\n</div>\n<div>\n<p>Suppose you have 100 bitcoins, and you want your daughter to inherit the\nmoney to her address @<sub>D</sub>, but only after you die. You can create a\ntransaction that’s time-locked (<a>A payment to your daughter that will become valid on 30 April 2019</a>).</p>\n</div>\n<div>\n<div>\n<div>No fee?</div>\n<div>\n<p>For the sake of simplicity, most examples in this chapter don’t pay\nany fees.</p>\n</div>\n</div>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 1. A payment to your daughter that will become valid on 30 April 2019</div>\n</div>\n<div>\n<div>\n<div>Sequence numbers</div>\n<div>\n<p>Sequence numbers are always included in inputs, but I haven’t shown\nthem because they didn’t matter to the transactions used so far.</p>\n</div>\n</div>\n</div>\n<div>\n<p>What makes this transaction special are the inputs’ sequence numbers and\nthe transaction lock time. I briefly mentioned sequence numbers in\n<a>[ch05]</a>. They’re used to enable the lock time: if any input has a\nsequence number less than <code>ffffffff</code>—for example, <code>fffffffe</code>—the lock\ntime set on the transaction will be effective. If all sequence numbers\nare <code>ffffffff</code>, the lock time won’t have any effect.</p>\n</div>\n<div>\n<p>You give this transaction, Tx<sub>1</sub>, to your daughter. It’s currently\ninvalid; your daughter stores it on her computer and prints a backup\nthat she keeps in another place. It isn’t broadcast; no full node will\naccept a block containing this transaction yet. The transaction will\nbecome valid the morning of 30 April 2019. If you die before that, your\ndaughter must wait until after the lock-time date and then claim the\nmoney by broadcasting the transaction, which will have become valid by\nthen.</p>\n</div>\n<div>\n<p>If you don’t die before that date, you want to make sure the time-locked\ntransaction becomes useless so your daughter can’t take the money once\nthe date has passed.</p>\n</div>\n<div>\n<p>You can create, but not yet broadcast, a new transaction, Tx<sub>2</sub>, that\ndouble spends an output that Tx<sub>1</sub> spends (<a>Make Tx<sub>1</sub> invalid by spending an output that Tx<sub>1</sub> spends, and create a new time-locked transaction for your daughter.</a>). You then\ncreate a new transaction, time-locked for yet another year, for your\ndaugher.  When she’s stored the transaction safely, you broadcast Tx2.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 2. Make Tx<sub>1</sub> invalid by spending an output that Tx<sub>1</sub> spends, and create a new time-locked transaction for your daughter.</div>\n</div>\n<div>\n<div>\n<div>Transaction malleability</div>\n<div>\n<p>There’s a problem here. The txid of Tx<sub>2</sub> <em>can</em> change while being\nbroadcast, making Tx<sub>3</sub> forever invalid. This is called <em>transaction\nmalleability</em> and is fixed by using segregated witness as discussed in\n<a>[ch10]</a>.</p>\n</div>\n</div>\n</div>\n<div>\n<p>You need to</p>\n</div>\n<div>\n<ol>\n<li>\n<p>Create and sign a transaction, Tx<sub>2</sub>, that spends at least one of\nthe outputs spent by Tx<sub>1</sub>. Tx<sub>2</sub> is a normal, not time-locked,\ntransaction.  Don’t broadcast this transaction just yet.</p>\n</li>\n<li>\n<p>Create a new time-locked transaction, Tx<sub>3</sub>, that spends all your\noutputs as if Tx<sub>2</sub> was confirmed. Tx<sub>3</sub> is locked for another year.<br/>\nGive it to your daughter.</p>\n</li>\n<li>\n<p>Broadcast Tx<sub>2</sub>. Once Tx<sub>2</sub> is mined, Tx<sub>1</sub> will become forever\ninvalid because one of the inputs of Tx<sub>1</sub> is spent by Tx<sub>2</sub>.</p>\n</li>\n</ol>\n</div>\n<div>\n<p>Note how the order of events is important here. If Tx<sub>2</sub> is broadcast\n<em>before</em> you give Tx<sub>3</sub> to your daughter, there’s a chance you’ll die\nbefore giving her Tx<sub>3</sub>. Then, your daughter won’t be able to receive\nthe funds because she has no valid transaction to claim them with. Tx<sub>1</sub>\nis invalidated by Tx<sub>2</sub> in the blockchain, and Tx<sub>3</sub> isn’t in your\ndaughter’s possession.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Time measurements</h4>\n<div>\n<p>You can express a lock time in two ways. The first is by setting a date\nand time as in the previous example. The second is to set a block\nheight.</p>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Block time</h5>\n<div>\n<p>The first example expressed the lock time as a date and time. This means\nthe <em>median time past</em> must be greater than the lock time in the\ntransaction. In <a>[ch07]</a>, I noted that a block’s timestamp must be\ngreater than the past 11 blocks’ median timestamp, or the <em>median time\npast</em> of the block. We use the median time past to decide whether a\ntransaction is valid as regards the lock time. Suppose you died on 24\nJanuary 2019. Your mourning daughter wouldn’t be able to claim your\nmoney until 30 April 2019. <a>Your daughter can claim your money after the median time past is earlier than your lock time.</a> illustrates this more precisely.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 3. Your daughter can claim your money after the median time past is earlier than your lock time.</div>\n</div>\n<div>\n<p>Your daughter’s transaction can’t be mined in any block before the last\none shown. Before that block, the median time past is too early.</p>\n</div>\n<div>\n<p>Her transaction won’t even propagate through the Bitcoin network until\nthe lock time has passed. The nodes don’t want to keep time-locked\ntransactions in their memories because there are better uses for their\nprecious memory space than to fill them up with transactions that aren’t\neven valid (yet). It’s up to your daughter to broadcast the transaction\nafter the lock time has passed.</p>\n</div>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Block height</h5>\n<div>\n<p>You can also express time using block height. You can say that a\ntransaction isn’t valid, for example, until after block height 571019.\nThis means the transaction shown in <a>A time-locked transaction based on block height. This transaction is first valid at block height 571020.</a> can’t be mined until\nafter block 571019 has been mined.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 4. A time-locked transaction based on block height. This transaction is first valid at block height 571020.</div>\n</div>\n<div>\n<p>The earliest block in which the transaction can be included is at\nheight 571020. It’s hard to predict exactly when that block will be\nmined, but thanks to the difficulty adjustments that keep the average\nblock time at about 10 minutes, you can expect about 52,596 blocks per\nyear.</p>\n</div>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Relative time locks</h4>\n<div>\n<div>\n<div>BIP68</div>\n<div>\n<p>This Bitcoin Improvement Proposal (BIP) describes how an input can\nrequire a certain distance in time or blocks from the spent\ntransaction output.  It applies to transactions with a version of at\nleast 2.</p>\n</div>\n</div>\n</div>\n<div>\n<p>The earlier example showed a use case for absolute time locks on\ntransactions. But you can also lock an input of a transaction until its\nspent output is old enough. This is called a <em>relative time lock</em>. You\ndo this on a per-input basis (<a>Relative time locks can be expressed either as a number of blocks or as a number of time units. You use the inputs’ sequence numbers for this.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 5. Relative time locks can be expressed either as a number of blocks or as a number of time units. You use the inputs’ sequence numbers for this.</div>\n</div>\n<div>\n<p>The transaction’s first input has a sequence number of <code>004013c6</code>. This\nsays the transaction isn’t valid until 30 days have passed since the\nspent output was confirmed (<a>The first input locks the transaction for 30 days from the spent output.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 6. The first input locks the transaction for 30 days from the spent output.</div>\n</div>\n<div>\n<p>The leftmost bit of this sequence number is 0, which means the relative\nlock time is enabled. The bit at index 9 from the left is 1, which means\nthe rightmost 16 bits should be interpreted as “number of 512-second\nintervals.” The 16 rightmost bits are <code>13c6</code>, which translates to 5,062\nin decimal form; 5,062 intervals of 512 seconds is roughly 30 days.</p>\n</div>\n<div>\n<p>The second input has a sequence number of <code>000003e8</code> (<a>The second input locks the transaction for 1,000 blocks from the spent output.</a>). This\nmeans the transaction is invalid until 1,000 blocks have been mined\nsince the spent output was mined.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 7. The second input locks the transaction for 1,000 blocks from the spent output.</div>\n</div>\n<div>\n<p>The leftmost bit is 0 here, too, which means the relative lock time is\nenabled for this input. The bit at index 9 from the left is 0, which\nmeans the 16 rightmost bits should be interpreted as the number of\nblocks; <code>03e8</code> is hex code for 1,000.</p>\n</div>\n<div>\n<p>The transaction’s version needs to be at least 2 for relative time\nlocks to work. If the version is 1, the sequence numbers won’t have\nany effect on the relative lock time, but they will affect absolute\nlock time and the replace-by-fee feature, which I’ll discuss later in\n<a>Replacing pending transactions</a>.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Time-locked outputs</h3>\n<div>\n<p>Time locks aren’t particularly useful in themselves. The only thing you\ncan do with them is create a transaction that might eventually become\nvalid.</p>\n</div>\n<div>\n<p>It might be more useful to say something like, “The money in this output\ncan’t be spent before New Year’s Eve.” This is an example of a\n<em>time-locked output</em>. An output can be locked absolutely or\nrelatively, and locks can be time-based or height-based.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Absolute time-locked outputs</h4>\n<div>\n<div>\n<div>BIP65</div>\n<div>\n<p>This BIP describes in detail the script operator <code>OP_CHECKLOCK-</code>\n<code>TIMEVERIFY</code>, which implements the absolute time-locked output.</p>\n</div>\n</div>\n</div>\n<div>\n<p>Suppose you want to give your daughter 1 BTC in allowance on 1 May. You\ncan make a transaction as <a>Paying allowance in advance to your daughter. She may not spend it before 1 May.</a> shows.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 8. Paying allowance in advance to your daughter. She may not spend it before 1 May.</div>\n</div>\n<div>\n<div>\n<div>“OP_DROP?”</div>\n<div>\n<p>Using OP_CHECKLOCKTIME VERIFY requires a successive <code>OP_DROP</code> due to\nhow the operator was deployed in Bitcoin. You’ll learn about that in\n<a>[ch10]</a>. Ignore it for now.</p>\n</div>\n</div>\n</div>\n<div>\n<p>You can broadcast this transaction immediately to the Bitcoin network\nand have it mined. The first output is the interesting part. It says\nthat this output can’t be spent before 1 May. For the curious, the\nexact pubkey script is</p>\n</div>\n<div>\n<div>\n<pre>&lt;may 1 2019 00:00:00&gt; OP_CHECKLOCKTIMEVERIFY OP_DROP\nOP_DUP OP_HASH160 &lt;PKH<sub>D</sub>&gt; OP_EQUALVERIFY OP_CHECKSIG</pre>\n</div>\n</div>\n<div>\n<p>This script will make sure the transaction spending the output is\nsufficiently time-locked, as <a>Various spending transactions and their validity</a> shows.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 9. Various spending transactions and their validity</div>\n</div>\n<div>\n<p>The first two transactions will never be valid because their time locks\naren’t sufficiently late. The first one isn’t locked, which is illegal\naccording to the pubkey script. The second one is at least time-locked,\nbut it isn’t late enough—1 second before 1 May is too early.</p>\n</div>\n<div>\n<p>The third transaction is OK because the time lock is at least as high as\nthe time in the pubkey script, 2019-05-01 00:00:00. This transaction\nwill be valid on and after 1 May. The last transaction will be valid on\nNew Year’s Eve, right before the fireworks. Note, however, that you\ncan’t get both of the last two transactions confirmed—you can get at\nmost one of them confirmed—because they spend the same output.</p>\n</div>\n<div>\n<p>The result of this example is that your daughter will be able to spend\nthe output as she pleases after 1 May.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Relative time-locked outputs</h4>\n<div>\n<div>\n<div>BIP112</div>\n<div>\n<p>This BIP describes relative time-locked outputs. The script operator\nis called <code>OP_CHECKSEQUENCEVERIFY</code>.</p>\n</div>\n</div>\n</div>\n<div>\n<p>A relative time-locked output works similarly to an absolute\ntime-locked output, but relative locks require a certain amount of\ntime to <em>pass</em> between the block containing the spent output and the\nblock containing the spending transaction (<a>Spending a relative time-locked output is allowed after a certain number of blocks have passed.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 10. Spending a relative time-locked output is allowed after a certain number of blocks have passed.</div>\n</div>\n<div>\n<p>Relative time locks are most commonly used in <em>digital contracts</em>. A\ndigital contract can be regarded as a traditional contract between\nparties, but it’s enforced by the rules of the Bitcoin network rather\nthan national laws. Contracts are expressed as Bitcoin pubkey scripts.\nWe’ll illustrate the use of relative time-locked outputs with an atomic\nswap in the next subsection. An atomic swap means two people swap coins\nwith each other across different cryptocurrencies.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Atomic swaps</h4>\n<div>\n<div>\n<div>Atomic</div>\n<div>\n<p>In computer science, the word <em>atomic</em> means a process either\ncompletes in its entirety or not at all. For atomic swaps, it means\neither the swap completes or both parties get to keep their old\ncoins. No other outcomes are possible.</p>\n</div>\n</div>\n</div>\n<div>\n<p>A commonly mentioned digital contract is the <em>atomic swap</em>, where\ntwo parties want to swap coins with each other between different\nblockchains.</p>\n</div>\n<div>\n<p>Suppose John is chatting with Fadime on a public forum on the\ninternet.  They don’t know each other and have no reason to trust one\nanother. But they both want to trade.</p>\n</div>\n<div>\n<p>They agree that John will trade 2 BTC for 100 of Fadime’s namecoins\n(NMC). Namecoin is an alt-coin used as a decentralized naming system,\nlike DNS. We talked briefly about alt-coins in <a>[ch01]</a>. It isn’t\nimportant what Namecoin actually is used for in this example; we only\nconclude that it’s another cryptocurrency on a blockchain other than\nBitcoin’s.</p>\n</div>\n<div>\n<p>The conversation between John and Fadime starts as follows:</p>\n</div>\n<div>\n<p><strong>John:</strong> Do you want to swap 100 NMC for my 2 BTC? My Namecoin public\nkey is <code>02381efd…88ca7f23</code>. I’ve created a secret random number that has\nthe SHA256 hash value H. I will not tell you the secret number yet.</p>\n</div>\n<div>\n<p><strong>Fadime:</strong> Sure John, let’s do it! My Bitcoin public key is\n<code>02b0c907…df854ee8</code>.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>We’ll call the secret number S. Only John knows S for now, but he shares\nthe hash of S—which is H—with Fadime. Now, they both have enough\ninformation to get started.</p>\n</div>\n<div>\n<p>They create one transaction each (<a>John and Fadime create a contract transaction each. The redeem script of the p2sh output contains the contract details.</a>). John creates a Bitcoin\ntransaction that spends 2 BTC. Fadime creates a Namecoin transaction\nthat spends 100 NMC. They don’t broadcast their transactions yet.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 11. John and Fadime create a contract transaction each. The redeem script of the p2sh output contains the contract details.</div>\n</div>\n<div>\n<p>The output of John’s contract transaction can be spent in one of two\nways:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>By providing the pre-image of H and Fadime’s signature. John knows this\npre-image—his secret number S from the conversation described\nearlier—but Fadime doesn’t.</p>\n</li>\n<li>\n<p>With John’s signature after 48 hours.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>Likewise, the output of Fadime’s contract transaction can be spent in\none of two ways:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>By providing the pre-image of H and John’s signature</p>\n</li>\n<li>\n<p>With Fadime’s signature after 24 hours</p>\n</li>\n</ul>\n</div>\n<div>\n<p>The relative lock time is enforced by the script operator\n<code>OP_CHECKSEQUENCEVERIFY</code>. This operator ensures that the output of\nJohn’s contract transaction can’t be spent by John until 48 hours have\npassed since the contract transaction was confirmed. In Fadime’s\ncontract transaction, the operator ensures that Fadime doesn’t spend\nthe output until after 24 hours.</p>\n</div>\n<div>\n<p>Fadime knows John has the secret number. If Fadime broadcasts her\ncontract transaction now, John can take the money and not fulfill his\npart of the deal. For this reason, she won’t broadcast her transaction\nuntil she’s seen John’s transaction safely confirmed in the\nblockchain.  Because Fadime doesn’t know the secret, S, John can\nsafely broadcast his contract transaction without Fadime running away\nwith the money.</p>\n</div>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>John broadcasts his contract transaction. Remember that the output of\nthe contract transaction in this example is a pay-to-script-hash\n(p2sh) output. The output contains a p2sh address that doesn’t say\nanything about this being John’s contract output. For Fadime to\nidentify John’s contract transaction on the Bitcoin blockchain, she’ll\nconstruct the same redeem script as John created for his contract\ntransaction and generate the p2sh address that John’s contract\ntransaction paid to. She can then look for that p2sh address in the\nBitcoin blockchain.</p>\n</div>\n<div>\n<p>When Fadime finds that John’s transaction is confirmed, she broadcasts\nher own contract transaction. John waits until Fadime’s transaction is\nsufficiently confirmed on the Namecoin blockchain. Then, the actual\nswap happens in two steps. <a>The first step of the actual swap. John claims Fadime’s 100 NMC by revealing the secret S.</a> shows the first step.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 12. The first step of the actual swap. John claims Fadime’s 100 NMC by revealing the secret S.</div>\n</div>\n<div>\n<p>John broadcasts his swap transaction. John’s swap transaction spends\nFadime’s contract transaction output by providing S and his signature.\nAgain, note that John is spending a p2sh output. This means the first\nthing that happens during script validation is that the redeem script\nJohn provided in the signature script will be hashed and compared to the\nhash in the pubkey script. The actual redeem script will then be run.</p>\n</div>\n<div>\n<p>We won’t go through the program in detail. But when the redeem script\nstarts running, the stack will have <code>1</code> on top. This means <code>true</code> in\nNamecoin, just as in Bitcoin. This value will cause the program to run\nthe part of the script that requires a pre-image and John’s signature.\nThe other part isn’t run at all.</p>\n</div>\n<div>\n<p>The script will leave the stack with a <code>true</code> on top because John\nprovides both required items in the correct order—his signature and the\npre-image, <code>S</code>. He successfully claims his 100 NMC.</p>\n</div>\n<div>\n<p>As soon as Fadime sees John’s swap transaction on the Namecoin network,\nshe can create her own swap transaction for the Bitcoin blockchain\n(<a>Fadime completes the atomic swap by sending her swap transaction to the Bitcoin network.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 13. Fadime completes the atomic swap by sending her swap transaction to the Bitcoin network.</div>\n</div>\n<div>\n<p>She takes the pre-image, S, from John’s swap transaction and puts it\ninto her own swap transaction, which pays 2 BTC to Fadime’s public key\nhash, PKH<sub>F</sub>. When the two swap transactions are confirmed, the atomic\nswap is complete. The effect of all this is that John has sent 2 BTC to\nFadime under the condition that Fadime sends 100 NMC to him, and Fadime\nsends 100 NMC to John under the condition that John sends<br/>\n2 BTC to her.</p>\n</div>\n<div>\n<h5><a><svg><path></path></svg></a>Atomic swap failure</h5>\n<div>\n<p>The sequence of events in this atomic swap example illustrates a case in\nwhich both parties, John and Fadime, play by the rules. No one had to\nactually use the time-locked branches of the contract transaction\noutputs. This subsection will go through some ways the swap might fail:</p>\n</div>\n<div>\n<dl>\n<dt>Fadime doesn’t broadcast her contract transaction.</dt>\n<dd>\n<p>This means John\ncan’t spend the output of Fadime’s contract transaction, which means\nFadime will never get to see S. Without S, she can’t spend John’s\ncontract output. The only possible outcome is that John must wait 48\nhours for the relative time lock to pass and then reclaim his money.</p>\n</dd>\n<dt>John doesn’t spend Fadime’s contract output in 24 hours.</dt>\n<dd>\n<p>Fadime can\nreclaim her coins, and John must wait another 24 hours before claiming\nhis coins back.</p>\n</dd>\n<dt>John spends Fadime’s contract output just after 24 hours has passed but before Fadime claims back her coins.</dt>\n<dd>\n<p>Fortunately, John’s\ncontract output has a 48-hour relative lock time as opposed to the 24\nhours in Fadime’s contract output, so John can’t claim his coins back\nuntil he’s waited another 24 hours. During this time, Fadime can claim\nher BTC from John’s contract output using S and her signature.</p>\n</dd>\n<dt>Fadime gets hit by a bus just after broadcasting her contract output.</dt>\n<dd>\n<p>This is no good. John will be able to take his NMC from Fadime’s\ncontract output and then wait 48 hours to also claim back his BTC.\nFadime loses out on this one.</p>\n</dd>\n</dl>\n</div>\n<div>\n<p>In the final case, we could argue that the swap wasn’t atomic. After\nall, it didn’t go through, and John ended up with all the coins. This\nis a somewhat philosophical question. But we can think of swaps as\nbeing atomic under the condition that Fadime can take action. We don’t\nhave this condition for John, though. It’s a matter of who creates the\nsecret, S.</p>\n</div>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Storing stuff in the Bitcoin blockchain</h3>\n<div>\n<p>In the early days of Bitcoin, it became clear that people wanted to\nput stuff in transactions in the Bitcoin blockchain that didn’t have\nanything to do with Bitcoin itself: for example, <a>A tribute in a transaction</a>, which is\na blockchain tribute to cryptographer Sassama, allegedly posted by Dan\nKaminsky. (The message is wrapped into three columns here to save\nspace.)</p>\n</div>\n<div>\n<div>A tribute in a transaction</div>\n<div>\n<pre>---BEGIN TRIBUTE---     LEN "rabbi" SASSAMA     P.S.  My apologies,\n#./BitLen                    1980-2011          BitCoin people.  He\n:::::::::::::::::::     Len was our friend.     also would have\n:::::::.::.::.:.:::     A brilliant mind,       LOL\'d at BitCoin\'s\n:.: :.\' \' \' \' \' : :     a kind soul, and        new dependency upon\n:.:\'\' ,,xiW,"4x, \'\'     a devious schemer;         ASCII BERNANKE\n:  ,dWWWXXXXi,4WX,      husband to Meredith     :\'::.:::::.:::.::.:\n\' dWWWXXX7"     `X,     brother to Calvin,      : :.: \' \' \' \' : :\':\n lWWWXX7   __   _ X     son to Jim and          :.:     _.__    \'.:\n:WWWXX7 ,xXX7\' "^^X     Dana Hartshorn,         :   _,^"   "^x,   :\nlWWWX7, _.+,, _.+.,     coauthor and            \'  x7\'        `4,\n:WWW7,. `^"-" ,^-\'      cofounder and            XX7            4XX\n WW",X:        X,       Shmoo and so much        XX              XX\n "7^^Xl.    _(_x7\'      more.  We dedicate       Xl ,xxx,   ,xxx,XX\n l ( :X:       __ _     this silly hack to      ( \' _,+o, | ,o+,"\n `. " XX  ,xxWWWWX7     Len, who would have      4   "-^\' X "^-\'" 7\n  )X- "" 4X" .___.      found it absolutely      l,     ( ))     ,X\n,W X     :Xi  _,,_      hilarious.               :Xx,_ ,xXXXxx,_,XX\nWW X      4XiyXWWXd     --Dan Kaminsky,           4XXiX\'-___-`XXXX\'\n"" ,,      4XWWWWXX     Travis Goodspeed           4XXi,_   _iXX7\'\n, R7X,       "^447^                               , `4XXXXXXXXX^ _,\nR, "4RXk,      _, ,                               Xx,  ""^^^XX7,xX\nTWk  "4RXXi,   X\',x                             W,"4WWx,_ _,XxWWX7\'\nlTWk,  "4RRR7\' 4 XH                             Xwi, "4WW7""4WW7\',W\n:lWWWk,  ^"     `4                              TXXWw, ^7 Xk 47 ,WH\n::TTXWWi,_  Xll :..                             :TXXXWw,_ "), ,wWT:\n=-=-=-=-=-=-=-=-=-=                             ::TTXXWWW lXl WWT:\n                                                ----END TRIBUTE----</pre>\n</div>\n</div>\n<div>\n<p>Although this was certainly interesting and funny, it had some\nimplications for Bitcoin’s full nodes.</p>\n</div>\n<div>\n<p>The message in <a>A tribute in a transaction</a> was written into the blockchain using a\nsingle transaction with txid</p>\n</div>\n<div>\n<div>\n<pre>930a2114cdaa86e1fac46d15c74e81c09eee1d4150ff9d48e76cb0697d8e1d72</pre>\n</div>\n</div>\n<div>\n<div>\n<div>Blockchain explorer</div>\n<div>\n<p>You can take a closer look at this transaction using a blockchain\nexplorer, such as the one at <a>[web-bernanke-ascii-art]</a>.</p>\n</div>\n</div>\n</div>\n<div>\n<p>The author created a transaction with 78 outputs, one for each\n20-character line in the message. Each line ends with a space, so only\n19 characters are visible.</p>\n</div>\n<div>\n<p>For example, the last output’s pubkey script looks like this:</p>\n</div>\n<div>\n<div>\n<pre>OP_DUP OP_HASH160 2d2d2d2d454e4420545249425554452d2d2d2d20 OP_EQUALVERIFY OP_CHECKSIG</pre>\n</div>\n</div>\n<div>\n<p>The interesting part is the PKH. This isn’t an actual PKH, but a made-up\none. Maybe you can see a pattern when you compare it to the line\n“<code>----END TRIBUTE---- </code>”:</p>\n</div>\n<div>\n<div>\n<pre>2d 2d 2d 2d 45 4e 44 20 54 52 49 42 55 54 45 2d 2d 2d 2d 20\n-  -  -  -  E  N  D     T  R  I  B  U  T  E  -  -  -  -</pre>\n</div>\n</div>\n<div>\n<p>This “public key hash” encodes one 20-character line in the\nmessage. It uses the <em>ASCII table</em> to encode characters. For example,\nthe character <code>-</code> is encoded as the byte <code>2d</code>. The characters A–Z are\nencoded by the bytes <code>41</code>–<code>5a</code>, and a space is encoded as byte <code>20</code>.</p>\n</div>\n<div>\n<p>Let’s look at the PKHs of the message’s last 10 lines along with the\nASCII-decoded text:</p>\n</div>\n<div>\n<div>\n<pre>20203458586958272d5f5f5f2d60585858582720   4XXiX\'-___-`XXXX\'\n202020345858692c5f2020205f69585837272020    4XXi,_   _iXX7\'\n20202c2060345858585858585858585e205f2c20   , `4XXXXXXXXX^ _,\n202058782c202022225e5e5e5858372c78582020   Xx,  ""^^^XX7,xX\n572c22345757782c5f205f2c5878575758372720 W,"4WWx,_ _,XxWWX7\'\n5877692c202234575737222234575737272c5720 Xwi, "4WW7""4WW7\',W\n54585857772c205e3720586b203437202c574820 TXXWw, ^7 Xk 47 ,WH\n3a5458585857772c5f2022292c202c7757543a20 :TXXXWw,_ "), ,wWT:\n3a3a54545858575757206c586c205757543a2020 ::TTXXWWW lXl WWT:\n2d2d2d2d454e4420545249425554452d2d2d2d20 ----END TRIBUTE----</pre>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Bloated UTXO set</h4>\n<div>\n<div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</div>\n</div>\n<div>\n<p>Because these PKHs are made up, they have no known pre-images. This also\nmeans no known public/private key pairs are associated with them, so no\none can ever spend the outputs. They’re <em>unspendable</em>. The last PKH’s\nBitcoin address is <code>157sXYpj…QnHB6FGU</code>. Anyone who pays money to this\naddress is throwing that money in the trash. The money is lost forever.\nIt’s the equivalent of burning a dollar bill.</p>\n</div>\n<div>\n<p>Unspendable outputs like these are indistinguishable from ordinary,\nspendable outputs. You can’t prove that they’re unspendable. Full nodes\nhave to treat them as spendable, meaning they have to keep these\nunspendable outputs in their unspent transaction output (UTXO) set\nforever. This places an unnecessary burden on nodes, which need to keep\nall these outputs in memory.</p>\n</div>\n<div>\n<p>Bitcoin’s developers came up with a partial solution to this problem.\nInstead of sending money to unprovably unspendable outputs, users can\ncreate <em>provably unspendable</em> outputs. If a full node can determine if\nan output is unspendable,<br/>\nit doesn’t have to insert that output into its UTXO set.</p>\n</div>\n<div>\n<p>The partial solution involves a new script operator called <code>OP_RETURN</code>.\nThis operator immediately fails when executed. A typical <code>OP_RETURN</code>\npubkey script can look like this:</p>\n</div>\n<div>\n<div>\n<pre>OP_RETURN "I\'m Grokking Bitcoin"</pre>\n</div>\n</div>\n<div>\n<p>If someone tried to spend this output, the script would fail once it\nencountered the <code>OP_RETURN</code>. If the pubkey script contains this\noperator, a full node can determine that the output isn’t spendable and\nignore it, saving the UTXO set from being forever bloated with this\nnonsense. A typical <code>OP_RETURN</code> output pays 0 BTC, but it can also set a\nvalue greater than 0 to “burn” money.</p>\n</div>\n<div>\n<p>There are a few policies regarding <code>OP_RETURN</code>:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>The full pubkey script must not be bigger than 83 bytes.</p>\n</li>\n<li>\n<p>There can be only one <code>OP_RETURN</code> output per transaction.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>These two policies are just that—policies. Full nodes adhering to\nthese policies won’t relay transactions that violate them. But if they\nencounter a block that contains transactions that violate the\npolicies, the block will be accepted and relayed. I’ll talk more about\npolicies and <em>consensus rules</em>, strict rules that apply to blocks,\nin <a>[ch10]</a> and <a>[ch11]</a>.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Creating a token in Bitcoin</h4>\n<div>\n<p>I talked briefly about tracking ownership on the blockchain in\n<a>[ch01]</a>. Suppose a car manufacturer, let’s call it Ampere, decides\nthat it wants to digitally track the ownership of its cars on the\nBitcoin blockchain. This can be accomplished by creating a token in\nBitcoin.</p>\n</div>\n<div>\n<p>Suppose Ampere wants to create a token for a newly manufactured car with\nchassis number 123456. It broadcasts a Bitcoin transaction as shown in\n<a>Ampere creates a new token for a newly built car. It issues the token to itself because it still owns this car.</a>.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 14. Ampere creates a new token for a newly built car. It issues the token to itself because it still owns this car.</div>\n</div>\n<div>\n<p>This “Ampere token protocol” specifies that a new token is created when</p>\n</div>\n<div>\n<ul>\n<li>\n<p>Ampere spends a coin from PKH<sub>A</sub>.</p>\n</li>\n<li>\n<p>The transaction contains an <code>OP_RETURN</code> output with the text\n<code>"ampere &lt;chassis number&gt;"</code>.</p>\n</li>\n<li>\n<p>The first output is the initial token owner.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>Ampere has a well-known web page at <a>https://www.ampere.example.com</a>,\nwhere it has published its public key corresponding to PKH<sub>A</sub>. It also\npumps out its public key through advertisements and via Facebook and\nTwitter. It does all this so people can verify that PKH<sub>A</sub> actually\nbelongs to Ampere.</p>\n</div>\n<div>\n<p>Suppose Ampere sells this car to a car dealer. The dealer has a public\nkey hash, PKH<sub>D</sub>. <a>Ampere sells the car to a car dealer with public key hash PKH<sub>D</sub>.</a> shows how Ampere will transfer digital\nownership to the dealer.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 15. Ampere sells the car to a car dealer with public key hash PKH<sub>D</sub>.</div>\n</div>\n<div>\n<p>According to our simple protocol, car ownership is transferred by\nspending the old owner’s output. The following rules apply:</p>\n</div>\n<div>\n<ul>\n<li>\n<p>The spending transaction spends the old owner’s output.</p>\n</li>\n<li>\n<p>The first output of the spending transaction is the new owner of\nthe car.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>The car dealer is now the new owner because PKH<sub>D</sub> is the first output\nof the spending transaction. That’s it. When the dealer sells this car\nto a consumer, Fadime, it transfers the car’s ownership to Fadime’s\naddress, PKH<sub>F</sub> (<a>The car dealer transfers the car’s ownership to Fadime’s PKH<sub>F</sub>.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 16. The car dealer transfers the car’s ownership to Fadime’s PKH<sub>F</sub>.</div>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Starting the car with proof of ownership</h4>\n<div>\n<p>Now that Fadime is the rightful owner of this car, wouldn’t it be cool\nif she could start it by proving she’s the owner? She can. The car is\nequipped with an ignition lock that starts the engine when Fadime sends\na proof of ownership to the car (<a>Fadime starts her car by signing a challenge with her private key.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 17. Fadime starts her car by signing a challenge with her private key.</div>\n</div>\n<div>\n<p>Fadime first asks the car to start. The car won’t start if it doesn’t\nknow that Fadime has the private key belonging to PKH<sub>F</sub>. The car\ngenerates a big random number and sends it to Fadime, who signs this\nrandom number with the private key and sends the signature and her\npublic key to the car.</p>\n</div>\n<div>\n<p>The car needs the public key to verify that it corresponds to PKH<sub>F</sub> as\nwritten in the blockchain. The car keeps track of who currently owns it\nby running a lightweight wallet that understands the Ampere token\nprotocol.</p>\n</div>\n<div>\n<p>When the car has verified that the signature is valid and from the\ncorrect private key, it will start the engine.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Replacing pending transactions</h3>\n<div>\n<p>When you send a Bitcoin transaction to buy a book online, the bookstore\nwill wait for the transaction to confirm before it sends the book to\nyou. Usually, your transaction will be confirmed within an hour or so,\nbut what if it isn’t? What if no miner ever wants to include your\ntransaction? This can certainly happen if your transaction fee isn’t\nsufficient (<a>You pay for your book and set the transaction fee to 0.00001 BTC.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 18. You pay for your book and set the transaction fee to 0.00001 BTC.</div>\n</div>\n<div>\n<p>You might recall from <a>[transaction-fees]</a> that the\ntransaction fee is the sum of the input values minus the sum of the\noutput values. The fee per byte that miners care about is calculated by\ndividing that fee by the transaction’s size—in this case, 1,000 satoshis\ndivided by 226 bytes, which is about 4.4 sat/byte.</p>\n</div>\n<div>\n<p>If no miner is willing to include the transaction for that fee, your\ntransaction will be stuck waiting for confirmation. If the transaction\nisn’t confirmed, you won’t get your book. You probably want to do\nsomething about this situation. Maybe you can create a new, similar\ntransaction, but with a higher fee. Let’s try (<a>You try to replace your old, stuck transaction with a new one with a higher fee.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 19. You try to replace your old, stuck transaction with a new one with a higher fee.</div>\n</div>\n<div>\n<p>That’s nice: you’ve created and signed a new transaction with a fee 20\ntimes higher. This will surely get mined, you think, and broadcast the\ntransaction.</p>\n</div>\n<div>\n<p>The problem is that your new transaction will probably be regarded as a\ndouble-spend attempt and be dropped by most nodes. They’ll think the\nfirst transaction is the one that counts, and they’ll disregard any\nfurther transactions that spend the same output. How to handle the\nsecond transaction is completely up to the nodes, but the most common\npolicy is to drop it. This is what Bitcoin Core does, and that’s the\nmost widely used Bitcoin software. This policy is known as the\n<em>first-seen policy</em>.</p>\n</div>\n<div>\n<div>\n<div>Hint for exercises</div>\n<div>\n<p>Keep this in mind for <a>Exercise 11</a>.</p>\n</div>\n</div>\n</div>\n<div>\n<p>You might be able to circumvent this policy by sending the second\ntransaction directly to one or more miners. Miners have different\nincentives than full nodes. Mining full nodes want to earn\nrewards—subsidy + fees—by providing proof of work to the blockchain,\nwhereas non-mining full nodes want to keep their memory and computing\nresource consumption down. If a miner could get hold of the second,\nhigh-fee transaction, it would probably decide to include it despite\nthe fact that the low-fee transaction was the first seen. Replacing\ntransactions in this way is impractical because you don’t know any\nminers’ IP addresses unless they’re published somehow. You also reveal\nyour IP address to the miners, and the miners then become targets for\nvarious surveillance organizations or companies wanting to monetize\ninformation about you.</p>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Opt-in replace-by-fee</h4>\n<div>\n<div>\n<div>BIP125</div>\n<div>\n<p>This BIP describes how transactions can declare themselves\nreplaceable.</p>\n</div>\n</div>\n</div>\n<div>\n<p>In 2016, a policy was deployed for transaction replacement. It’s\ngenerally called <em>opt-in replace-by-fee</em>, or opt-in RBF\n(<a>Use opt-in RBF to easily replace a transaction before it’s confirmed.</a>). It works by using the sequence numbers of a\ntransaction’s inputs.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 20. Use opt-in RBF to easily replace a transaction before it’s confirmed.</div>\n</div>\n<div>\n<p>Suppose again that you want to pay for a book in an online bookstore.\nWhen you create the transaction, you make sure one of the inputs\n(there’s only one in this example) has a sequence number less than\n<code>fffffffe</code>. This signals to nodes that you want this transaction to be\nreplaceable.</p>\n</div>\n<div>\n<p>When a node receives this transaction, it will be treated as a normal\ntransaction, but the replaceability will be remembered.</p>\n</div>\n<div>\n<p>When you later notice that your transaction doesn’t confirm because of a\ntoo-low fee, you can create a new, replacement transaction with a higher\nfee. When you broadcast the replacement transaction, the nodes receiving\nit will—if they implement the opt-in RBF policy—kindly replace the old\ntransaction with the new one and relay the new one to their peers. The\nold transaction will be dropped. This way, the replacement transaction\nwill eventually reach all nodes, including miners, and will hopefully be\nconfirmed within a reasonable time.</p>\n</div>\n<div>\n<p>In this example, you set the sequence number of the replacement\ntransaction’s input to <code>ffffffff</code>. This means the replacement\ntransaction is not itself replaceable. If you want the replacement\ntransaction to also be replaceable, you must set its sequence number to\n<code>fffffffd</code> or less, just as you did with the replaced transaction.</p>\n</div>\n<div>\n<p>You might be wondering where these sequence numbers come from. The\nintention with sequence numbers from the beginning was to allow for\nanother kind of transaction replacement. The feature was disabled early\nin Bitcoin, but the sequence numbers remained in the transaction inputs.\nThese sequence numbers have since been repurposed for absolute lock\ntime, relative lock time, and replace-by-fee, as described throughout\nthis chapter. If you feel confused, don’t worry; I’ll summarize the\ndifferent uses of sequence numbers in <a>Recap</a>.</p>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Child pays for parent</h4>\n<div>\n<p>There is yet another way to bump up a fee. Suppose you have the\nsituation depicted earlier in <a>You pay for your book and set the transaction fee to 0.00001 BTC.</a>, and you notice that this\ntransaction gets stuck (<a>You haven’t paid a sufficient transaction fee. The transaction is stuck pending because miners don’t want to include it in a block.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 21. You haven’t paid a sufficient transaction fee. The transaction is stuck pending because miners don’t want to include it in a block.</div>\n</div>\n<div>\n<p>You can make another transaction that spends your change and pays an\nextra-high fee to compensate for the low fee in the original\ntransaction (<a>Spending your change and paying an extra fee for the “parent” transaction</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 22. Spending your change and paying an extra fee for the “parent” transaction</div>\n</div>\n<div>\n<p>Suppose a miner sees these two transactions. If the miner wants to\ncollect the fee from the child transaction, it has to include both the\nparent and the child transactions. If it tries to include only the\nchild transaction, the block won’t be valid because the child\ntransaction spends money that doesn’t exist in the blockchain.</p>\n</div>\n<div>\n<p>Both you and the bookstore can perform this trick. If you don’t bump\nthe fee, the bookstore can spend its output of 10 BTC and pay itself\n9.9998 BTC to add 0.0002 BTC to the combined fee.</p>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Different signature types</h3>\n<div>\n<p>When you sign a typical Bitcoin transaction, you sign the entire\ntransaction, excluding the signature script (<a>Normally, the entire transaction is signed. All inputs and all outputs are covered.</a>).</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 23. Normally, the entire transaction is signed. All inputs and all outputs are covered.</div>\n</div>\n<div>\n<p>This transaction contains two inputs, and each input signs the complete\ntransaction. A signature <em>commits to</em> all inputs and all outputs. If any\nof the inputs or outputs change, the signature will become invalid.</p>\n</div>\n<div>\n<p>You can change this signature behavior using a parameter in the\nsignature called the <code>SIGHASH</code> type. You can commit to outputs in three\nways (<code>ALL</code>, <code>SINGLE</code>, and <code>NONE</code>) and to inputs in two ways\n(<code>ANYONECANPAY</code> set or not set). Any combination of an input <code>SIGHASH</code>\ntype and an output <code>SIGHASH</code> type can be used, which makes six different\ncombinations, as <a>A signature can commit to different parts of the transaction depending on the <code>SIGHASH</code> types. The signature doesn’t include the grayed-out parts.</a> shows.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n<div>Figure 24. A signature can commit to different parts of the transaction depending on the <code>SIGHASH</code> types. The signature doesn’t include the grayed-out parts.</div>\n</div>\n<div>\n<p>For the outputs, you can commit to the following:</p>\n</div>\n<div>\n<ul>\n<li>\n<p><em>All outputs (<code>ALL</code>)</em>—No one gets to change any outputs.</p>\n</li>\n<li>\n<p><em>A single output at the same index as the input (<code>SINGLE</code>)</em>—You\nonly care about the specific output. The other outputs can change.</p>\n</li>\n<li>\n<p><em>No outputs (<code>NONE</code>)</em>—You don’t care where the money goes. Anyone\ncan add any outputs without invalidating your signature.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>For the inputs, you can commit as follows:</p>\n</div>\n<div>\n<ul>\n<li>\n<p><em>All inputs (<code>ANYONECANPAY</code> is not set)</em>—No one can change any\ninput without invalidating your signature.</p>\n</li>\n<li>\n<p><em>Only the current input (<code>ANYONECANPAY</code> is set)</em>—Other inputs\nmight be changed, removed, or added. You don’t care who pays. Anyone can\npay.</p>\n</li>\n</ul>\n</div>\n<div>\n<p>For the vast majority of signatures, <code>ALL</code> combined with an unset\n<code>ANYONECANPAY</code> is used to commit to the whole transaction. This is what\nyou’re used to from the earlier chapters in this book. Other types are\nrare and are used primarily for specialized digital contracts.</p>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Recap</h3>\n<div>\n<p>This chapter has been a potpourri of things you can do with\ntransactions.</p>\n</div>\n<div>\n<p>Transactions and transaction outputs can be time-locked in different\nways to prevent funds from being spent until a certain date or time span\nhas occurred, as the following table shows.</p>\n</div>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>Set the lock time of a transaction.</p></td>\n<td><p>The transaction won’t be valid until a certain time or block height.</p></td>\n</tr>\n<tr>\n<td><p>Set the relative time lock on an input using the sequence number.</p></td>\n<td><p>The transaction won’t be valid until a certain amount of time or\nnumber of blocks have passed.</p></td>\n</tr>\n<tr>\n<td><p>Use <code>OP_CHECKLOCKTIMEVERIFY</code> in a pubkey script.</p></td>\n<td><p>The output can’t be spent until a certain time or block height.</p></td>\n</tr>\n<tr>\n<td><p>Use <code>OP_CHECKSEQUENCEVERIFY</code> in a pubkey script.</p></td>\n<td><p>The output can’t be spent until a certain amount of time or number\nof blocks have passed.</p></td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>All these variants can be expressed in either block height or time. Time\nlocks are useful mostly in digital contracts, such as atomic swaps. An\natomic swap lets people who don’t trust each other swap coins without\nusing a trusted third party.</p>\n</div>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n<div>\n<p>The general idea is that John must reveal the secret, S, to claim his\ncoins. Fadime can then use S to claim her coins.</p>\n</div>\n<div>\n<p>Arbitrary data can be stored in <code>OP_RETURN</code> outputs without placing a\nburden on nodes’ UTXO sets. You can use this to create tokens. For\nexample, the ownership of a car can be tracked and verified on the\nBitcoin blockchain.</p>\n</div>\n<div>\n<p>A transaction can sometimes get stuck in a pending state because no\nminers want to include it in their blocks. This usually happens\nbecause you’ve paid a too-small fee. To prepare for this situation,\nyou can mark the transaction as replaceable by setting the sequence\nnumber of at least one input to a value lower than <code>fffffffe</code>. If that\ntransaction gets stuck, you can bump the the fee by broadcasting a\nreplacement transaction that pays a higher fee.</p>\n</div>\n<div>\n<p>Inputs’ sequence numbers are used for various purposes. We’ve\ndiscussed many different uses for sequence numbers in this chapter,\nand it’s hard to keep track of them. <a>Sequence numbers are used to enable or disable various features. <span>✔</span>=enabled, <span>✘</span>=disabled. *Tx version 2 required.</a> summarizes the meaning\nof different sequence number values.</p>\n</div>\n\nTable 1. Sequence numbers are used to enable or disable various features. <span><g-emoji>✔</g-emoji></span>=enabled, <span>✘</span>=disabled. *Tx version 2 required.\n\n\n\n\n\n\n<table><thead>\n<tr>\n<th>Sequence value</th>\n<th>Lock time, any input</th>\n<th>Replace-by-fee (BIP125), any input</th>\n<th>Relative lock time on input (BIP68)*</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p><code>00000000</code>-<code>7fffffff</code></p></td>\n<td><p><span>✔</span></p></td>\n<td><p><span>✔</span></p></td>\n<td><p><span>✔</span></p></td>\n</tr>\n<tr>\n<td><p><code>80000000</code>-<code>fffffffd</code></p></td>\n<td><p><span><g-emoji>✔</g-emoji></span></p></td>\n<td><p><span><g-emoji>✔</g-emoji></span></p></td>\n<td><p><span>✘</span></p></td>\n</tr>\n<tr>\n<td><p><code>fffffffe</code></p></td>\n<td><p><span><g-emoji>✔</g-emoji></span></p></td>\n<td><p><span>✘</span></p></td>\n<td><p><span>✘</span></p></td>\n</tr>\n<tr>\n<td><p><code>ffffffff</code></p></td>\n<td><p><span>✘</span></p></td>\n<td><p><span>✘</span></p></td>\n<td><p><span>✘</span></p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Exercises</h3>\n<div>\n<h4><a><svg><path></path></svg></a>Warm up</h4>\n<div>\n<ol>\n<li>\n<p>What’s required from a transaction’s inputs to enable absolute\nlock time?</p>\n</li>\n<li>\n<p>Suppose a transaction is time-locked (absolute) to 25 December\n2019 00:00:00. How does a miner check whether the transaction is OK to\nput in a block?</p>\n</li>\n<li>\n<p>Where is the relative lock time of an input located?</p>\n</li>\n<li>\n<p>Suppose Adam and Eve want to swap coins with each other using an\natomic swap. How many transactions would be created on each blockchain\nupon completion?</p>\n</li>\n<li>\n<p>Why is it bad for the UTXO set to store arbitrary data such as\n“HELLO WORLD” as fake PKHs in outputs as opposed to storing them in\n<code>OP_RETURN</code> outputs?</p>\n</li>\n<li>\n<p>Why would you want to replace a broadcast transaction that isn’t\nconfirmed yet?</p>\n</li>\n</ol>\n</div>\n</div>\n<div>\n<h4><a><svg><path></path></svg></a>Dig in</h4>\n<div>\n<ol>\n<li>\n<p>Explain the differences between absolute lock time and relative\nlock time.</p>\n</li>\n<li>\n<p>(This exercise is hard; feel free to skip it.) Suppose you want to\nbet 1 BTC that it’s going to snow in London on Christmas Eve, and Ruth\nbets 1 BTC that it’s not. You appoint a person, Beth, whom you both\ntrust to solve any conflicts that might occur. You and Ruth\ncollaborate to create and broadcast a transaction that spends 1 BTC\neach to an output of 2 BTC with the following redeem script. (The\nredeem script <em>can</em> be made smaller, but to make it simpler to read, I\nused a slightly bigger version.) Explain how the redeem script works\non a conceptual level.</p>\n<div>\n<div>\n<a><img/></a>\n</div>\n</div>\n</li>\n<li>\n<p>If a p2sh output pays to the hash of a redeem script that consists\nsolely of an <code>OP_RETURN</code> with 32 random bytes, would full nodes be\nable to know that the output is unspendable?</p>\n<div>\n<div>\n<pre>OP_RETURN 53a1e411…b4e6d949</pre>\n</div>\n</div>\n</li>\n<li>\n<p>Explain how the first-seen policy works. Also, are nodes obliged to\nfollow the policy?</p>\n</li>\n</ol>\n</div>\n<div>\n<ol>\n<li>\n<p>Opt-in RBF offers a method for transaction replacement. Is\nthere any fundamental security difference between a transaction with\nopt-in RBF enabled and a transaction that doesn’t opt in? Explain your\nreasoning.</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div>\n<h3><a><svg><path></path></svg></a>Summary</h3>\n<div>\n<ul>\n<li>\n<p>Transactions can be locked with respect to time or block height\ndepending on your application needs. The locks can be either absolute\nor relative.</p>\n</li>\n<li>\n<p>A transaction output can require the spending transaction to be\ntime-locked. This is useful in many digital contracts.</p>\n</li>\n<li>\n<p>Atomic swaps are a useful way to exchange cryptocurrencies between\ntwo parties that don’t trust each other.</p>\n</li>\n<li>\n<p>Arbitrary data—for example, a car ownership token—can be stored in\n<code>OP_RETURN</code> outputs without burdening the UTXO set.</p>\n</li>\n<li>\n<p>A transaction can be marked replaceable. This lets you replace the\ntransaction in case it doesn’t confirm within a reasonable time.</p>\n</li>\n<li>\n<p>Signatures can commit to different parts of the transaction using\nsix combinations of <code>SIGHASH</code> types. This can be handy in certain\ndigital contracts.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div></article>', 'body': '\nTransactions revisited\n\n\nThis chapter covers\n\n\n\n\nTime-locking bitcoins\n\n\nSwapping coins between blockchains\n\n\nAttaching arbitrary data to transactions\n\n\nBumping the fee of a pending transaction\n\n\n\n\nWe’re now past the core chapters of the book, in which you learned the\nBitcoin basics. In this chapter, we’ll dig deeper into the\nfunctionality transactions can offer.\n\n\nWe’ll start by exploring time locks. A time lock is a way to make a\ntransaction invalid until some point in time. This means the\ntransaction can’t be confirmed before that time constraint\nis met. Also, an output of a transaction can be programmed to prevent\nit from being spent until a time constraint is fulfilled. This is\nuseful for digital contracts, such as atomic swaps, covered later in\nthis chapter.\n\n\nIt’s sometimes useful to store a small amount of data in a transaction\nin the blockchain. For example, a car manufacturer might want to track\nownership of a car by putting its chassis number into a Bitcoin\ntransaction, effectively creating a token on the Bitcoin\nblockchain. The current owner can then transfer ownership of the car\nby sending that token to the new owner.\n\n\nAs mentioned in [altcoins], several alternative cryptocurrencies are\navailable. Sometimes, you might want to trade, for example, namecoins\nfor bitcoins. The most obvious way to do this is to use an exchange to\nsell bitcoins and buy namecoins. But there are other, more\ndecentralized ways to do it. Atomic swaps let you swap bitcoins\ndirectly with someone holding namecoins without a trusted third party,\nlike an exchange.\n\n\nIf you pay a too-small transaction fee, miners might refuse to confirm\nthe transaction within a reasonable time. In this situation, it can be\nhelpful to replace the transaction with another one that pays a little\nmore in fees. This is known as fee-bumping.\n\n\nFinally, we’ll explore some intricate details of signatures. You can\ncreate signatures in different ways depending on your use case. You\ncan tune what the signature should commit to: in other words, change\nhow the signing algorithm hashes the transaction.\n\n\nTime-locked transactions\n\nWhen you create and sign a transaction, it’s valid and ready for\ninclusion in any future block. You can broadcast it immediately and have\nit mined. This is the normal case.\n\n\nBut in some cases, you may want to sign a transaction with a guarantee\nthat it won’t be mined until after at least, say, one year has passed.\n\n\nSuppose you have 100 bitcoins, and you want your daughter to inherit the\nmoney to her address @D, but only after you die. You can create a\ntransaction that’s time-locked (A payment to your daughter that will become valid on 30 April 2019).\n\n\n\nNo fee?\n\nFor the sake of simplicity, most examples in this chapter don’t pay\nany fees.\n\n\n\n\n\n\n\nFigure 1. A payment to your daughter that will become valid on 30 April 2019\n\n\n\nSequence numbers\n\nSequence numbers are always included in inputs, but I haven’t shown\nthem because they didn’t matter to the transactions used so far.\n\n\n\n\nWhat makes this transaction special are the inputs’ sequence numbers and\nthe transaction lock time. I briefly mentioned sequence numbers in\n[ch05]. They’re used to enable the lock time: if any input has a\nsequence number less than ffffffff—for example, fffffffe—the lock\ntime set on the transaction will be effective. If all sequence numbers\nare ffffffff, the lock time won’t have any effect.\n\n\nYou give this transaction, Tx1, to your daughter. It’s currently\ninvalid; your daughter stores it on her computer and prints a backup\nthat she keeps in another place. It isn’t broadcast; no full node will\naccept a block containing this transaction yet. The transaction will\nbecome valid the morning of 30 April 2019. If you die before that, your\ndaughter must wait until after the lock-time date and then claim the\nmoney by broadcasting the transaction, which will have become valid by\nthen.\n\n\nIf you don’t die before that date, you want to make sure the time-locked\ntransaction becomes useless so your daughter can’t take the money once\nthe date has passed.\n\n\nYou can create, but not yet broadcast, a new transaction, Tx2, that\ndouble spends an output that Tx1 spends (Make Tx1 invalid by spending an output that Tx1 spends, and create a new time-locked transaction for your daughter.). You then\ncreate a new transaction, time-locked for yet another year, for your\ndaugher.  When she’s stored the transaction safely, you broadcast Tx2.\n\n\n\n\n\nFigure 2. Make Tx1 invalid by spending an output that Tx1 spends, and create a new time-locked transaction for your daughter.\n\n\n\nTransaction malleability\n\nThere’s a problem here. The txid of Tx2 can change while being\nbroadcast, making Tx3 forever invalid. This is called transaction\nmalleability and is fixed by using segregated witness as discussed in\n[ch10].\n\n\n\n\nYou need to\n\n\n\n\nCreate and sign a transaction, Tx2, that spends at least one of\nthe outputs spent by Tx1. Tx2 is a normal, not time-locked,\ntransaction.  Don’t broadcast this transaction just yet.\n\n\nCreate a new time-locked transaction, Tx3, that spends all your\noutputs as if Tx2 was confirmed. Tx3 is locked for another year.\nGive it to your daughter.\n\n\nBroadcast Tx2. Once Tx2 is mined, Tx1 will become forever\ninvalid because one of the inputs of Tx1 is spent by Tx2.\n\n\n\n\nNote how the order of events is important here. If Tx2 is broadcast\nbefore you give Tx3 to your daughter, there’s a chance you’ll die\nbefore giving her Tx3. Then, your daughter won’t be able to receive\nthe funds because she has no valid transaction to claim them with. Tx1\nis invalidated by Tx2 in the blockchain, and Tx3 isn’t in your\ndaughter’s possession.\n\n\nTime measurements\n\nYou can express a lock time in two ways. The first is by setting a date\nand time as in the previous example. The second is to set a block\nheight.\n\n\nBlock time\n\nThe first example expressed the lock time as a date and time. This means\nthe median time past must be greater than the lock time in the\ntransaction. In [ch07], I noted that a block’s timestamp must be\ngreater than the past 11 blocks’ median timestamp, or the median time\npast of the block. We use the median time past to decide whether a\ntransaction is valid as regards the lock time. Suppose you died on 24\nJanuary 2019. Your mourning daughter wouldn’t be able to claim your\nmoney until 30 April 2019. Your daughter can claim your money after the median time past is earlier than your lock time. illustrates this more precisely.\n\n\n\n\n\nFigure 3. Your daughter can claim your money after the median time past is earlier than your lock time.\n\n\nYour daughter’s transaction can’t be mined in any block before the last\none shown. Before that block, the median time past is too early.\n\n\nHer transaction won’t even propagate through the Bitcoin network until\nthe lock time has passed. The nodes don’t want to keep time-locked\ntransactions in their memories because there are better uses for their\nprecious memory space than to fill them up with transactions that aren’t\neven valid (yet). It’s up to your daughter to broadcast the transaction\nafter the lock time has passed.\n\n\n\nBlock height\n\nYou can also express time using block height. You can say that a\ntransaction isn’t valid, for example, until after block height 571019.\nThis means the transaction shown in A time-locked transaction based on block height. This transaction is first valid at block height 571020. can’t be mined until\nafter block 571019 has been mined.\n\n\n\n\n\nFigure 4. A time-locked transaction based on block height. This transaction is first valid at block height 571020.\n\n\nThe earliest block in which the transaction can be included is at\nheight 571020. It’s hard to predict exactly when that block will be\nmined, but thanks to the difficulty adjustments that keep the average\nblock time at about 10 minutes, you can expect about 52,596 blocks per\nyear.\n\n\n\n\nRelative time locks\n\n\nBIP68\n\nThis Bitcoin Improvement Proposal (BIP) describes how an input can\nrequire a certain distance in time or blocks from the spent\ntransaction output.  It applies to transactions with a version of at\nleast 2.\n\n\n\n\nThe earlier example showed a use case for absolute time locks on\ntransactions. But you can also lock an input of a transaction until its\nspent output is old enough. This is called a relative time lock. You\ndo this on a per-input basis (Relative time locks can be expressed either as a number of blocks or as a number of time units. You use the inputs’ sequence numbers for this.).\n\n\n\n\n\nFigure 5. Relative time locks can be expressed either as a number of blocks or as a number of time units. You use the inputs’ sequence numbers for this.\n\n\nThe transaction’s first input has a sequence number of 004013c6. This\nsays the transaction isn’t valid until 30 days have passed since the\nspent output was confirmed (The first input locks the transaction for 30 days from the spent output.).\n\n\n\n\n\nFigure 6. The first input locks the transaction for 30 days from the spent output.\n\n\nThe leftmost bit of this sequence number is 0, which means the relative\nlock time is enabled. The bit at index 9 from the left is 1, which means\nthe rightmost 16 bits should be interpreted as “number of 512-second\nintervals.” The 16 rightmost bits are 13c6, which translates to 5,062\nin decimal form; 5,062 intervals of 512 seconds is roughly 30 days.\n\n\nThe second input has a sequence number of 000003e8 (The second input locks the transaction for 1,000 blocks from the spent output.). This\nmeans the transaction is invalid until 1,000 blocks have been mined\nsince the spent output was mined.\n\n\n\n\n\nFigure 7. The second input locks the transaction for 1,000 blocks from the spent output.\n\n\nThe leftmost bit is 0 here, too, which means the relative lock time is\nenabled for this input. The bit at index 9 from the left is 0, which\nmeans the 16 rightmost bits should be interpreted as the number of\nblocks; 03e8 is hex code for 1,000.\n\n\nThe transaction’s version needs to be at least 2 for relative time\nlocks to work. If the version is 1, the sequence numbers won’t have\nany effect on the relative lock time, but they will affect absolute\nlock time and the replace-by-fee feature, which I’ll discuss later in\nReplacing pending transactions.\n\n\n\n\nTime-locked outputs\n\nTime locks aren’t particularly useful in themselves. The only thing you\ncan do with them is create a transaction that might eventually become\nvalid.\n\n\nIt might be more useful to say something like, “The money in this output\ncan’t be spent before New Year’s Eve.” This is an example of a\ntime-locked output. An output can be locked absolutely or\nrelatively, and locks can be time-based or height-based.\n\n\nAbsolute time-locked outputs\n\n\nBIP65\n\nThis BIP describes in detail the script operator OP_CHECKLOCK-\nTIMEVERIFY, which implements the absolute time-locked output.\n\n\n\n\nSuppose you want to give your daughter 1 BTC in allowance on 1 May. You\ncan make a transaction as Paying allowance in advance to your daughter. She may not spend it before 1 May. shows.\n\n\n\n\n\nFigure 8. Paying allowance in advance to your daughter. She may not spend it before 1 May.\n\n\n\n“OP_DROP?”\n\nUsing OP_CHECKLOCKTIME VERIFY requires a successive OP_DROP due to\nhow the operator was deployed in Bitcoin. You’ll learn about that in\n[ch10]. Ignore it for now.\n\n\n\n\nYou can broadcast this transaction immediately to the Bitcoin network\nand have it mined. The first output is the interesting part. It says\nthat this output can’t be spent before 1 May. For the curious, the\nexact pubkey script is\n\n\n\n<may 1 2019 00:00:00> OP_CHECKLOCKTIMEVERIFY OP_DROP\nOP_DUP OP_HASH160 <PKHD> OP_EQUALVERIFY OP_CHECKSIG\n\n\n\nThis script will make sure the transaction spending the output is\nsufficiently time-locked, as Various spending transactions and their validity shows.\n\n\n\n\n\nFigure 9. Various spending transactions and their validity\n\n\nThe first two transactions will never be valid because their time locks\naren’t sufficiently late. The first one isn’t locked, which is illegal\naccording to the pubkey script. The second one is at least time-locked,\nbut it isn’t late enough—1 second before 1 May is too early.\n\n\nThe third transaction is OK because the time lock is at least as high as\nthe time in the pubkey script, 2019-05-01 00:00:00. This transaction\nwill be valid on and after 1 May. The last transaction will be valid on\nNew Year’s Eve, right before the fireworks. Note, however, that you\ncan’t get both of the last two transactions confirmed—you can get at\nmost one of them confirmed—because they spend the same output.\n\n\nThe result of this example is that your daughter will be able to spend\nthe output as she pleases after 1 May.\n\n\n\nRelative time-locked outputs\n\n\nBIP112\n\nThis BIP describes relative time-locked outputs. The script operator\nis called OP_CHECKSEQUENCEVERIFY.\n\n\n\n\nA relative time-locked output works similarly to an absolute\ntime-locked output, but relative locks require a certain amount of\ntime to pass between the block containing the spent output and the\nblock containing the spending transaction (Spending a relative time-locked output is allowed after a certain number of blocks have passed.).\n\n\n\n\n\nFigure 10. Spending a relative time-locked output is allowed after a certain number of blocks have passed.\n\n\nRelative time locks are most commonly used in digital contracts. A\ndigital contract can be regarded as a traditional contract between\nparties, but it’s enforced by the rules of the Bitcoin network rather\nthan national laws. Contracts are expressed as Bitcoin pubkey scripts.\nWe’ll illustrate the use of relative time-locked outputs with an atomic\nswap in the next subsection. An atomic swap means two people swap coins\nwith each other across different cryptocurrencies.\n\n\n\nAtomic swaps\n\n\nAtomic\n\nIn computer science, the word atomic means a process either\ncompletes in its entirety or not at all. For atomic swaps, it means\neither the swap completes or both parties get to keep their old\ncoins. No other outcomes are possible.\n\n\n\n\nA commonly mentioned digital contract is the atomic swap, where\ntwo parties want to swap coins with each other between different\nblockchains.\n\n\nSuppose John is chatting with Fadime on a public forum on the\ninternet.  They don’t know each other and have no reason to trust one\nanother. But they both want to trade.\n\n\nThey agree that John will trade 2 BTC for 100 of Fadime’s namecoins\n(NMC). Namecoin is an alt-coin used as a decentralized naming system,\nlike DNS. We talked briefly about alt-coins in [ch01]. It isn’t\nimportant what Namecoin actually is used for in this example; we only\nconclude that it’s another cryptocurrency on a blockchain other than\nBitcoin’s.\n\n\nThe conversation between John and Fadime starts as follows:\n\n\nJohn: Do you want to swap 100 NMC for my 2 BTC? My Namecoin public\nkey is 02381efd…88ca7f23. I’ve created a secret random number that has\nthe SHA256 hash value H. I will not tell you the secret number yet.\n\n\nFadime: Sure John, let’s do it! My Bitcoin public key is\n02b0c907…df854ee8.\n\n\n\n\n\n\n\n\n\n\n\nWe’ll call the secret number S. Only John knows S for now, but he shares\nthe hash of S—which is H—with Fadime. Now, they both have enough\ninformation to get started.\n\n\nThey create one transaction each (John and Fadime create a contract transaction each. The redeem script of the p2sh output contains the contract details.). John creates a Bitcoin\ntransaction that spends 2 BTC. Fadime creates a Namecoin transaction\nthat spends 100 NMC. They don’t broadcast their transactions yet.\n\n\n\n\n\nFigure 11. John and Fadime create a contract transaction each. The redeem script of the p2sh output contains the contract details.\n\n\nThe output of John’s contract transaction can be spent in one of two\nways:\n\n\n\n\nBy providing the pre-image of H and Fadime’s signature. John knows this\npre-image—his secret number S from the conversation described\nearlier—but Fadime doesn’t.\n\n\nWith John’s signature after 48 hours.\n\n\n\n\nLikewise, the output of Fadime’s contract transaction can be spent in\none of two ways:\n\n\n\n\nBy providing the pre-image of H and John’s signature\n\n\nWith Fadime’s signature after 24 hours\n\n\n\n\nThe relative lock time is enforced by the script operator\nOP_CHECKSEQUENCEVERIFY. This operator ensures that the output of\nJohn’s contract transaction can’t be spent by John until 48 hours have\npassed since the contract transaction was confirmed. In Fadime’s\ncontract transaction, the operator ensures that Fadime doesn’t spend\nthe output until after 24 hours.\n\n\nFadime knows John has the secret number. If Fadime broadcasts her\ncontract transaction now, John can take the money and not fulfill his\npart of the deal. For this reason, she won’t broadcast her transaction\nuntil she’s seen John’s transaction safely confirmed in the\nblockchain.  Because Fadime doesn’t know the secret, S, John can\nsafely broadcast his contract transaction without Fadime running away\nwith the money.\n\n\n\n\n\n\n\n\n\n\n\nJohn broadcasts his contract transaction. Remember that the output of\nthe contract transaction in this example is a pay-to-script-hash\n(p2sh) output. The output contains a p2sh address that doesn’t say\nanything about this being John’s contract output. For Fadime to\nidentify John’s contract transaction on the Bitcoin blockchain, she’ll\nconstruct the same redeem script as John created for his contract\ntransaction and generate the p2sh address that John’s contract\ntransaction paid to. She can then look for that p2sh address in the\nBitcoin blockchain.\n\n\nWhen Fadime finds that John’s transaction is confirmed, she broadcasts\nher own contract transaction. John waits until Fadime’s transaction is\nsufficiently confirmed on the Namecoin blockchain. Then, the actual\nswap happens in two steps. The first step of the actual swap. John claims Fadime’s 100 NMC by revealing the secret S. shows the first step.\n\n\n\n\n\nFigure 12. The first step of the actual swap. John claims Fadime’s 100 NMC by revealing the secret S.\n\n\nJohn broadcasts his swap transaction. John’s swap transaction spends\nFadime’s contract transaction output by providing S and his signature.\nAgain, note that John is spending a p2sh output. This means the first\nthing that happens during script validation is that the redeem script\nJohn provided in the signature script will be hashed and compared to the\nhash in the pubkey script. The actual redeem script will then be run.\n\n\nWe won’t go through the program in detail. But when the redeem script\nstarts running, the stack will have 1 on top. This means true in\nNamecoin, just as in Bitcoin. This value will cause the program to run\nthe part of the script that requires a pre-image and John’s signature.\nThe other part isn’t run at all.\n\n\nThe script will leave the stack with a true on top because John\nprovides both required items in the correct order—his signature and the\npre-image, S. He successfully claims his 100 NMC.\n\n\nAs soon as Fadime sees John’s swap transaction on the Namecoin network,\nshe can create her own swap transaction for the Bitcoin blockchain\n(Fadime completes the atomic swap by sending her swap transaction to the Bitcoin network.).\n\n\n\n\n\nFigure 13. Fadime completes the atomic swap by sending her swap transaction to the Bitcoin network.\n\n\nShe takes the pre-image, S, from John’s swap transaction and puts it\ninto her own swap transaction, which pays 2 BTC to Fadime’s public key\nhash, PKHF. When the two swap transactions are confirmed, the atomic\nswap is complete. The effect of all this is that John has sent 2 BTC to\nFadime under the condition that Fadime sends 100 NMC to him, and Fadime\nsends 100 NMC to John under the condition that John sends\n2 BTC to her.\n\n\nAtomic swap failure\n\nThe sequence of events in this atomic swap example illustrates a case in\nwhich both parties, John and Fadime, play by the rules. No one had to\nactually use the time-locked branches of the contract transaction\noutputs. This subsection will go through some ways the swap might fail:\n\n\n\nFadime doesn’t broadcast her contract transaction.\n\nThis means John\ncan’t spend the output of Fadime’s contract transaction, which means\nFadime will never get to see S. Without S, she can’t spend John’s\ncontract output. The only possible outcome is that John must wait 48\nhours for the relative time lock to pass and then reclaim his money.\n\nJohn doesn’t spend Fadime’s contract output in 24 hours.\n\nFadime can\nreclaim her coins, and John must wait another 24 hours before claiming\nhis coins back.\n\nJohn spends Fadime’s contract output just after 24 hours has passed but before Fadime claims back her coins.\n\nFortunately, John’s\ncontract output has a 48-hour relative lock time as opposed to the 24\nhours in Fadime’s contract output, so John can’t claim his coins back\nuntil he’s waited another 24 hours. During this time, Fadime can claim\nher BTC from John’s contract output using S and her signature.\n\nFadime gets hit by a bus just after broadcasting her contract output.\n\nThis is no good. John will be able to take his NMC from Fadime’s\ncontract output and then wait 48 hours to also claim back his BTC.\nFadime loses out on this one.\n\n\n\n\nIn the final case, we could argue that the swap wasn’t atomic. After\nall, it didn’t go through, and John ended up with all the coins. This\nis a somewhat philosophical question. But we can think of swaps as\nbeing atomic under the condition that Fadime can take action. We don’t\nhave this condition for John, though. It’s a matter of who creates the\nsecret, S.\n\n\n\n\n\nStoring stuff in the Bitcoin blockchain\n\nIn the early days of Bitcoin, it became clear that people wanted to\nput stuff in transactions in the Bitcoin blockchain that didn’t have\nanything to do with Bitcoin itself: for example, A tribute in a transaction, which is\na blockchain tribute to cryptographer Sassama, allegedly posted by Dan\nKaminsky. (The message is wrapped into three columns here to save\nspace.)\n\n\nA tribute in a transaction\n\n---BEGIN TRIBUTE---     LEN "rabbi" SASSAMA     P.S.  My apologies,\n#./BitLen                    1980-2011          BitCoin people.  He\n:::::::::::::::::::     Len was our friend.     also would have\n:::::::.::.::.:.:::     A brilliant mind,       LOL\'d at BitCoin\'s\n:.: :.\' \' \' \' \' : :     a kind soul, and        new dependency upon\n:.:\'\' ,,xiW,"4x, \'\'     a devious schemer;         ASCII BERNANKE\n:  ,dWWWXXXXi,4WX,      husband to Meredith     :\'::.:::::.:::.::.:\n\' dWWWXXX7"     `X,     brother to Calvin,      : :.: \' \' \' \' : :\':\n lWWWXX7   __   _ X     son to Jim and          :.:     _.__    \'.:\n:WWWXX7 ,xXX7\' "^^X     Dana Hartshorn,         :   _,^"   "^x,   :\nlWWWX7, _.+,, _.+.,     coauthor and            \'  x7\'        `4,\n:WWW7,. `^"-" ,^-\'      cofounder and            XX7            4XX\n WW",X:        X,       Shmoo and so much        XX              XX\n "7^^Xl.    _(_x7\'      more.  We dedicate       Xl ,xxx,   ,xxx,XX\n l ( :X:       __ _     this silly hack to      ( \' _,+o, | ,o+,"\n `. " XX  ,xxWWWWX7     Len, who would have      4   "-^\' X "^-\'" 7\n  )X- "" 4X" .___.      found it absolutely      l,     ( ))     ,X\n,W X     :Xi  _,,_      hilarious.               :Xx,_ ,xXXXxx,_,XX\nWW X      4XiyXWWXd     --Dan Kaminsky,           4XXiX\'-___-`XXXX\'\n"" ,,      4XWWWWXX     Travis Goodspeed           4XXi,_   _iXX7\'\n, R7X,       "^447^                               , `4XXXXXXXXX^ _,\nR, "4RXk,      _, ,                               Xx,  ""^^^XX7,xX\nTWk  "4RXXi,   X\',x                             W,"4WWx,_ _,XxWWX7\'\nlTWk,  "4RRR7\' 4 XH                             Xwi, "4WW7""4WW7\',W\n:lWWWk,  ^"     `4                              TXXWw, ^7 Xk 47 ,WH\n::TTXWWi,_  Xll :..                             :TXXXWw,_ "), ,wWT:\n=-=-=-=-=-=-=-=-=-=                             ::TTXXWWW lXl WWT:\n                                                ----END TRIBUTE----\n\n\n\nAlthough this was certainly interesting and funny, it had some\nimplications for Bitcoin’s full nodes.\n\n\nThe message in A tribute in a transaction was written into the blockchain using a\nsingle transaction with txid\n\n\n\n930a2114cdaa86e1fac46d15c74e81c09eee1d4150ff9d48e76cb0697d8e1d72\n\n\n\n\nBlockchain explorer\n\nYou can take a closer look at this transaction using a blockchain\nexplorer, such as the one at [web-bernanke-ascii-art].\n\n\n\n\nThe author created a transaction with 78 outputs, one for each\n20-character line in the message. Each line ends with a space, so only\n19 characters are visible.\n\n\nFor example, the last output’s pubkey script looks like this:\n\n\n\nOP_DUP OP_HASH160 2d2d2d2d454e4420545249425554452d2d2d2d20 OP_EQUALVERIFY OP_CHECKSIG\n\n\n\nThe interesting part is the PKH. This isn’t an actual PKH, but a made-up\none. Maybe you can see a pattern when you compare it to the line\n“----END TRIBUTE---- ”:\n\n\n\n2d 2d 2d 2d 45 4e 44 20 54 52 49 42 55 54 45 2d 2d 2d 2d 20\n-  -  -  -  E  N  D     T  R  I  B  U  T  E  -  -  -  -\n\n\n\nThis “public key hash” encodes one 20-character line in the\nmessage. It uses the ASCII table to encode characters. For example,\nthe character - is encoded as the byte 2d. The characters A–Z are\nencoded by the bytes 41–5a, and a space is encoded as byte 20.\n\n\nLet’s look at the PKHs of the message’s last 10 lines along with the\nASCII-decoded text:\n\n\n\n20203458586958272d5f5f5f2d60585858582720   4XXiX\'-___-`XXXX\'\n202020345858692c5f2020205f69585837272020    4XXi,_   _iXX7\'\n20202c2060345858585858585858585e205f2c20   , `4XXXXXXXXX^ _,\n202058782c202022225e5e5e5858372c78582020   Xx,  ""^^^XX7,xX\n572c22345757782c5f205f2c5878575758372720 W,"4WWx,_ _,XxWWX7\'\n5877692c202234575737222234575737272c5720 Xwi, "4WW7""4WW7\',W\n54585857772c205e3720586b203437202c574820 TXXWw, ^7 Xk 47 ,WH\n3a5458585857772c5f2022292c202c7757543a20 :TXXXWw,_ "), ,wWT:\n3a3a54545858575757206c586c205757543a2020 ::TTXXWWW lXl WWT:\n2d2d2d2d454e4420545249425554452d2d2d2d20 ----END TRIBUTE----\n\n\n\nBloated UTXO set\n\n\n\n\n\n\n\n\n\n\nBecause these PKHs are made up, they have no known pre-images. This also\nmeans no known public/private key pairs are associated with them, so no\none can ever spend the outputs. They’re unspendable. The last PKH’s\nBitcoin address is 157sXYpj…QnHB6FGU. Anyone who pays money to this\naddress is throwing that money in the trash. The money is lost forever.\nIt’s the equivalent of burning a dollar bill.\n\n\nUnspendable outputs like these are indistinguishable from ordinary,\nspendable outputs. You can’t prove that they’re unspendable. Full nodes\nhave to treat them as spendable, meaning they have to keep these\nunspendable outputs in their unspent transaction output (UTXO) set\nforever. This places an unnecessary burden on nodes, which need to keep\nall these outputs in memory.\n\n\nBitcoin’s developers came up with a partial solution to this problem.\nInstead of sending money to unprovably unspendable outputs, users can\ncreate provably unspendable outputs. If a full node can determine if\nan output is unspendable,\nit doesn’t have to insert that output into its UTXO set.\n\n\nThe partial solution involves a new script operator called OP_RETURN.\nThis operator immediately fails when executed. A typical OP_RETURN\npubkey script can look like this:\n\n\n\nOP_RETURN "I\'m Grokking Bitcoin"\n\n\n\nIf someone tried to spend this output, the script would fail once it\nencountered the OP_RETURN. If the pubkey script contains this\noperator, a full node can determine that the output isn’t spendable and\nignore it, saving the UTXO set from being forever bloated with this\nnonsense. A typical OP_RETURN output pays 0 BTC, but it can also set a\nvalue greater than 0 to “burn” money.\n\n\nThere are a few policies regarding OP_RETURN:\n\n\n\n\nThe full pubkey script must not be bigger than 83 bytes.\n\n\nThere can be only one OP_RETURN output per transaction.\n\n\n\n\nThese two policies are just that—policies. Full nodes adhering to\nthese policies won’t relay transactions that violate them. But if they\nencounter a block that contains transactions that violate the\npolicies, the block will be accepted and relayed. I’ll talk more about\npolicies and consensus rules, strict rules that apply to blocks,\nin [ch10] and [ch11].\n\n\n\nCreating a token in Bitcoin\n\nI talked briefly about tracking ownership on the blockchain in\n[ch01]. Suppose a car manufacturer, let’s call it Ampere, decides\nthat it wants to digitally track the ownership of its cars on the\nBitcoin blockchain. This can be accomplished by creating a token in\nBitcoin.\n\n\nSuppose Ampere wants to create a token for a newly manufactured car with\nchassis number 123456. It broadcasts a Bitcoin transaction as shown in\nAmpere creates a new token for a newly built car. It issues the token to itself because it still owns this car..\n\n\n\n\n\nFigure 14. Ampere creates a new token for a newly built car. It issues the token to itself because it still owns this car.\n\n\nThis “Ampere token protocol” specifies that a new token is created when\n\n\n\n\nAmpere spends a coin from PKHA.\n\n\nThe transaction contains an OP_RETURN output with the text\n"ampere <chassis number>".\n\n\nThe first output is the initial token owner.\n\n\n\n\nAmpere has a well-known web page at https://www.ampere.example.com,\nwhere it has published its public key corresponding to PKHA. It also\npumps out its public key through advertisements and via Facebook and\nTwitter. It does all this so people can verify that PKHA actually\nbelongs to Ampere.\n\n\nSuppose Ampere sells this car to a car dealer. The dealer has a public\nkey hash, PKHD. Ampere sells the car to a car dealer with public key hash PKHD. shows how Ampere will transfer digital\nownership to the dealer.\n\n\n\n\n\nFigure 15. Ampere sells the car to a car dealer with public key hash PKHD.\n\n\nAccording to our simple protocol, car ownership is transferred by\nspending the old owner’s output. The following rules apply:\n\n\n\n\nThe spending transaction spends the old owner’s output.\n\n\nThe first output of the spending transaction is the new owner of\nthe car.\n\n\n\n\nThe car dealer is now the new owner because PKHD is the first output\nof the spending transaction. That’s it. When the dealer sells this car\nto a consumer, Fadime, it transfers the car’s ownership to Fadime’s\naddress, PKHF (The car dealer transfers the car’s ownership to Fadime’s PKHF.).\n\n\n\n\n\nFigure 16. The car dealer transfers the car’s ownership to Fadime’s PKHF.\n\n\n\nStarting the car with proof of ownership\n\nNow that Fadime is the rightful owner of this car, wouldn’t it be cool\nif she could start it by proving she’s the owner? She can. The car is\nequipped with an ignition lock that starts the engine when Fadime sends\na proof of ownership to the car (Fadime starts her car by signing a challenge with her private key.).\n\n\n\n\n\nFigure 17. Fadime starts her car by signing a challenge with her private key.\n\n\nFadime first asks the car to start. The car won’t start if it doesn’t\nknow that Fadime has the private key belonging to PKHF. The car\ngenerates a big random number and sends it to Fadime, who signs this\nrandom number with the private key and sends the signature and her\npublic key to the car.\n\n\nThe car needs the public key to verify that it corresponds to PKHF as\nwritten in the blockchain. The car keeps track of who currently owns it\nby running a lightweight wallet that understands the Ampere token\nprotocol.\n\n\nWhen the car has verified that the signature is valid and from the\ncorrect private key, it will start the engine.\n\n\n\n\nReplacing pending transactions\n\nWhen you send a Bitcoin transaction to buy a book online, the bookstore\nwill wait for the transaction to confirm before it sends the book to\nyou. Usually, your transaction will be confirmed within an hour or so,\nbut what if it isn’t? What if no miner ever wants to include your\ntransaction? This can certainly happen if your transaction fee isn’t\nsufficient (You pay for your book and set the transaction fee to 0.00001 BTC.).\n\n\n\n\n\nFigure 18. You pay for your book and set the transaction fee to 0.00001 BTC.\n\n\nYou might recall from [transaction-fees] that the\ntransaction fee is the sum of the input values minus the sum of the\noutput values. The fee per byte that miners care about is calculated by\ndividing that fee by the transaction’s size—in this case, 1,000 satoshis\ndivided by 226 bytes, which is about 4.4 sat/byte.\n\n\nIf no miner is willing to include the transaction for that fee, your\ntransaction will be stuck waiting for confirmation. If the transaction\nisn’t confirmed, you won’t get your book. You probably want to do\nsomething about this situation. Maybe you can create a new, similar\ntransaction, but with a higher fee. Let’s try (You try to replace your old, stuck transaction with a new one with a higher fee.).\n\n\n\n\n\nFigure 19. You try to replace your old, stuck transaction with a new one with a higher fee.\n\n\nThat’s nice: you’ve created and signed a new transaction with a fee 20\ntimes higher. This will surely get mined, you think, and broadcast the\ntransaction.\n\n\nThe problem is that your new transaction will probably be regarded as a\ndouble-spend attempt and be dropped by most nodes. They’ll think the\nfirst transaction is the one that counts, and they’ll disregard any\nfurther transactions that spend the same output. How to handle the\nsecond transaction is completely up to the nodes, but the most common\npolicy is to drop it. This is what Bitcoin Core does, and that’s the\nmost widely used Bitcoin software. This policy is known as the\nfirst-seen policy.\n\n\n\nHint for exercises\n\nKeep this in mind for Exercise 11.\n\n\n\n\nYou might be able to circumvent this policy by sending the second\ntransaction directly to one or more miners. Miners have different\nincentives than full nodes. Mining full nodes want to earn\nrewards—subsidy + fees—by providing proof of work to the blockchain,\nwhereas non-mining full nodes want to keep their memory and computing\nresource consumption down. If a miner could get hold of the second,\nhigh-fee transaction, it would probably decide to include it despite\nthe fact that the low-fee transaction was the first seen. Replacing\ntransactions in this way is impractical because you don’t know any\nminers’ IP addresses unless they’re published somehow. You also reveal\nyour IP address to the miners, and the miners then become targets for\nvarious surveillance organizations or companies wanting to monetize\ninformation about you.\n\n\nOpt-in replace-by-fee\n\n\nBIP125\n\nThis BIP describes how transactions can declare themselves\nreplaceable.\n\n\n\n\nIn 2016, a policy was deployed for transaction replacement. It’s\ngenerally called opt-in replace-by-fee, or opt-in RBF\n(Use opt-in RBF to easily replace a transaction before it’s confirmed.). It works by using the sequence numbers of a\ntransaction’s inputs.\n\n\n\n\n\nFigure 20. Use opt-in RBF to easily replace a transaction before it’s confirmed.\n\n\nSuppose again that you want to pay for a book in an online bookstore.\nWhen you create the transaction, you make sure one of the inputs\n(there’s only one in this example) has a sequence number less than\nfffffffe. This signals to nodes that you want this transaction to be\nreplaceable.\n\n\nWhen a node receives this transaction, it will be treated as a normal\ntransaction, but the replaceability will be remembered.\n\n\nWhen you later notice that your transaction doesn’t confirm because of a\ntoo-low fee, you can create a new, replacement transaction with a higher\nfee. When you broadcast the replacement transaction, the nodes receiving\nit will—if they implement the opt-in RBF policy—kindly replace the old\ntransaction with the new one and relay the new one to their peers. The\nold transaction will be dropped. This way, the replacement transaction\nwill eventually reach all nodes, including miners, and will hopefully be\nconfirmed within a reasonable time.\n\n\nIn this example, you set the sequence number of the replacement\ntransaction’s input to ffffffff. This means the replacement\ntransaction is not itself replaceable. If you want the replacement\ntransaction to also be replaceable, you must set its sequence number to\nfffffffd or less, just as you did with the replaced transaction.\n\n\nYou might be wondering where these sequence numbers come from. The\nintention with sequence numbers from the beginning was to allow for\nanother kind of transaction replacement. The feature was disabled early\nin Bitcoin, but the sequence numbers remained in the transaction inputs.\nThese sequence numbers have since been repurposed for absolute lock\ntime, relative lock time, and replace-by-fee, as described throughout\nthis chapter. If you feel confused, don’t worry; I’ll summarize the\ndifferent uses of sequence numbers in Recap.\n\n\n\nChild pays for parent\n\nThere is yet another way to bump up a fee. Suppose you have the\nsituation depicted earlier in You pay for your book and set the transaction fee to 0.00001 BTC., and you notice that this\ntransaction gets stuck (You haven’t paid a sufficient transaction fee. The transaction is stuck pending because miners don’t want to include it in a block.).\n\n\n\n\n\nFigure 21. You haven’t paid a sufficient transaction fee. The transaction is stuck pending because miners don’t want to include it in a block.\n\n\nYou can make another transaction that spends your change and pays an\nextra-high fee to compensate for the low fee in the original\ntransaction (Spending your change and paying an extra fee for the “parent” transaction).\n\n\n\n\n\nFigure 22. Spending your change and paying an extra fee for the “parent” transaction\n\n\nSuppose a miner sees these two transactions. If the miner wants to\ncollect the fee from the child transaction, it has to include both the\nparent and the child transactions. If it tries to include only the\nchild transaction, the block won’t be valid because the child\ntransaction spends money that doesn’t exist in the blockchain.\n\n\nBoth you and the bookstore can perform this trick. If you don’t bump\nthe fee, the bookstore can spend its output of 10 BTC and pay itself\n9.9998 BTC to add 0.0002 BTC to the combined fee.\n\n\n\n\nDifferent signature types\n\nWhen you sign a typical Bitcoin transaction, you sign the entire\ntransaction, excluding the signature script (Normally, the entire transaction is signed. All inputs and all outputs are covered.).\n\n\n\n\n\nFigure 23. Normally, the entire transaction is signed. All inputs and all outputs are covered.\n\n\nThis transaction contains two inputs, and each input signs the complete\ntransaction. A signature commits to all inputs and all outputs. If any\nof the inputs or outputs change, the signature will become invalid.\n\n\nYou can change this signature behavior using a parameter in the\nsignature called the SIGHASH type. You can commit to outputs in three\nways (ALL, SINGLE, and NONE) and to inputs in two ways\n(ANYONECANPAY set or not set). Any combination of an input SIGHASH\ntype and an output SIGHASH type can be used, which makes six different\ncombinations, as A signature can commit to different parts of the transaction depending on the SIGHASH types. The signature doesn’t include the grayed-out parts. shows.\n\n\n\n\n\nFigure 24. A signature can commit to different parts of the transaction depending on the SIGHASH types. The signature doesn’t include the grayed-out parts.\n\n\nFor the outputs, you can commit to the following:\n\n\n\n\nAll outputs (ALL)—No one gets to change any outputs.\n\n\nA single output at the same index as the input (SINGLE)—You\nonly care about the specific output. The other outputs can change.\n\n\nNo outputs (NONE)—You don’t care where the money goes. Anyone\ncan add any outputs without invalidating your signature.\n\n\n\n\nFor the inputs, you can commit as follows:\n\n\n\n\nAll inputs (ANYONECANPAY is not set)—No one can change any\ninput without invalidating your signature.\n\n\nOnly the current input (ANYONECANPAY is set)—Other inputs\nmight be changed, removed, or added. You don’t care who pays. Anyone can\npay.\n\n\n\n\nFor the vast majority of signatures, ALL combined with an unset\nANYONECANPAY is used to commit to the whole transaction. This is what\nyou’re used to from the earlier chapters in this book. Other types are\nrare and are used primarily for specialized digital contracts.\n\n\n\nRecap\n\nThis chapter has been a potpourri of things you can do with\ntransactions.\n\n\nTransactions and transaction outputs can be time-locked in different\nways to prevent funds from being spent until a certain date or time span\nhas occurred, as the following table shows.\n\n\n\n\n\n\n\n\nAction\nResult\n\n\n\n\nSet the lock time of a transaction.\nThe transaction won’t be valid until a certain time or block height.\n\n\nSet the relative time lock on an input using the sequence number.\nThe transaction won’t be valid until a certain amount of time or\nnumber of blocks have passed.\n\n\nUse OP_CHECKLOCKTIMEVERIFY in a pubkey script.\nThe output can’t be spent until a certain time or block height.\n\n\nUse OP_CHECKSEQUENCEVERIFY in a pubkey script.\nThe output can’t be spent until a certain amount of time or number\nof blocks have passed.\n\n\n\n\nAll these variants can be expressed in either block height or time. Time\nlocks are useful mostly in digital contracts, such as atomic swaps. An\natomic swap lets people who don’t trust each other swap coins without\nusing a trusted third party.\n\n\n\n\n\n\n\nThe general idea is that John must reveal the secret, S, to claim his\ncoins. Fadime can then use S to claim her coins.\n\n\nArbitrary data can be stored in OP_RETURN outputs without placing a\nburden on nodes’ UTXO sets. You can use this to create tokens. For\nexample, the ownership of a car can be tracked and verified on the\nBitcoin blockchain.\n\n\nA transaction can sometimes get stuck in a pending state because no\nminers want to include it in their blocks. This usually happens\nbecause you’ve paid a too-small fee. To prepare for this situation,\nyou can mark the transaction as replaceable by setting the sequence\nnumber of at least one input to a value lower than fffffffe. If that\ntransaction gets stuck, you can bump the the fee by broadcasting a\nreplacement transaction that pays a higher fee.\n\n\nInputs’ sequence numbers are used for various purposes. We’ve\ndiscussed many different uses for sequence numbers in this chapter,\nand it’s hard to keep track of them. Sequence numbers are used to enable or disable various features. ✔=enabled, ✘=disabled. *Tx version 2 required. summarizes the meaning\nof different sequence number values.\n\n\nTable 1. Sequence numbers are used to enable or disable various features. ✔=enabled, ✘=disabled. *Tx version 2 required.\n\n\n\n\n\n\n\n\nSequence value\nLock time, any input\nReplace-by-fee (BIP125), any input\nRelative lock time on input (BIP68)*\n\n\n\n\n00000000-7fffffff\n✔\n✔\n✔\n\n\n80000000-fffffffd\n✔\n✔\n✘\n\n\nfffffffe\n✔\n✘\n✘\n\n\nffffffff\n✘\n✘\n✘\n\n\n\n\n\nExercises\n\nWarm up\n\n\n\nWhat’s required from a transaction’s inputs to enable absolute\nlock time?\n\n\nSuppose a transaction is time-locked (absolute) to 25 December\n2019 00:00:00. How does a miner check whether the transaction is OK to\nput in a block?\n\n\nWhere is the relative lock time of an input located?\n\n\nSuppose Adam and Eve want to swap coins with each other using an\natomic swap. How many transactions would be created on each blockchain\nupon completion?\n\n\nWhy is it bad for the UTXO set to store arbitrary data such as\n“HELLO WORLD” as fake PKHs in outputs as opposed to storing them in\nOP_RETURN outputs?\n\n\nWhy would you want to replace a broadcast transaction that isn’t\nconfirmed yet?\n\n\n\n\n\nDig in\n\n\n\nExplain the differences between absolute lock time and relative\nlock time.\n\n\n(This exercise is hard; feel free to skip it.) Suppose you want to\nbet 1 BTC that it’s going to snow in London on Christmas Eve, and Ruth\nbets 1 BTC that it’s not. You appoint a person, Beth, whom you both\ntrust to solve any conflicts that might occur. You and Ruth\ncollaborate to create and broadcast a transaction that spends 1 BTC\neach to an output of 2 BTC with the following redeem script. (The\nredeem script can be made smaller, but to make it simpler to read, I\nused a slightly bigger version.) Explain how the redeem script works\non a conceptual level.\n\n\n\n\n\n\n\nIf a p2sh output pays to the hash of a redeem script that consists\nsolely of an OP_RETURN with 32 random bytes, would full nodes be\nable to know that the output is unspendable?\n\n\nOP_RETURN 53a1e411…b4e6d949\n\n\n\n\nExplain how the first-seen policy works. Also, are nodes obliged to\nfollow the policy?\n\n\n\n\n\n\nOpt-in RBF offers a method for transaction replacement. Is\nthere any fundamental security difference between a transaction with\nopt-in RBF enabled and a transaction that doesn’t opt in? Explain your\nreasoning.\n\n\n\n\n\n\nSummary\n\n\n\nTransactions can be locked with respect to time or block height\ndepending on your application needs. The locks can be either absolute\nor relative.\n\n\nA transaction output can require the spending transaction to be\ntime-locked. This is useful in many digital contracts.\n\n\nAtomic swaps are a useful way to exchange cryptocurrencies between\ntwo parties that don’t trust each other.\n\n\nArbitrary data—for example, a car ownership token—can be stored in\nOP_RETURN outputs without burdening the UTXO set.\n\n\nA transaction can be marked replaceable. This lets you replace the\ntransaction in case it doesn’t confirm within a reasonable time.\n\n\nSignatures can commit to different parts of the transaction using\nsix combinations of SIGHASH types. This can be handy in certain\ndigital contracts.\n\n\n\n\n\n', 'body_type': 'html', 'authors': ['Kalle Rosenbaum'], 'domain': 'https://github.com', 'url': 'https://github.com/kallerosenbaum/grokkingbitcoin/blob/master/ch09-transactions-revisited.adoc', 'created_at': '2023-06-29T13:58:34.022448'}}]
